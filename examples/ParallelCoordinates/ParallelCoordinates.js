/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(1);

	var _ParallelCoordinates = __webpack_require__(5);

	var _ParallelCoordinates2 = _interopRequireDefault(_ParallelCoordinates);

	var _FieldSelector = __webpack_require__(17);

	var _FieldSelector2 = _interopRequireDefault(_FieldSelector);

	var _CompositeClosureHelper = __webpack_require__(6);

	var _CompositeClosureHelper2 = _interopRequireDefault(_CompositeClosureHelper);

	var _FieldProvider = __webpack_require__(28);

	var _FieldProvider2 = _interopRequireDefault(_FieldProvider);

	var _Histogram1DProvider = __webpack_require__(29);

	var _Histogram1DProvider2 = _interopRequireDefault(_Histogram1DProvider);

	var _Histogram2DProvider = __webpack_require__(30);

	var _Histogram2DProvider2 = _interopRequireDefault(_Histogram2DProvider);

	var _LegendProvider = __webpack_require__(31);

	var _LegendProvider2 = _interopRequireDefault(_LegendProvider);

	var _MutualInformationProvider = __webpack_require__(45);

	var _MutualInformationProvider2 = _interopRequireDefault(_MutualInformationProvider);

	var _state = __webpack_require__(46);

	var _state2 = _interopRequireDefault(_state);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var bodyElt = document.querySelector('body');

	var parallelCoordinatesContainer = document.createElement('div');
	parallelCoordinatesContainer.style.position = 'relative';
	parallelCoordinatesContainer.style.width = '45%';
	parallelCoordinatesContainer.style.height = '250px';
	parallelCoordinatesContainer.style.float = 'left';
	bodyElt.appendChild(parallelCoordinatesContainer);

	var fieldSelectorContainer = document.createElement('div');
	fieldSelectorContainer.style.position = 'relative';
	fieldSelectorContainer.style.width = '45%';
	fieldSelectorContainer.style.height = '250px';
	fieldSelectorContainer.style.float = 'left';
	bodyElt.appendChild(fieldSelectorContainer);

	var provider = _CompositeClosureHelper2.default.newInstance(function (publicAPI, model) {
	  var initialValues = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  Object.assign(model, initialValues);
	  _FieldProvider2.default.extend(publicAPI, model, initialValues);
	  _Histogram1DProvider2.default.extend(publicAPI, model, initialValues);
	  _Histogram2DProvider2.default.extend(publicAPI, model, initialValues);
	  _LegendProvider2.default.extend(publicAPI, model, initialValues);
	  _MutualInformationProvider2.default.extend(publicAPI, model, initialValues);
	})(_state2.default);

	// Create parallel coordinates
	var parallelCoordinates = _ParallelCoordinates2.default.newInstance({ provider: provider, container: parallelCoordinatesContainer });
	parallelCoordinates.resize();
	parallelCoordinates.render();

	// Create field selector
	var fieldSelector = _FieldSelector2.default.newInstance({ provider: provider, container: fieldSelectorContainer });
	fieldSelector.resize();
	fieldSelector.render();

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(2);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../css-loader/index.js!./../postcss-loader/index.js!./normalize.css", function() {
				var newContent = require("!!./../css-loader/index.js!./../postcss-loader/index.js!./normalize.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports


	// module
	exports.push([module.id, "/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */\n\n/**\n * 1. Change the default font family in all browsers (opinionated).\n * 2. Prevent adjustments of font size after orientation changes in IE and iOS.\n */\n\nhtml {\n  font-family: sans-serif; /* 1 */\n  -ms-text-size-adjust: 100%; /* 2 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/**\n * Remove the margin in all browsers (opinionated).\n */\n\nbody {\n  margin: 0;\n}\n\n/* HTML5 display definitions\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 9-.\n * 1. Add the correct display in Edge, IE, and Firefox.\n * 2. Add the correct display in IE.\n */\n\narticle,\naside,\ndetails, /* 1 */\nfigcaption,\nfigure,\nfooter,\nheader,\nmain, /* 2 */\nmenu,\nnav,\nsection,\nsummary { /* 1 */\n  display: block;\n}\n\n/**\n * Add the correct display in IE 9-.\n */\n\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n}\n\n/**\n * Add the correct display in iOS 4-7.\n */\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Add the correct display in IE 10-.\n * 1. Add the correct display in IE.\n */\n\ntemplate, /* 1 */\n[hidden] {\n  display: none;\n}\n\n/* Links\n   ========================================================================== */\n\n/**\n * 1. Remove the gray background on active links in IE 10.\n * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.\n */\n\na {\n  background-color: transparent; /* 1 */\n  -webkit-text-decoration-skip: objects; /* 2 */\n}\n\n/**\n * Remove the outline on focused links when they are also active or hovered\n * in all browsers (opinionated).\n */\n\na:active,\na:hover {\n  outline-width: 0;\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * 1. Remove the bottom border in Firefox 39-.\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Prevent the duplicate application of `bolder` by the next rule in Safari 6.\n */\n\nb,\nstrong {\n  font-weight: inherit;\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * Add the correct font style in Android 4.3-.\n */\n\ndfn {\n  font-style: italic;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/**\n * Add the correct background and color in IE 9-.\n */\n\nmark {\n  background-color: #ff0;\n  color: #000;\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10-.\n */\n\nimg {\n  border-style: none;\n}\n\n/**\n * Hide the overflow in IE.\n */\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct margin in IE 8.\n */\n\nfigure {\n  margin: 1em 40px;\n}\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change font properties to `inherit` in all browsers (opinionated).\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\nselect,\ntextarea {\n  font: inherit; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Restore the font weight unset by the previous rule.\n */\n\noptgroup {\n  font-weight: bold;\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`\n *    controls in Android 4.\n * 2. Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\nhtml [type=\"button\"], /* 1 */\n[type=\"reset\"],\n[type=\"submit\"] {\n  -webkit-appearance: button; /* 2 */\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Change the border, margin, and padding in all browsers (opinionated).\n */\n\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Remove the default vertical scrollbar in IE.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10-.\n * 2. Remove the padding in IE 10-.\n */\n\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.\n */\n\n[type=\"search\"]::-webkit-search-cancel-button,\n[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * Correct the text style of placeholders in Chrome, Edge, and Safari.\n */\n\n::-webkit-input-placeholder {\n  color: inherit;\n  opacity: 0.54;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n", ""]);

	// exports


/***/ },
/* 3 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];

		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};

		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];

	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}

		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();

		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

		var styles = listToStyles(list);
		addStylesToDom(styles, options);

		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}

	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}

	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}

	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}

	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}

	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}

	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}

	function addStyle(obj, options) {
		var styleElement, update, remove;

		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}

		update(obj);

		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}

	var replaceText = (function () {
		var textStore = [];

		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();

	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;

		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}

	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;

		if(media) {
			styleElement.setAttribute("media", media)
		}

		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}

	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;

		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}

		var blob = new Blob([css], { type: "text/css" });

		var oldSrc = linkElement.href;

		linkElement.href = URL.createObjectURL(blob);

		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.newInstance = undefined;
	exports.affine = affine;
	exports.perfRound = perfRound;
	exports.dataToScreen = dataToScreen;
	exports.screenToData = screenToData;
	exports.extend = extend;

	var _CompositeClosureHelper = __webpack_require__(6);

	var _CompositeClosureHelper2 = _interopRequireDefault(_CompositeClosureHelper);

	var _d = __webpack_require__(9);

	var _d2 = _interopRequireDefault(_d);

	var _ParallelCoordinates = __webpack_require__(10);

	var _ParallelCoordinates2 = _interopRequireDefault(_ParallelCoordinates);

	var _AxisControlSvg = __webpack_require__(12);

	var _AxisControlSvg2 = _interopRequireDefault(_AxisControlSvg);

	var _ParallelCoordsIconSmall = __webpack_require__(13);

	var _ParallelCoordsIconSmall2 = _interopRequireDefault(_ParallelCoordsIconSmall);

	var _body = __webpack_require__(14);

	var _body2 = _interopRequireDefault(_body);

	var _AxesManager = __webpack_require__(15);

	var _AxesManager2 = _interopRequireDefault(_AxesManager);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	// ----------------------------------------------------------------------------
	// Global
	// ----------------------------------------------------------------------------

	function affine(inMin, val, inMax, outMin, outMax) {
	  return (val - inMin) / (inMax - inMin) * (outMax - outMin) + outMin;
	}

	function perfRound(val) {
	  return 0.5 + val | 0;
	}

	function dataToScreen(model, dataY, axis) {
	  return perfRound(!axis.isUpsideDown() ? affine(axis.range[0], dataY, axis.range[1], model.canvasArea.height - model.borderOffsetBottom, model.borderOffsetTop) : affine(axis.range[0], dataY, axis.range[1], model.borderOffsetTop, model.canvasArea.height - model.borderOffsetBottom));
	}

	function screenToData(model, screenY, axis) {
	  return !axis.isUpsideDown() ? affine(model.canvasArea.height - model.borderOffsetBottom, screenY, model.borderOffsetTop, axis.range[0], axis.range[1]) : affine(model.borderOffsetTop, screenY, model.canvasArea.height - model.borderOffsetBottom, axis.range[0], axis.range[1]);
	}

	// ----------------------------------------------------------------------------
	// Parallel Coordinate
	// ----------------------------------------------------------------------------

	function parallelCoordinate(publicAPI, model) {
	  function updateSizeInformation() {
	    if (!model.canvas) {
	      return;
	    }
	    model.canvasArea = {
	      width: model.canvas.width,
	      height: model.canvas.height
	    };
	    model.drawableArea = {
	      width: model.canvasArea.width - (model.borderOffsetLeft + model.borderOffsetRight),
	      height: model.canvasArea.height - (model.borderOffsetTop + model.borderOffsetBottom)
	    };
	  }

	  // -======================================================
	  model.canvas = document.createElement('canvas');
	  model.canvas.style.position = 'absolute';
	  model.canvas.style.top = 0;
	  model.canvas.style.right = 0;
	  model.canvas.style.bottom = 0;
	  model.canvas.style.left = 0;
	  model.ctx = model.canvas.getContext('2d');

	  model.fgCanvas = document.createElement('canvas');
	  model.fgCtx = model.fgCanvas.getContext('2d');
	  model.bgCanvas = document.createElement('canvas');
	  model.bgCtx = model.bgCanvas.getContext('2d');

	  model.axes = new _AxesManager2.default();

	  function fetchSelectionData() {
	    if (model.provider && model.provider.isA('SelectionProvider')) {
	      model.provider.resetSelectionHistogram2D(model.axes.getSelections());
	      model.axes.getAxesPairs().forEach(function (pair) {
	        var _model$provider;

	        (_model$provider = model.provider).loadSelectionHistogram2D.apply(_model$provider, _toConsumableArray(pair));
	      });
	    }
	  }

	  function fetchData() {
	    model.needData = true;

	    if (model.provider) {
	      var dataToLoadCount = 0;

	      // Initialize axes
	      if (model.provider.isA('FieldProvider')) {
	        /* eslint-disable arrow-body-style */
	        model.axes.updateAxes(model.provider.getActiveFieldNames().map(function (name) {
	          return {
	            name: name,
	            range: model.provider.getField(name).range
	          };
	        }));
	      }

	      // Get the axes names
	      var fieldNames = model.axes.getAxesNames();

	      // Fetch 2D Histogram
	      if (model.provider.isA('Histogram2DProvider')) {
	        dataToLoadCount += fieldNames.length - 1;
	        for (var i = 1; i < fieldNames.length; i++) {
	          // Return true if the data is already loaded
	          dataToLoadCount -= model.provider.loadHistogram2D(fieldNames[i - 1], fieldNames[i]) ? 1 : 0;
	        }
	      }

	      // Check if we can render or not
	      model.needData = !!dataToLoadCount;

	      if (!model.needData) {
	        publicAPI.render();
	      }
	    }
	  }

	  function drawSelectionBars(selectionBarModel) {
	    var svg = _d2.default.select(model.container).select('svg');
	    var selBarGroup = svg.select('g.selection-bars');

	    // Make the selection bars
	    var selectionBarNodes = selBarGroup.selectAll('rect.selection-bars').data(selectionBarModel);

	    selectionBarNodes.enter().append('rect').classed('selection-bars', true).classed(_ParallelCoordinates2.default.selectionBars, true);

	    selectionBarNodes.exit().remove();

	    selBarGroup.selectAll('rect.selection-bars').classed(_ParallelCoordinates2.default.controlItem, true).attr('width', model.selectionBarWidth).attr('height', function (d, i) {
	      var barHeight = d.screenRangeY[1] - d.screenRangeY[0];
	      if (barHeight < 0) {
	        barHeight = d.screenRangeY[0] - d.screenRangeY[1];
	      }
	      return barHeight;
	    }).attr('transform', function (d, i) {
	      var startPoint = d.screenRangeY[0] > d.screenRangeY[1] ? d.screenRangeY[1] : d.screenRangeY[0];
	      return 'translate(' + (d.screenX - model.selectionBarWidth / 2) + ', ' + startPoint + ')';
	    }).on('mousedown', function inner(d, i) {
	      var _this = this;

	      _d2.default.event.preventDefault();
	      var downCoords = _d2.default.mouse(model.container);

	      svg.on('mousemove', function (md, mi) {
	        var moveCoords = _d2.default.mouse(model.container);
	        var deltaYScreen = moveCoords[1] - downCoords[1];
	        var startPoint = d.screenRangeY[0] > d.screenRangeY[1] ? d.screenRangeY[1] : d.screenRangeY[0];
	        _d2.default.select(_this).attr('transform', 'translate(' + (d.screenX - model.selectionBarWidth / 2) + ', ' + (startPoint + deltaYScreen) + ')');
	      });

	      svg.on('mouseup', function (md, mi) {
	        var upCoords = _d2.default.mouse(model.container);
	        var deltaYScreen = upCoords[1] - downCoords[1];
	        var startPoint = d.screenRangeY[0] > d.screenRangeY[1] ? d.screenRangeY[1] : d.screenRangeY[0];
	        var barHeight = d.screenRangeY[1] - d.screenRangeY[0];
	        if (barHeight < 0) {
	          barHeight = d.screenRangeY[0] - d.screenRangeY[1];
	        }
	        var newStart = startPoint + deltaYScreen;
	        var newEnd = newStart + barHeight;
	        svg.on('mousemove', null);
	        svg.on('mouseup', null);

	        var axis = model.axes.getAxis(d.index);
	        model.axes.updateSelection(d.index, d.selectionIndex, screenToData(model, newStart, axis), screenToData(model, newEnd, axis));
	      });
	    });
	  }

	  function drawAxisControls(controlsDataModel) {
	    // Manipulate the control widgets svg DOM
	    var svg = _d2.default.select(model.container).select('svg').select('g.axis-control-elements');

	    var axisControlNodes = svg.selectAll('g.axis-control-elements').data(controlsDataModel);

	    axisControlNodes.enter().append('g').classed('axis-control-elements', true).classed(_ParallelCoordinates2.default.axisControlElements, true).html(_AxisControlSvg2.default);

	    axisControlNodes.exit().remove();

	    var scale = 0.5;
	    svg.selectAll('g.axis-control-elements').classed(_ParallelCoordinates2.default.upsideDown, function (d, i) {
	      return !d.orient;
	    }).classed(_ParallelCoordinates2.default.rightsideUp, function (d, i) {
	      return d.orient;
	    }).attr('transform', function inner(d, i) {
	      var elt = _d2.default.select(this).select('g.axis-controls-group-container');
	      var tx = d.centerX - elt.attr('width') * scale / 2;
	      var ty = d.centerY - elt.attr('height') * scale / 2;
	      return 'translate(' + tx + ', ' + ty + ') scale(' + scale + ')';
	    }).on('click', function inner(d, i) {
	      var cc = _d2.default.mouse(this);
	      var elt = _d2.default.select(this).select('g.axis-controls-group-container');
	      var ratio = cc[0] / elt.attr('width');
	      if (ratio < 0.28) {
	        // left arrow click
	        model.axes.swapAxes(i - 1, i);
	        fetchData();
	      } else if (ratio < 0.73) {
	        // up/down click
	        model.axes.toggleOrientation(i);
	        publicAPI.render();
	      } else {
	        // right arrow click
	        model.axes.swapAxes(i, i + 1);
	        fetchData();
	      }
	    }).selectAll('.axis-controls-group-container').classed(_ParallelCoordinates2.default.axisControlsGroupContainer, true);
	  }

	  function drawAxisLabels(labelDataModel) {
	    var ypos = 15;
	    var glyphRegion = 22;
	    var glyphPadding = 3;
	    var svg = _d2.default.select(model.container).select('svg');

	    if (model.provider && model.provider.isA('LegendProvider')) {
	      (function () {
	        // Add legend key
	        labelDataModel.forEach(function (entry) {
	          entry.legend = model.provider.getLegend(entry.name);
	        });
	        var glyphSize = glyphRegion - glyphPadding - glyphPadding;
	        if (glyphSize % 2 !== 0) {
	          glyphSize++;
	        }

	        var glyphGroup = svg.selectAll('g.glyphs').data(labelDataModel);

	        glyphGroup.exit().remove();

	        glyphGroup.enter().append('g').classed('glyphs', true);

	        // Create nested structure
	        var svgGroup = glyphGroup.selectAll('svg').data([0]);
	        svgGroup.enter().append('svg');
	        var useGroup = svgGroup.selectAll('use').data([0]);
	        useGroup.enter().append('use');

	        glyphGroup.attr('transform', function (d, i) {
	          return 'translate(' + (d.centerX - glyphSize * 0.5) + ', ' + glyphPadding + ')';
	        }).on('click', function (d, i) {
	          model.axes.clearSelection(i);
	        });

	        glyphGroup.each(function applyLegendStyle(d, i) {
	          _d2.default.select(this).select('svg').attr('fill', d.legend.color).attr('stroke', 'black').attr('width', glyphSize).attr('height', glyphSize).style('color', d.legend.color) // Firefox SVG use color bug workaround fix
	          .select('use').classed(_ParallelCoordinates2.default.colorToFill, true) // Firefox SVG use color bug workaround fix
	          .classed(_ParallelCoordinates2.default.blackStroke, true).attr('xlink:href', d.legend.shape);
	        });

	        // Augment the legend glyphs with extra DOM for annotated axes
	        var indicatorGroup = svg.select('g.axis-annotation-indicators');
	        var indicatorNodes = indicatorGroup.selectAll('rect.axis-annotation-indicators').data(labelDataModel);

	        indicatorNodes.enter().append('rect').classed('axis-annotation-indicators', true).classed(_ParallelCoordinates2.default.axisAnnotationIndicators, true);

	        indicatorNodes.exit().remove();

	        indicatorGroup.selectAll('rect.axis-annotation-indicators').attr('width', glyphSize + 3).attr('height', glyphSize + 3).attr('transform', function (d, i) {
	          return 'translate(' + (d.centerX - (glyphSize * 0.5 + 1)) + ', ' + (glyphPadding - 1.5) + ')';
	        }).classed(_ParallelCoordinates2.default.axisAnnotated, function (d, i) {
	          return d.annotated;
	        });
	      })();
	    } else {
	      // Now manage the svg dom for the axis labels
	      var axisLabelNodes = svg.selectAll('text.axis-labels').data(labelDataModel);

	      axisLabelNodes.enter().append('text').classed('axis-labels', true).classed(_ParallelCoordinates2.default.axisLabels, true);

	      axisLabelNodes.exit().remove();

	      svg.selectAll('text.axis-labels').text(function (d, i) {
	        return d.name;
	      }).classed(_ParallelCoordinates2.default.annotatedAxisText, function (d, i) {
	        return d.annotated;
	      }).on('click', function (d, i) {
	        model.axes.clearSelection(i);
	      }).attr('text-anchor', function (d, i) {
	        return d.align;
	      }).attr('transform', function (d, i) {
	        return 'translate(' + d.centerX + ', ' + ypos + ')';
	      });
	    }
	  }

	  function drawAxisTicks(tickDataModel) {
	    // Manage the svg dom for the axis ticks
	    var svg = _d2.default.select(model.container).select('svg');
	    var ticksGroup = svg.select('g.axis-ticks');
	    var axisTickNodes = ticksGroup.selectAll('text.axis-ticks').data(tickDataModel);

	    axisTickNodes.enter().append('text').classed('axis-ticks', true).classed(_ParallelCoordinates2.default.axisTicks, true);

	    axisTickNodes.exit().remove();

	    ticksGroup.selectAll('text.axis-ticks').text(function (d, i) {
	      return d.value;
	    }).attr('text-anchor', function (d, i) {
	      return d.align;
	    }).attr('transform', function (d, i) {
	      return 'translate(' + d.xpos + ', ' + d.ypos + ')';
	    });
	  }

	  function axisMouseDragHandler(data, index) {
	    var svg = _d2.default.select(model.container).select('svg');
	    var coords = _d2.default.mouse(model.container);
	    var pendingSelection = svg.select('rect.axis-selection-pending');
	    if (pendingSelection) {
	      var rectHeight = coords[1] - pendingSelection.attr('data-initial-y');
	      if (rectHeight >= 0) {
	        pendingSelection.attr('height', rectHeight);
	      } else {
	        pendingSelection.attr('transform', 'translate(' + pendingSelection.attr('data-initial-x') + ', ' + coords[1] + ')').attr('height', -rectHeight);
	      }
	    }
	  }

	  function drawAxes(axesCenters) {
	    if (axesCenters.length <= 1) {
	      // let's not do anything if we don't have enough axes for rendering.
	      return;
	    }

	    var svg = _d2.default.select(model.container).select('svg');
	    var axisLineGroup = svg.select('g.axis-lines');

	    // Now manage the svg dom
	    var axisLineNodes = axisLineGroup.selectAll('rect.axis-lines').data(axesCenters);

	    axisLineNodes.enter().append('rect').classed('axis-lines', true).classed(_ParallelCoordinates2.default.axisLines, true);

	    axisLineNodes.exit().remove();

	    axisLineGroup.selectAll('rect.axis-lines').classed(_ParallelCoordinates2.default.controlItem, true).attr('height', model.canvasArea.height - model.borderOffsetBottom - model.borderOffsetTop).attr('width', model.axisWidth).attr('transform', function (d, i) {
	      return 'translate(' + (d - model.axisWidth / 2) + ', ' + model.borderOffsetTop + ')';
	    }).on('mousedown', function (d, i) {
	      _d2.default.event.preventDefault();
	      var coords = _d2.default.mouse(model.container);
	      var initialY = coords[1];
	      var initialX = d - model.selectionBarWidth / 2;
	      var prect = svg.append('rect');
	      prect.classed('axis-selection-pending', true).classed(_ParallelCoordinates2.default.selectionBars, true).attr('height', 0.5).attr('width', model.selectionBarWidth).attr('transform', 'translate(' + initialX + ', ' + initialY + ')').attr('data-initial-x', initialX).attr('data-initial-y', initialY).attr('data-index', i);

	      svg.on('mousemove', axisMouseDragHandler);
	      svg.on('mouseup', function (data, index) {
	        var finalY = _d2.default.mouse(model.container)[1];
	        svg.select('rect.axis-selection-pending').remove();
	        svg.on('mousemove', null);
	        svg.on('mouseup', null);

	        var axis = model.axes.getAxis(i);
	        model.axes.addSelection(i, screenToData(model, initialY, axis), screenToData(model, finalY, axis));
	      });
	    });
	  }

	  function drawPolygons(axesCenters, gCtx, idxOne, idxTwo, histogram, colors) {
	    var axisOne = model.axes.getAxis(idxOne);
	    var axisTwo = model.axes.getAxis(idxTwo);
	    var deltaOne = histogram.x.delta;
	    var deltaTwo = histogram.y.delta;
	    var xleft = axesCenters[idxOne];
	    var xright = axesCenters[idxTwo];
	    var bin = null;
	    var opacity = 0.0;
	    var yleft1 = 0.0;
	    var yleft2 = 0.0;
	    var yright1 = 0.0;
	    var yright2 = 0.0;
	    var yLeftMin = 0;
	    var yLeftMax = 0;
	    var yRightMin = 0;
	    var yRightMax = 0;

	    for (var i = 0; i < histogram.bins.length; ++i) {
	      bin = histogram.bins[i];
	      opacity = affine(0, bin.count, model.maxBinCountForOpacityCalculation, 0.0, 1.0);
	      yleft1 = dataToScreen(model, bin.x, axisOne);
	      yleft2 = dataToScreen(model, bin.x + deltaOne, axisOne);
	      yright1 = dataToScreen(model, bin.y, axisTwo);
	      yright2 = dataToScreen(model, bin.y + deltaTwo, axisTwo);
	      yLeftMin = 0;
	      yLeftMax = 0;
	      yRightMin = 0;
	      yRightMax = 0;

	      if (yleft1 <= yleft2) {
	        yLeftMin = yleft1;
	        yLeftMax = yleft2;
	      } else {
	        yLeftMin = yleft2;
	        yLeftMax = yleft1;
	      }

	      if (yright1 <= yright2) {
	        yRightMin = yright1;
	        yRightMax = yright2;
	      } else {
	        yRightMin = yright2;
	        yRightMax = yright1;
	      }

	      gCtx.beginPath();
	      gCtx.moveTo(xleft, yLeftMin);
	      gCtx.lineTo(xleft, yLeftMax);
	      gCtx.lineTo(xright, yRightMax);
	      gCtx.lineTo(xright, yRightMin);
	      gCtx.closePath();
	      gCtx.fillStyle = 'rgba(' + colors[0] + ',' + colors[1] + ',' + colors[2] + ',' + opacity + ')';
	      gCtx.fill();
	    }
	  }

	  publicAPI.render = function () {
	    if (model.needData) {
	      fetchData();
	      return;
	    }

	    if (!model.axes.canRender() || model.container === null || model.containerHidden === true) {
	      _d2.default.select(model.container).select('svg.parallel-coords-overlay').classed(_ParallelCoordinates2.default.hidden, true);
	      _d2.default.select(model.container).select('canvas').classed(_ParallelCoordinates2.default.hidden, true);
	      _d2.default.select(model.container).select('div.parallel-coords-placeholder').classed(_ParallelCoordinates2.default.hidden, false);
	      return;
	    }

	    _d2.default.select(model.container).select('svg.parallel-coords-overlay').classed(_ParallelCoordinates2.default.hidden, false);
	    _d2.default.select(model.container).select('canvas').classed(_ParallelCoordinates2.default.hidden, false);
	    _d2.default.select(model.container).select('div.parallel-coords-placeholder').classed(_ParallelCoordinates2.default.hidden, true);

	    model.ctx.globalAlpha = 1.0;

	    // Update canvas area and drawable info
	    updateSizeInformation();

	    model.fgCanvas.width = model.canvas.width;
	    model.fgCanvas.height = model.canvas.height;
	    model.bgCanvas.width = model.canvas.width;
	    model.bgCanvas.height = model.canvas.height;

	    var svg = _d2.default.select(model.container).select('svg');
	    svg.attr('width', model.canvas.width).attr('height', model.canvas.height).classed('parallel-coords-overlay', true).classed(_ParallelCoordinates2.default.parallelCoordsOverlay, true);

	    if (_d2.default.select(model.container).selectAll('g').empty()) {
	      // Have not added groups yet, do so now.  Order matters.
	      svg.append('g').classed('axis-lines', true);
	      svg.append('g').classed('selection-bars', true);
	      svg.append('g').classed('hover-bins', true);
	      svg.append('g').classed('axis-annotation-indicators', true);
	      svg.append('g').classed('axis-control-elements', true);
	      svg.append('g').classed('axis-ticks', true);
	      svg.append('g').classed('glyphs', true);
	    }

	    model.ctx.clearRect(0, 0, model.canvasArea.width, model.canvasArea.height);
	    model.fgCtx.clearRect(0, 0, model.canvasArea.width, model.canvasArea.height);
	    model.bgCtx.clearRect(0, 0, model.canvasArea.width, model.canvasArea.height);

	    // First lay down the "context" polygons
	    model.maxBinCountForOpacityCalculation = model.provider.getMaxOfMaxCounts(model.axes.getAxesPairs());

	    var nbPolyDraw = model.axes.getNumberOf2DHistogram();
	    var axesCenters = model.axes.extractAxesCenters(model);
	    for (var j = 0; j < nbPolyDraw; ++j) {
	      drawPolygons(axesCenters, model.bgCtx, j, j + 1, model.provider.getHistogram2D(model.axes.getAxis(j).name, model.axes.getAxis(j + 1).name), model.polygonColors);
	    }

	    model.ctx.globalAlpha = model.polygonOpacityAdjustment;
	    model.ctx.drawImage(model.bgCanvas, 0, 0, model.canvasArea.width, model.canvasArea.height, 0, 0, model.canvasArea.width, model.canvasArea.height);

	    // If there is a selection, draw that (the "focus") on top of the polygons
	    if (model.axes.hasSelection() && model.provider.isA('SelectionProvider')) {
	      // Extract selection histogram2d
	      var polygonsQueue = [];
	      var missingData = false;
	      for (var k = 0; k < nbPolyDraw && !missingData; ++k) {
	        var histo = model.provider.getSelectionHistogram2D(model.axes.getAxis(k).name, model.axes.getAxis(k + 1).name);
	        missingData = histo ? histo.pending : true;
	        polygonsQueue.push([axesCenters, model.fgCtx, k, k + 1, histo, model.selectionColors]);
	      }

	      if (!missingData) {
	        model.maxBinCountForOpacityCalculation = model.provider.getSelectionMaxOfMaxCounts(model.axes.getAxesPairs());
	        polygonsQueue.forEach(function (req) {
	          return drawPolygons.apply(undefined, _toConsumableArray(req));
	        });
	        model.ctx.globalAlpha = model.selectionOpacityAdjustment;
	        model.ctx.drawImage(model.fgCanvas, 0, 0, model.canvasArea.width, model.canvasArea.height, 0, 0, model.canvasArea.width, model.canvasArea.height);
	      }
	    }

	    model.ctx.globalAlpha = 1.0;

	    // Now draw all the decorations and controls
	    drawAxisLabels(model.axes.extractLabels(model));
	    drawAxisTicks(model.axes.extractAxisTicks(model));
	    drawAxes(axesCenters);
	    drawSelectionBars(model.axes.extractSelections(model));
	    drawAxisControls(model.axes.extractAxesControl(model));
	  };

	  // -------------- Is needed? ----------------
	  // function fastRender() {
	  //   model.ctx.clearRect(0, 0, model.canvasArea.width, model.canvasArea.height);

	  //   model.ctx.globalAlpha = model.polygonOpacityAdjustment;
	  //   model.ctx.drawImage(model.bgCanvas,
	  //     0, 0, model.canvasArea.width, model.canvasArea.height,
	  //     0, 0, model.canvasArea.width, model.canvasArea.height);

	  //   model.ctx.globalAlpha = model.selectionOpacityAdjustment;
	  //   model.ctx.drawImage(model.fgCanvas,
	  //     0, 0, model.canvasArea.width, model.canvasArea.height,
	  //     0, 0, model.canvasArea.width, model.canvasArea.height);

	  //   model.ctx.globalAlpha = 1.0;

	  //   const axesCenters = model.axes.extractAxesCenters(model);

	  //   drawAxes(axesCenters);
	  //   drawSelectionBars(model.axes.extractSelections(model));
	  //   drawAxisLabels(model.axes.extractLabels(model));
	  //   drawAxisControls(model.axes.extractAxesControl(model));
	  // }

	  // function receivedHistogram(histIdx, histogram) {
	  //   histogramCount += 1;
	  //   histogramList[histIdx] = histogram;

	  //   if (histogram.y.delta === 0) {
	  //     histogram.y.delta = 1;
	  //     histogram.y.extent[1] = histogram.y.extent[0] + 1;
	  //   }

	  //   if (histogram.x.delta === 0) {
	  //     histogram.x.delta = 1;
	  //     histogram.x.extent[1] = histogram.x.extent[0] + 1;
	  //   }

	  //   axesDataRanges[histIdx] = histogram.y.extent.slice();

	  //   if (histIdx === axisList.length - 2) {
	  //     axesDataRanges[histIdx + 1] = histogram.x.extent.slice();
	  //   }

	  //   if (histogramCount === axisList.length - 1) { // We have received all histograms
	  //     maxBinCountOverAllHistograms = getMaxHistogramBinCount(histogramList);
	  //     render();
	  //   }
	  // }

	  // function retrieve2DHistogram(idx1, idx2) {
	  //   dataProvider.fetchHistogram2d(axisList[idx2], axisList[idx1], hist => {
	  //     receivedHistogram(idx1, hist);
	  //   }, numberOfBins);
	  // }

	  // function fetchHistograms() {
	  //   histogramList = [];
	  //   axesDataRanges = [];
	  //   histogramCount = 0;
	  //   maxBinCountOverAllHistograms = 0;

	  //   // Now fetch all the histograms
	  //   for (let k = 0; k < axisList.length - 1; ++k) {
	  //     retrieve2DHistogram(k, k + 1);
	  //   }
	  // }

	  // function fetchSelection() {
	  //   const histograms = [];

	  //   if (currentSelection !== null && dataProvider && dataProvider.querySelection) {
	  //     selectionResult = null;
	  //     maxBinCountOverAllSelections = 0;

	  //     for (let j = 0; j < axisList.length - 1; ++j) {
	  //       histograms.push([axisList[j + 1], axisList[j]]);
	  //     }
	  //     const query = {
	  //       ranges: currentSelection,
	  //       histograms,
	  //     };
	  //     dataProvider.querySelection(query, queryResult => {
	  //       maxBinCountOverAllSelections = getMaxHistogramBinCount(queryResult.counts[0]);
	  //       selectionResult = queryResult;
	  //       render();
	  //     });
	  //   }
	  // }

	  // function fetchData() {
	  //   fetchHistograms();
	  //   fetchSelection();
	  // }

	  publicAPI.resize = function () {
	    var clientRect = model.canvas.parentElement.getBoundingClientRect();
	    model.canvas.setAttribute('width', clientRect.width);
	    model.canvas.setAttribute('height', clientRect.height);
	    _d2.default.select(model.container).select('svg').selectAll('rect.hover-bin-indicator').remove();
	    if (clientRect.width !== 0 && clientRect.height !== 0) {
	      model.containerHidden = false;
	      publicAPI.render();
	    } else {
	      model.containerHidden = true;
	    }
	  };

	  publicAPI.setContainer = function (element) {
	    if (model.container) {
	      while (model.container.firstChild) {
	        model.container.removeChild(model.container.firstChild);
	      }
	      model.container = null;
	    }

	    model.container = element;

	    if (model.container !== null) {
	      model.container.innerHTML = _body2.default;
	      _d2.default.select(model.container).select('div.parallel-coords-placeholder').select('img').attr('src', _ParallelCoordsIconSmall2.default);
	      model.container.appendChild(model.canvas);
	      _d2.default.select(model.container).append('svg');
	      publicAPI.resize();
	    }
	  };

	  // function handleHoverBinUpdate(data) {
	  //   if (!model.axes.canRender() || model.containerHidden === true) {
	  //     // let's not do anything if we don't have enough axes for rendering.
	  //     return;
	  //   }

	  //   // First update our internal data model
	  //   model.hoverBinData = [];
	  //   Object.keys(data.state).forEach(pName => {
	  //     const binList = data.state[pName];
	  //     if (binList.indexOf(-1) === -1) {
	  //       for (let i = 0; i < binList.length; ++i) {
	  //         model.hoverBinData.push({
	  //           name: pName,
	  //           bin: binList[i],
	  //         });
	  //       }
	  //     }
	  //   });

	  //   // Now manage the svg dom
	  //   const hoverBinNodes = d3
	  //     .select(model.container)
	  //     .select('svg')
	  //     .select('g.hover-bins')
	  //     .selectAll('rect.hover-bin-indicator')
	  //     .data(model.hoverBinData);

	  //   hoverBinNodes
	  //     .enter()
	  //     .append('rect')
	  //     .classed('hover-bin-indicator', true);

	  //   hoverBinNodes.exit().remove();

	  //   const axesCenters = model.axes.extractAxesCenters(model);
	  //   d3.select(model.container)
	  //     .select('svg')
	  //     .select('g.hover-bins')
	  //     .selectAll('rect.hover-bin-indicator')
	  //     .attr('height', model.hoverIndicatorHeight)
	  //     .attr('width', model.hoverIndicatorWidth)
	  //     .attr('transform', (d, i) => {
	  //       const axis = model.axes.getAxisByName(d.name);
	  //       const screenOffset = binNumberToScreenOffset(d.bin, axis.isUpsideDown());
	  //       return `translate(${axesCenters[axis.idx] - (model.hoverIndicatorWidth / 2)}, ${screenOffset})`;
	  //     });
	  // }

	  // function handleSelectionChanged(sel) {
	  //   if (sel.type === 'range') {
	  //     const rangeMap = sel.ranges;
	  //     setSelection(rangeMap);
	  //     replaceAxisAnnotations(rangeMap);
	  //     fetchSelection();
	  //   } else if (sel.type === 'empty') {
	  //     clearSelection();
	  //   }
	  // }

	  // function addSubscriptions() {
	  //   topicSubscriptions.push(dataProvider.onParameterValueChanged(event => {
	  //     const aidx = axisList.indexOf(event.value.name);
	  //     if (aidx >= 0 && !event.value.selected) {
	  //       updateAxisList(axisList.slice(0, aidx).concat(axisList.slice(aidx + 1, axisList.length)));
	  //       render();
	  //     } else if (aidx === -1 && event.value.selected) {
	  //       updateAxisList(axisList.concat([
	  //         event.value.name,
	  //       ]));
	  //       if (annotationService) {
	  //         const rangeSel = selection('empty');
	  //         selnGen = rangeSel.gen;
	  //         annotationService.setActiveSelection(rangeSel);
	  //       }
	  //       render();
	  //     }
	  //   }));

	  //   if (annotationService) {
	  //     topicSubscriptions.push(annotationService.onSelectionChanged((data, envelope) => {
	  //       handleSelectionChanged(data);
	  //     }));
	  //     topicSubscriptions.push(annotationService.onCurrentHoverChanged((data, envelope) => {
	  //       handleHoverBinUpdate(data);
	  //     }));
	  //   }
	  // }

	  // Attach listener to provider
	  model.subscriptions.push({ unsubscribe: publicAPI.setContainer });
	  ['onHistogram2DReady', 'onSelectionHistogram2DReady'].forEach(function (method) {
	    if (model.provider[method]) {
	      model.subscriptions.push(model.provider[method](publicAPI.render));
	    }
	  });
	  ['onFieldChange'].forEach(function (method) {
	    if (model.provider[method]) {
	      model.subscriptions.push(model.provider[method](fetchData));
	    }
	  });

	  if (model.provider.isA('SelectionProvider')) {
	    model.subscriptions.push(model.axes.onSelectionChange(function () {
	      fetchSelectionData();
	      publicAPI.render();
	    }));
	    model.subscriptions.push(model.axes.onAxisListChange(function () {
	      fetchSelectionData();
	      publicAPI.render();
	    }));
	  } else {
	    model.subscriptions.push(model.axes.onSelectionChange(function () {
	      publicAPI.render();
	    }));
	  }

	  publicAPI.setContainer(model.container);
	  updateSizeInformation();
	}

	// ----------------------------------------------------------------------------
	// Object factory
	// ----------------------------------------------------------------------------

	var DEFAULT_VALUES = {
	  container: null,
	  provider: null,
	  needData: true,

	  containerHidden: false,

	  borderOffsetTop: 35,
	  borderOffsetRight: 12,
	  borderOffsetBottom: 45,
	  borderOffsetLeft: 12,

	  axisWidth: 6,
	  selectionBarWidth: 8,

	  polygonColors: [0, 0, 0],
	  selectionColors: [70, 130, 180],

	  maxBinCountForOpacityCalculation: 0,

	  selectionOpacityAdjustment: 1,
	  polygonOpacityAdjustment: 1
	};

	// ----------------------------------------------------------------------------

	function extend(publicAPI, model) {
	  var initialValues = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  Object.assign(model, DEFAULT_VALUES, initialValues);

	  _CompositeClosureHelper2.default.destroy(publicAPI, model);
	  _CompositeClosureHelper2.default.isA(publicAPI, model, 'VizComponent');
	  _CompositeClosureHelper2.default.get(publicAPI, model, ['provider', 'container']);

	  parallelCoordinate(publicAPI, model);
	}

	// ----------------------------------------------------------------------------

	var newInstance = exports.newInstance = _CompositeClosureHelper2.default.newInstance(extend);

	// ----------------------------------------------------------------------------

	exports.default = { newInstance: newInstance, extend: extend };

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.capitalize = capitalize;
	exports.isA = isA;
	exports.set = set;
	exports.get = get;
	exports.destroy = destroy;
	exports.event = event;
	exports.fetch = fetch;
	exports.newInstance = newInstance;
	// ----------------------------------------------------------------------------
	// capitilze provided string
	// ----------------------------------------------------------------------------

	function capitalize(str) {
	  return str.charAt(0).toUpperCase() + str.slice(1);
	}

	// ----------------------------------------------------------------------------
	// Add isA function and register your class name
	// ----------------------------------------------------------------------------

	function isA(publicAPI) {
	  var model = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	  var name = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	  if (!model.isA) {
	    model.isA = [];
	  }

	  if (name) {
	    model.isA.push(name);
	  }

	  if (!publicAPI.isA) {
	    publicAPI.isA = function (className) {
	      return model.isA.indexOf(className) !== -1;
	    };
	  }
	}

	// ----------------------------------------------------------------------------
	// Basic setter
	// ----------------------------------------------------------------------------

	function set(publicAPI) {
	  var model = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	  var names = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

	  names.forEach(function (name) {
	    publicAPI['set' + capitalize(name)] = function (value) {
	      model[name] = value;
	    };
	  });
	}

	// ----------------------------------------------------------------------------
	// Basic getter
	// ----------------------------------------------------------------------------

	function get(publicAPI) {
	  var model = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	  var names = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

	  names.forEach(function (name) {
	    publicAPI['get' + capitalize(name)] = function () {
	      return model[name];
	    };
	  });
	}

	// ----------------------------------------------------------------------------
	// Add destroy function
	// ----------------------------------------------------------------------------

	function destroy(publicAPI) {
	  var model = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  var previousDestroy = publicAPI.destroy;

	  if (!model.subscriptions) {
	    model.subscriptions = [];
	  }

	  publicAPI.destroy = function () {
	    if (previousDestroy) {
	      previousDestroy();
	    }
	    Object.keys(model).forEach(function (field) {
	      if (field === 'subscriptions') {
	        model[field].forEach(function (subscription) {
	          return subscription.unsubscribe();
	        });
	      }
	      delete model[field];
	    });

	    // Flag the instance beeing deleted
	    model.deleted = true;
	  };
	}

	// ----------------------------------------------------------------------------
	// Event handling: onXXX(callback), fireXXX(args...)
	// ----------------------------------------------------------------------------

	function event(publicAPI, model, eventName) {
	  var asynchrounous = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];

	  var callbacks = [];
	  var previousDestroy = publicAPI.destroy;

	  function off(index) {
	    callbacks[index] = null;
	  }

	  function on(index) {
	    function unsubscribe() {
	      off(index);
	    }
	    return Object.freeze({ unsubscribe: unsubscribe });
	  }

	  publicAPI['fire' + capitalize(eventName)] = function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    if (model.deleted) {
	      console.log('instance deleted - can not call any method');
	      return;
	    }

	    function processCallbacks() {
	      callbacks.forEach(function (callback) {
	        if (callback) {
	          try {
	            callback.apply(publicAPI, args);
	          } catch (errObj) {
	            console.log('Error event:', eventName, errObj);
	          }
	        }
	      });
	    }

	    if (asynchrounous) {
	      setImmediate(processCallbacks);
	    } else {
	      processCallbacks();
	    }
	  };

	  publicAPI['on' + capitalize(eventName)] = function (callback) {
	    if (model.deleted) {
	      console.log('instance deleted - can not call any method');
	      return null;
	    }

	    var index = callbacks.length;
	    callbacks.push(callback);
	    return on(index);
	  };

	  publicAPI.destroy = function () {
	    previousDestroy();
	    callbacks.forEach(function (el, index) {
	      return off(index);
	    });
	  };
	}

	// ----------------------------------------------------------------------------
	// Fetch handling: setXXXFetchCallback / return { addRequest }
	// ----------------------------------------------------------------------------
	function fetch(publicAPI, model, name) {
	  var fetchCallback = null;
	  var requestQueue = [];

	  publicAPI['set' + capitalize(name) + 'FetchCallback'] = function (fetchMethod) {
	    if (requestQueue.length) {
	      fetchMethod(requestQueue);
	    }
	    fetchCallback = fetchMethod;
	  };

	  return {
	    addRequest: function addRequest(request) {
	      requestQueue.push(request);
	      if (fetchCallback) {
	        fetchCallback(requestQueue);
	      }
	    },
	    clearRequests: function clearRequests() {
	      while (requestQueue.length) {
	        requestQueue.pop();
	      }
	    }
	  };
	}

	// ----------------------------------------------------------------------------
	// newInstance
	// ----------------------------------------------------------------------------

	function newInstance(extend) {
	  return function () {
	    var initialValues = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var model = {};
	    var publicAPI = {};
	    extend(publicAPI, model, initialValues);
	    return Object.freeze(publicAPI);
	  };
	}

	exports.default = {
	  newInstance: newInstance,
	  destroy: destroy,
	  fetch: fetch,
	  isA: isA,
	  event: event,
	  set: set,
	  get: get
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).setImmediate))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(8).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).setImmediate, __webpack_require__(7).clearImmediate))

/***/ },
/* 8 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	(function () {
	  try {
	    cachedSetTimeout = setTimeout;
	  } catch (e) {
	    cachedSetTimeout = function () {
	      throw new Error('setTimeout is not defined');
	    }
	  }
	  try {
	    cachedClearTimeout = clearTimeout;
	  } catch (e) {
	    cachedClearTimeout = function () {
	      throw new Error('clearTimeout is not defined');
	    }
	  }
	} ())
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = cachedSetTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    cachedClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        cachedSetTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {
	  var d3 = {
	    version: "3.5.17"
	  };
	  var d3_arraySlice = [].slice, d3_array = function(list) {
	    return d3_arraySlice.call(list);
	  };
	  var d3_document = this.document;
	  function d3_documentElement(node) {
	    return node && (node.ownerDocument || node.document || node).documentElement;
	  }
	  function d3_window(node) {
	    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
	  }
	  if (d3_document) {
	    try {
	      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
	    } catch (e) {
	      d3_array = function(list) {
	        var i = list.length, array = new Array(i);
	        while (i--) array[i] = list[i];
	        return array;
	      };
	    }
	  }
	  if (!Date.now) Date.now = function() {
	    return +new Date();
	  };
	  if (d3_document) {
	    try {
	      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
	    } catch (error) {
	      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
	      d3_element_prototype.setAttribute = function(name, value) {
	        d3_element_setAttribute.call(this, name, value + "");
	      };
	      d3_element_prototype.setAttributeNS = function(space, local, value) {
	        d3_element_setAttributeNS.call(this, space, local, value + "");
	      };
	      d3_style_prototype.setProperty = function(name, value, priority) {
	        d3_style_setProperty.call(this, name, value + "", priority);
	      };
	    }
	  }
	  d3.ascending = d3_ascending;
	  function d3_ascending(a, b) {
	    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	  }
	  d3.descending = function(a, b) {
	    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	  };
	  d3.min = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
	    }
	    return a;
	  };
	  d3.max = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
	    }
	    return a;
	  };
	  d3.extent = function(array, f) {
	    var i = -1, n = array.length, a, b, c;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    }
	    return [ a, c ];
	  };
	  function d3_number(x) {
	    return x === null ? NaN : +x;
	  }
	  function d3_numeric(x) {
	    return !isNaN(x);
	  }
	  d3.sum = function(array, f) {
	    var s = 0, n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
	    } else {
	      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
	    }
	    return s;
	  };
	  d3.mean = function(array, f) {
	    var s = 0, n = array.length, a, i = -1, j = n;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
	    }
	    if (j) return s / j;
	  };
	  d3.quantile = function(values, p) {
	    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
	    return e ? v + e * (values[h] - v) : v;
	  };
	  d3.median = function(array, f) {
	    var numbers = [], n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
	    }
	    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
	  };
	  d3.variance = function(array, f) {
	    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
	    if (arguments.length === 1) {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(array[i]))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    } else {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    }
	    if (j > 1) return s / (j - 1);
	  };
	  d3.deviation = function() {
	    var v = d3.variance.apply(this, arguments);
	    return v ? Math.sqrt(v) : v;
	  };
	  function d3_bisector(compare) {
	    return {
	      left: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
	        }
	        return lo;
	      },
	      right: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
	        }
	        return lo;
	      }
	    };
	  }
	  var d3_bisect = d3_bisector(d3_ascending);
	  d3.bisectLeft = d3_bisect.left;
	  d3.bisect = d3.bisectRight = d3_bisect.right;
	  d3.bisector = function(f) {
	    return d3_bisector(f.length === 1 ? function(d, x) {
	      return d3_ascending(f(d), x);
	    } : f);
	  };
	  d3.shuffle = function(array, i0, i1) {
	    if ((m = arguments.length) < 3) {
	      i1 = array.length;
	      if (m < 2) i0 = 0;
	    }
	    var m = i1 - i0, t, i;
	    while (m) {
	      i = Math.random() * m-- | 0;
	      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
	    }
	    return array;
	  };
	  d3.permute = function(array, indexes) {
	    var i = indexes.length, permutes = new Array(i);
	    while (i--) permutes[i] = array[indexes[i]];
	    return permutes;
	  };
	  d3.pairs = function(array) {
	    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
	    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
	    return pairs;
	  };
	  d3.transpose = function(matrix) {
	    if (!(n = matrix.length)) return [];
	    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
	      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
	        row[j] = matrix[j][i];
	      }
	    }
	    return transpose;
	  };
	  function d3_transposeLength(d) {
	    return d.length;
	  }
	  d3.zip = function() {
	    return d3.transpose(arguments);
	  };
	  d3.keys = function(map) {
	    var keys = [];
	    for (var key in map) keys.push(key);
	    return keys;
	  };
	  d3.values = function(map) {
	    var values = [];
	    for (var key in map) values.push(map[key]);
	    return values;
	  };
	  d3.entries = function(map) {
	    var entries = [];
	    for (var key in map) entries.push({
	      key: key,
	      value: map[key]
	    });
	    return entries;
	  };
	  d3.merge = function(arrays) {
	    var n = arrays.length, m, i = -1, j = 0, merged, array;
	    while (++i < n) j += arrays[i].length;
	    merged = new Array(j);
	    while (--n >= 0) {
	      array = arrays[n];
	      m = array.length;
	      while (--m >= 0) {
	        merged[--j] = array[m];
	      }
	    }
	    return merged;
	  };
	  var abs = Math.abs;
	  d3.range = function(start, stop, step) {
	    if (arguments.length < 3) {
	      step = 1;
	      if (arguments.length < 2) {
	        stop = start;
	        start = 0;
	      }
	    }
	    if ((stop - start) / step === Infinity) throw new Error("infinite range");
	    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
	    start *= k, stop *= k, step *= k;
	    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
	    return range;
	  };
	  function d3_range_integerScale(x) {
	    var k = 1;
	    while (x * k % 1) k *= 10;
	    return k;
	  }
	  function d3_class(ctor, properties) {
	    for (var key in properties) {
	      Object.defineProperty(ctor.prototype, key, {
	        value: properties[key],
	        enumerable: false
	      });
	    }
	  }
	  d3.map = function(object, f) {
	    var map = new d3_Map();
	    if (object instanceof d3_Map) {
	      object.forEach(function(key, value) {
	        map.set(key, value);
	      });
	    } else if (Array.isArray(object)) {
	      var i = -1, n = object.length, o;
	      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
	    } else {
	      for (var key in object) map.set(key, object[key]);
	    }
	    return map;
	  };
	  function d3_Map() {
	    this._ = Object.create(null);
	  }
	  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
	  d3_class(d3_Map, {
	    has: d3_map_has,
	    get: function(key) {
	      return this._[d3_map_escape(key)];
	    },
	    set: function(key, value) {
	      return this._[d3_map_escape(key)] = value;
	    },
	    remove: d3_map_remove,
	    keys: d3_map_keys,
	    values: function() {
	      var values = [];
	      for (var key in this._) values.push(this._[key]);
	      return values;
	    },
	    entries: function() {
	      var entries = [];
	      for (var key in this._) entries.push({
	        key: d3_map_unescape(key),
	        value: this._[key]
	      });
	      return entries;
	    },
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
	    }
	  });
	  function d3_map_escape(key) {
	    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
	  }
	  function d3_map_unescape(key) {
	    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
	  }
	  function d3_map_has(key) {
	    return d3_map_escape(key) in this._;
	  }
	  function d3_map_remove(key) {
	    return (key = d3_map_escape(key)) in this._ && delete this._[key];
	  }
	  function d3_map_keys() {
	    var keys = [];
	    for (var key in this._) keys.push(d3_map_unescape(key));
	    return keys;
	  }
	  function d3_map_size() {
	    var size = 0;
	    for (var key in this._) ++size;
	    return size;
	  }
	  function d3_map_empty() {
	    for (var key in this._) return false;
	    return true;
	  }
	  d3.nest = function() {
	    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
	    function map(mapType, array, depth) {
	      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
	      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
	      while (++i < n) {
	        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
	          values.push(object);
	        } else {
	          valuesByKey.set(keyValue, [ object ]);
	        }
	      }
	      if (mapType) {
	        object = mapType();
	        setter = function(keyValue, values) {
	          object.set(keyValue, map(mapType, values, depth));
	        };
	      } else {
	        object = {};
	        setter = function(keyValue, values) {
	          object[keyValue] = map(mapType, values, depth);
	        };
	      }
	      valuesByKey.forEach(setter);
	      return object;
	    }
	    function entries(map, depth) {
	      if (depth >= keys.length) return map;
	      var array = [], sortKey = sortKeys[depth++];
	      map.forEach(function(key, keyMap) {
	        array.push({
	          key: key,
	          values: entries(keyMap, depth)
	        });
	      });
	      return sortKey ? array.sort(function(a, b) {
	        return sortKey(a.key, b.key);
	      }) : array;
	    }
	    nest.map = function(array, mapType) {
	      return map(mapType, array, 0);
	    };
	    nest.entries = function(array) {
	      return entries(map(d3.map, array, 0), 0);
	    };
	    nest.key = function(d) {
	      keys.push(d);
	      return nest;
	    };
	    nest.sortKeys = function(order) {
	      sortKeys[keys.length - 1] = order;
	      return nest;
	    };
	    nest.sortValues = function(order) {
	      sortValues = order;
	      return nest;
	    };
	    nest.rollup = function(f) {
	      rollup = f;
	      return nest;
	    };
	    return nest;
	  };
	  d3.set = function(array) {
	    var set = new d3_Set();
	    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
	    return set;
	  };
	  function d3_Set() {
	    this._ = Object.create(null);
	  }
	  d3_class(d3_Set, {
	    has: d3_map_has,
	    add: function(key) {
	      this._[d3_map_escape(key += "")] = true;
	      return key;
	    },
	    remove: d3_map_remove,
	    values: d3_map_keys,
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key));
	    }
	  });
	  d3.behavior = {};
	  function d3_identity(d) {
	    return d;
	  }
	  d3.rebind = function(target, source) {
	    var i = 1, n = arguments.length, method;
	    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
	    return target;
	  };
	  function d3_rebind(target, source, method) {
	    return function() {
	      var value = method.apply(source, arguments);
	      return value === source ? target : value;
	    };
	  }
	  function d3_vendorSymbol(object, name) {
	    if (name in object) return name;
	    name = name.charAt(0).toUpperCase() + name.slice(1);
	    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
	      var prefixName = d3_vendorPrefixes[i] + name;
	      if (prefixName in object) return prefixName;
	    }
	  }
	  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
	  function d3_noop() {}
	  d3.dispatch = function() {
	    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    return dispatch;
	  };
	  function d3_dispatch() {}
	  d3_dispatch.prototype.on = function(type, listener) {
	    var i = type.indexOf("."), name = "";
	    if (i >= 0) {
	      name = type.slice(i + 1);
	      type = type.slice(0, i);
	    }
	    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
	    if (arguments.length === 2) {
	      if (listener == null) for (type in this) {
	        if (this.hasOwnProperty(type)) this[type].on(name, null);
	      }
	      return this;
	    }
	  };
	  function d3_dispatch_event(dispatch) {
	    var listeners = [], listenerByName = new d3_Map();
	    function event() {
	      var z = listeners, i = -1, n = z.length, l;
	      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
	      return dispatch;
	    }
	    event.on = function(name, listener) {
	      var l = listenerByName.get(name), i;
	      if (arguments.length < 2) return l && l.on;
	      if (l) {
	        l.on = null;
	        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
	        listenerByName.remove(name);
	      }
	      if (listener) listeners.push(listenerByName.set(name, {
	        on: listener
	      }));
	      return dispatch;
	    };
	    return event;
	  }
	  d3.event = null;
	  function d3_eventPreventDefault() {
	    d3.event.preventDefault();
	  }
	  function d3_eventSource() {
	    var e = d3.event, s;
	    while (s = e.sourceEvent) e = s;
	    return e;
	  }
	  function d3_eventDispatch(target) {
	    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    dispatch.of = function(thiz, argumentz) {
	      return function(e1) {
	        try {
	          var e0 = e1.sourceEvent = d3.event;
	          e1.target = target;
	          d3.event = e1;
	          dispatch[e1.type].apply(thiz, argumentz);
	        } finally {
	          d3.event = e0;
	        }
	      };
	    };
	    return dispatch;
	  }
	  d3.requote = function(s) {
	    return s.replace(d3_requote_re, "\\$&");
	  };
	  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
	  var d3_subclass = {}.__proto__ ? function(object, prototype) {
	    object.__proto__ = prototype;
	  } : function(object, prototype) {
	    for (var property in prototype) object[property] = prototype[property];
	  };
	  function d3_selection(groups) {
	    d3_subclass(groups, d3_selectionPrototype);
	    return groups;
	  }
	  var d3_select = function(s, n) {
	    return n.querySelector(s);
	  }, d3_selectAll = function(s, n) {
	    return n.querySelectorAll(s);
	  }, d3_selectMatches = function(n, s) {
	    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
	    d3_selectMatches = function(n, s) {
	      return d3_selectMatcher.call(n, s);
	    };
	    return d3_selectMatches(n, s);
	  };
	  if (typeof Sizzle === "function") {
	    d3_select = function(s, n) {
	      return Sizzle(s, n)[0] || null;
	    };
	    d3_selectAll = Sizzle;
	    d3_selectMatches = Sizzle.matchesSelector;
	  }
	  d3.selection = function() {
	    return d3.select(d3_document.documentElement);
	  };
	  var d3_selectionPrototype = d3.selection.prototype = [];
	  d3_selectionPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, group, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
	          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selector(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_select(selector, this);
	    };
	  }
	  d3_selectionPrototype.selectAll = function(selector) {
	    var subgroups = [], subgroup, node;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
	          subgroup.parentNode = node;
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selectorAll(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_selectAll(selector, this);
	    };
	  }
	  var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
	  var d3_nsPrefix = {
	    svg: "http://www.w3.org/2000/svg",
	    xhtml: d3_nsXhtml,
	    xlink: "http://www.w3.org/1999/xlink",
	    xml: "http://www.w3.org/XML/1998/namespace",
	    xmlns: "http://www.w3.org/2000/xmlns/"
	  };
	  d3.ns = {
	    prefix: d3_nsPrefix,
	    qualify: function(name) {
	      var i = name.indexOf(":"), prefix = name;
	      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	      return d3_nsPrefix.hasOwnProperty(prefix) ? {
	        space: d3_nsPrefix[prefix],
	        local: name
	      } : name;
	    }
	  };
	  d3_selectionPrototype.attr = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node();
	        name = d3.ns.qualify(name);
	        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
	      }
	      for (value in name) this.each(d3_selection_attr(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_attr(name, value));
	  };
	  function d3_selection_attr(name, value) {
	    name = d3.ns.qualify(name);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrConstant() {
	      this.setAttribute(name, value);
	    }
	    function attrConstantNS() {
	      this.setAttributeNS(name.space, name.local, value);
	    }
	    function attrFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
	    }
	    function attrFunctionNS() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
	    }
	    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
	  }
	  function d3_collapse(s) {
	    return s.trim().replace(/\s+/g, " ");
	  }
	  d3_selectionPrototype.classed = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
	        if (value = node.classList) {
	          while (++i < n) if (!value.contains(name[i])) return false;
	        } else {
	          value = node.getAttribute("class");
	          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
	        }
	        return true;
	      }
	      for (value in name) this.each(d3_selection_classed(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_classed(name, value));
	  };
	  function d3_selection_classedRe(name) {
	    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
	  }
	  function d3_selection_classes(name) {
	    return (name + "").trim().split(/^|\s+/);
	  }
	  function d3_selection_classed(name, value) {
	    name = d3_selection_classes(name).map(d3_selection_classedName);
	    var n = name.length;
	    function classedConstant() {
	      var i = -1;
	      while (++i < n) name[i](this, value);
	    }
	    function classedFunction() {
	      var i = -1, x = value.apply(this, arguments);
	      while (++i < n) name[i](this, x);
	    }
	    return typeof value === "function" ? classedFunction : classedConstant;
	  }
	  function d3_selection_classedName(name) {
	    var re = d3_selection_classedRe(name);
	    return function(node, value) {
	      if (c = node.classList) return value ? c.add(name) : c.remove(name);
	      var c = node.getAttribute("class") || "";
	      if (value) {
	        re.lastIndex = 0;
	        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
	      } else {
	        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
	      }
	    };
	  }
	  d3_selectionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
	        return this;
	      }
	      if (n < 2) {
	        var node = this.node();
	        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
	      }
	      priority = "";
	    }
	    return this.each(d3_selection_style(name, value, priority));
	  };
	  function d3_selection_style(name, value, priority) {
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleConstant() {
	      this.style.setProperty(name, value, priority);
	    }
	    function styleFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
	    }
	    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
	  }
	  d3_selectionPrototype.property = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") return this.node()[name];
	      for (value in name) this.each(d3_selection_property(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_property(name, value));
	  };
	  function d3_selection_property(name, value) {
	    function propertyNull() {
	      delete this[name];
	    }
	    function propertyConstant() {
	      this[name] = value;
	    }
	    function propertyFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) delete this[name]; else this[name] = x;
	    }
	    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
	  }
	  d3_selectionPrototype.text = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.textContent = v == null ? "" : v;
	    } : value == null ? function() {
	      this.textContent = "";
	    } : function() {
	      this.textContent = value;
	    }) : this.node().textContent;
	  };
	  d3_selectionPrototype.html = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.innerHTML = v == null ? "" : v;
	    } : value == null ? function() {
	      this.innerHTML = "";
	    } : function() {
	      this.innerHTML = value;
	    }) : this.node().innerHTML;
	  };
	  d3_selectionPrototype.append = function(name) {
	    name = d3_selection_creator(name);
	    return this.select(function() {
	      return this.appendChild(name.apply(this, arguments));
	    });
	  };
	  function d3_selection_creator(name) {
	    function create() {
	      var document = this.ownerDocument, namespace = this.namespaceURI;
	      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
	    }
	    function createNS() {
	      return this.ownerDocument.createElementNS(name.space, name.local);
	    }
	    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
	  }
	  d3_selectionPrototype.insert = function(name, before) {
	    name = d3_selection_creator(name);
	    before = d3_selection_selector(before);
	    return this.select(function() {
	      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
	    });
	  };
	  d3_selectionPrototype.remove = function() {
	    return this.each(d3_selectionRemove);
	  };
	  function d3_selectionRemove() {
	    var parent = this.parentNode;
	    if (parent) parent.removeChild(this);
	  }
	  d3_selectionPrototype.data = function(value, key) {
	    var i = -1, n = this.length, group, node;
	    if (!arguments.length) {
	      value = new Array(n = (group = this[0]).length);
	      while (++i < n) {
	        if (node = group[i]) {
	          value[i] = node.__data__;
	        }
	      }
	      return value;
	    }
	    function bind(group, groupData) {
	      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
	      if (key) {
	        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
	        for (i = -1; ++i < n; ) {
	          if (node = group[i]) {
	            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
	              exitNodes[i] = node;
	            } else {
	              nodeByKeyValue.set(keyValue, node);
	            }
	            keyValues[i] = keyValue;
	          }
	        }
	        for (i = -1; ++i < m; ) {
	          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          } else if (node !== true) {
	            updateNodes[i] = node;
	            node.__data__ = nodeData;
	          }
	          nodeByKeyValue.set(keyValue, true);
	        }
	        for (i = -1; ++i < n; ) {
	          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
	            exitNodes[i] = group[i];
	          }
	        }
	      } else {
	        for (i = -1; ++i < n0; ) {
	          node = group[i];
	          nodeData = groupData[i];
	          if (node) {
	            node.__data__ = nodeData;
	            updateNodes[i] = node;
	          } else {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          }
	        }
	        for (;i < m; ++i) {
	          enterNodes[i] = d3_selection_dataNode(groupData[i]);
	        }
	        for (;i < n; ++i) {
	          exitNodes[i] = group[i];
	        }
	      }
	      enterNodes.update = updateNodes;
	      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
	      enter.push(enterNodes);
	      update.push(updateNodes);
	      exit.push(exitNodes);
	    }
	    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
	    if (typeof value === "function") {
	      while (++i < n) {
	        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
	      }
	    } else {
	      while (++i < n) {
	        bind(group = this[i], value);
	      }
	    }
	    update.enter = function() {
	      return enter;
	    };
	    update.exit = function() {
	      return exit;
	    };
	    return update;
	  };
	  function d3_selection_dataNode(data) {
	    return {
	      __data__: data
	    };
	  }
	  d3_selectionPrototype.datum = function(value) {
	    return arguments.length ? this.property("__data__", value) : this.property("__data__");
	  };
	  d3_selectionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_filter(selector) {
	    return function() {
	      return d3_selectMatches(this, selector);
	    };
	  }
	  d3_selectionPrototype.order = function() {
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
	        if (node = group[i]) {
	          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	          next = node;
	        }
	      }
	    }
	    return this;
	  };
	  d3_selectionPrototype.sort = function(comparator) {
	    comparator = d3_selection_sortComparator.apply(this, arguments);
	    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
	    return this.order();
	  };
	  function d3_selection_sortComparator(comparator) {
	    if (!arguments.length) comparator = d3_ascending;
	    return function(a, b) {
	      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
	    };
	  }
	  d3_selectionPrototype.each = function(callback) {
	    return d3_selection_each(this, function(node, i, j) {
	      callback.call(node, node.__data__, i, j);
	    });
	  };
	  function d3_selection_each(groups, callback) {
	    for (var j = 0, m = groups.length; j < m; j++) {
	      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
	        if (node = group[i]) callback(node, i, j);
	      }
	    }
	    return groups;
	  }
	  d3_selectionPrototype.call = function(callback) {
	    var args = d3_array(arguments);
	    callback.apply(args[0] = this, args);
	    return this;
	  };
	  d3_selectionPrototype.empty = function() {
	    return !this.node();
	  };
	  d3_selectionPrototype.node = function() {
	    for (var j = 0, m = this.length; j < m; j++) {
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        var node = group[i];
	        if (node) return node;
	      }
	    }
	    return null;
	  };
	  d3_selectionPrototype.size = function() {
	    var n = 0;
	    d3_selection_each(this, function() {
	      ++n;
	    });
	    return n;
	  };
	  function d3_selection_enter(selection) {
	    d3_subclass(selection, d3_selection_enterPrototype);
	    return selection;
	  }
	  var d3_selection_enterPrototype = [];
	  d3.selection.enter = d3_selection_enter;
	  d3.selection.enter.prototype = d3_selection_enterPrototype;
	  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
	  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
	  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
	  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
	  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
	  d3_selection_enterPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, upgroup, group, node;
	    for (var j = -1, m = this.length; ++j < m; ) {
	      upgroup = (group = this[j]).update;
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = group.parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
	          subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  d3_selection_enterPrototype.insert = function(name, before) {
	    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
	    return d3_selectionPrototype.insert.call(this, name, before);
	  };
	  function d3_selection_enterInsertBefore(enter) {
	    var i0, j0;
	    return function(d, i, j) {
	      var group = enter[j].update, n = group.length, node;
	      if (j != j0) j0 = j, i0 = 0;
	      if (i >= i0) i0 = i + 1;
	      while (!(node = group[i0]) && ++i0 < n) ;
	      return node;
	    };
	  }
	  d3.select = function(node) {
	    var group;
	    if (typeof node === "string") {
	      group = [ d3_select(node, d3_document) ];
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = [ node ];
	      group.parentNode = d3_documentElement(node);
	    }
	    return d3_selection([ group ]);
	  };
	  d3.selectAll = function(nodes) {
	    var group;
	    if (typeof nodes === "string") {
	      group = d3_array(d3_selectAll(nodes, d3_document));
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = d3_array(nodes);
	      group.parentNode = null;
	    }
	    return d3_selection([ group ]);
	  };
	  d3_selectionPrototype.on = function(type, listener, capture) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof type !== "string") {
	        if (n < 2) listener = false;
	        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
	        return this;
	      }
	      if (n < 2) return (n = this.node()["__on" + type]) && n._;
	      capture = false;
	    }
	    return this.each(d3_selection_on(type, listener, capture));
	  };
	  function d3_selection_on(type, listener, capture) {
	    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
	    if (i > 0) type = type.slice(0, i);
	    var filter = d3_selection_onFilters.get(type);
	    if (filter) type = filter, wrap = d3_selection_onFilter;
	    function onRemove() {
	      var l = this[name];
	      if (l) {
	        this.removeEventListener(type, l, l.$);
	        delete this[name];
	      }
	    }
	    function onAdd() {
	      var l = wrap(listener, d3_array(arguments));
	      onRemove.call(this);
	      this.addEventListener(type, this[name] = l, l.$ = capture);
	      l._ = listener;
	    }
	    function removeAll() {
	      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
	      for (var name in this) {
	        if (match = name.match(re)) {
	          var l = this[name];
	          this.removeEventListener(match[1], l, l.$);
	          delete this[name];
	        }
	      }
	    }
	    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
	  }
	  var d3_selection_onFilters = d3.map({
	    mouseenter: "mouseover",
	    mouseleave: "mouseout"
	  });
	  if (d3_document) {
	    d3_selection_onFilters.forEach(function(k) {
	      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
	    });
	  }
	  function d3_selection_onListener(listener, argumentz) {
	    return function(e) {
	      var o = d3.event;
	      d3.event = e;
	      argumentz[0] = this.__data__;
	      try {
	        listener.apply(this, argumentz);
	      } finally {
	        d3.event = o;
	      }
	    };
	  }
	  function d3_selection_onFilter(listener, argumentz) {
	    var l = d3_selection_onListener(listener, argumentz);
	    return function(e) {
	      var target = this, related = e.relatedTarget;
	      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
	        l.call(target, e);
	      }
	    };
	  }
	  var d3_event_dragSelect, d3_event_dragId = 0;
	  function d3_event_dragSuppress(node) {
	    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
	    if (d3_event_dragSelect == null) {
	      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
	    }
	    if (d3_event_dragSelect) {
	      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
	      style[d3_event_dragSelect] = "none";
	    }
	    return function(suppressClick) {
	      w.on(name, null);
	      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
	      if (suppressClick) {
	        var off = function() {
	          w.on(click, null);
	        };
	        w.on(click, function() {
	          d3_eventPreventDefault();
	          off();
	        }, true);
	        setTimeout(off, 0);
	      }
	    };
	  }
	  d3.mouse = function(container) {
	    return d3_mousePoint(container, d3_eventSource());
	  };
	  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
	  function d3_mousePoint(container, e) {
	    if (e.changedTouches) e = e.changedTouches[0];
	    var svg = container.ownerSVGElement || container;
	    if (svg.createSVGPoint) {
	      var point = svg.createSVGPoint();
	      if (d3_mouse_bug44083 < 0) {
	        var window = d3_window(container);
	        if (window.scrollX || window.scrollY) {
	          svg = d3.select("body").append("svg").style({
	            position: "absolute",
	            top: 0,
	            left: 0,
	            margin: 0,
	            padding: 0,
	            border: "none"
	          }, "important");
	          var ctm = svg[0][0].getScreenCTM();
	          d3_mouse_bug44083 = !(ctm.f || ctm.e);
	          svg.remove();
	        }
	      }
	      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
	      point.y = e.clientY;
	      point = point.matrixTransform(container.getScreenCTM().inverse());
	      return [ point.x, point.y ];
	    }
	    var rect = container.getBoundingClientRect();
	    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
	  }
	  d3.touch = function(container, touches, identifier) {
	    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
	    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
	      if ((touch = touches[i]).identifier === identifier) {
	        return d3_mousePoint(container, touch);
	      }
	    }
	  };
	  d3.behavior.drag = function() {
	    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
	    function drag() {
	      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
	    }
	    function dragstart(id, position, subject, move, end) {
	      return function() {
	        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
	        if (origin) {
	          dragOffset = origin.apply(that, arguments);
	          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
	        } else {
	          dragOffset = [ 0, 0 ];
	        }
	        dispatch({
	          type: "dragstart"
	        });
	        function moved() {
	          var position1 = position(parent, dragId), dx, dy;
	          if (!position1) return;
	          dx = position1[0] - position0[0];
	          dy = position1[1] - position0[1];
	          dragged |= dx | dy;
	          position0 = position1;
	          dispatch({
	            type: "drag",
	            x: position1[0] + dragOffset[0],
	            y: position1[1] + dragOffset[1],
	            dx: dx,
	            dy: dy
	          });
	        }
	        function ended() {
	          if (!position(parent, dragId)) return;
	          dragSubject.on(move + dragName, null).on(end + dragName, null);
	          dragRestore(dragged);
	          dispatch({
	            type: "dragend"
	          });
	        }
	      };
	    }
	    drag.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return drag;
	    };
	    return d3.rebind(drag, event, "on");
	  };
	  function d3_behavior_dragTouchId() {
	    return d3.event.changedTouches[0].identifier;
	  }
	  d3.touches = function(container, touches) {
	    if (arguments.length < 2) touches = d3_eventSource().touches;
	    return touches ? d3_array(touches).map(function(touch) {
	      var point = d3_mousePoint(container, touch);
	      point.identifier = touch.identifier;
	      return point;
	    }) : [];
	  };
	  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
	  function d3_sgn(x) {
	    return x > 0 ? 1 : x < 0 ? -1 : 0;
	  }
	  function d3_cross2d(a, b, c) {
	    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	  }
	  function d3_acos(x) {
	    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
	  }
	  function d3_asin(x) {
	    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
	  }
	  function d3_sinh(x) {
	    return ((x = Math.exp(x)) - 1 / x) / 2;
	  }
	  function d3_cosh(x) {
	    return ((x = Math.exp(x)) + 1 / x) / 2;
	  }
	  function d3_tanh(x) {
	    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	  }
	  function d3_haversin(x) {
	    return (x = Math.sin(x / 2)) * x;
	  }
	  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
	  d3.interpolateZoom = function(p0, p1) {
	    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
	    if (d2 < ε2) {
	      S = Math.log(w1 / w0) / ρ;
	      i = function(t) {
	        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
	      };
	    } else {
	      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	      S = (r1 - r0) / ρ;
	      i = function(t) {
	        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
	        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
	      };
	    }
	    i.duration = S * 1e3;
	    return i;
	  };
	  d3.behavior.zoom = function() {
	    var view = {
	      x: 0,
	      y: 0,
	      k: 1
	    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
	    if (!d3_behavior_zoomWheel) {
	      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
	      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	        return d3.event.wheelDelta;
	      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
	        return -d3.event.detail;
	      }, "MozMousePixelScroll");
	    }
	    function zoom(g) {
	      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
	    }
	    zoom.event = function(g) {
	      g.each(function() {
	        var dispatch = event.of(this, arguments), view1 = view;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.zoom", function() {
	            view = this.__chart__ || {
	              x: 0,
	              y: 0,
	              k: 1
	            };
	            zoomstarted(dispatch);
	          }).tween("zoom:zoom", function() {
	            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
	            return function(t) {
	              var l = i(t), k = dx / l[2];
	              this.__chart__ = view = {
	                x: cx - l[0] * k,
	                y: cy - l[1] * k,
	                k: k
	              };
	              zoomed(dispatch);
	            };
	          }).each("interrupt.zoom", function() {
	            zoomended(dispatch);
	          }).each("end.zoom", function() {
	            zoomended(dispatch);
	          });
	        } else {
	          this.__chart__ = view;
	          zoomstarted(dispatch);
	          zoomed(dispatch);
	          zoomended(dispatch);
	        }
	      });
	    };
	    zoom.translate = function(_) {
	      if (!arguments.length) return [ view.x, view.y ];
	      view = {
	        x: +_[0],
	        y: +_[1],
	        k: view.k
	      };
	      rescale();
	      return zoom;
	    };
	    zoom.scale = function(_) {
	      if (!arguments.length) return view.k;
	      view = {
	        x: view.x,
	        y: view.y,
	        k: null
	      };
	      scaleTo(+_);
	      rescale();
	      return zoom;
	    };
	    zoom.scaleExtent = function(_) {
	      if (!arguments.length) return scaleExtent;
	      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.center = function(_) {
	      if (!arguments.length) return center;
	      center = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.size = function(_) {
	      if (!arguments.length) return size;
	      size = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.duration = function(_) {
	      if (!arguments.length) return duration;
	      duration = +_;
	      return zoom;
	    };
	    zoom.x = function(z) {
	      if (!arguments.length) return x1;
	      x1 = z;
	      x0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    zoom.y = function(z) {
	      if (!arguments.length) return y1;
	      y1 = z;
	      y0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    function location(p) {
	      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
	    }
	    function point(l) {
	      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
	    }
	    function scaleTo(s) {
	      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
	    }
	    function translateTo(p, l) {
	      l = point(l);
	      view.x += p[0] - l[0];
	      view.y += p[1] - l[1];
	    }
	    function zoomTo(that, p, l, k) {
	      that.__chart__ = {
	        x: view.x,
	        y: view.y,
	        k: view.k
	      };
	      scaleTo(Math.pow(2, k));
	      translateTo(center0 = p, l);
	      that = d3.select(that);
	      if (duration > 0) that = that.transition().duration(duration);
	      that.call(zoom.event);
	    }
	    function rescale() {
	      if (x1) x1.domain(x0.range().map(function(x) {
	        return (x - view.x) / view.k;
	      }).map(x0.invert));
	      if (y1) y1.domain(y0.range().map(function(y) {
	        return (y - view.y) / view.k;
	      }).map(y0.invert));
	    }
	    function zoomstarted(dispatch) {
	      if (!zooming++) dispatch({
	        type: "zoomstart"
	      });
	    }
	    function zoomed(dispatch) {
	      rescale();
	      dispatch({
	        type: "zoom",
	        scale: view.k,
	        translate: [ view.x, view.y ]
	      });
	    }
	    function zoomended(dispatch) {
	      if (!--zooming) dispatch({
	        type: "zoomend"
	      }), center0 = null;
	    }
	    function mousedowned() {
	      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
	      d3_selection_interrupt.call(that);
	      zoomstarted(dispatch);
	      function moved() {
	        dragged = 1;
	        translateTo(d3.mouse(that), location0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        subject.on(mousemove, null).on(mouseup, null);
	        dragRestore(dragged);
	        zoomended(dispatch);
	      }
	    }
	    function touchstarted() {
	      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
	      started();
	      zoomstarted(dispatch);
	      subject.on(mousedown, null).on(touchstart, started);
	      function relocate() {
	        var touches = d3.touches(that);
	        scale0 = view.k;
	        touches.forEach(function(t) {
	          if (t.identifier in locations0) locations0[t.identifier] = location(t);
	        });
	        return touches;
	      }
	      function started() {
	        var target = d3.event.target;
	        d3.select(target).on(touchmove, moved).on(touchend, ended);
	        targets.push(target);
	        var changed = d3.event.changedTouches;
	        for (var i = 0, n = changed.length; i < n; ++i) {
	          locations0[changed[i].identifier] = null;
	        }
	        var touches = relocate(), now = Date.now();
	        if (touches.length === 1) {
	          if (now - touchtime < 500) {
	            var p = touches[0];
	            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
	            d3_eventPreventDefault();
	          }
	          touchtime = now;
	        } else if (touches.length > 1) {
	          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
	          distance0 = dx * dx + dy * dy;
	        }
	      }
	      function moved() {
	        var touches = d3.touches(that), p0, l0, p1, l1;
	        d3_selection_interrupt.call(that);
	        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
	          p1 = touches[i];
	          if (l1 = locations0[p1.identifier]) {
	            if (l0) break;
	            p0 = p1, l0 = l1;
	          }
	        }
	        if (l1) {
	          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
	          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
	          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
	          scaleTo(scale1 * scale0);
	        }
	        touchtime = null;
	        translateTo(p0, l0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        if (d3.event.touches.length) {
	          var changed = d3.event.changedTouches;
	          for (var i = 0, n = changed.length; i < n; ++i) {
	            delete locations0[changed[i].identifier];
	          }
	          for (var identifier in locations0) {
	            return void relocate();
	          }
	        }
	        d3.selectAll(targets).on(zoomName, null);
	        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
	        dragRestore();
	        zoomended(dispatch);
	      }
	    }
	    function mousewheeled() {
	      var dispatch = event.of(this, arguments);
	      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
	      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
	      mousewheelTimer = setTimeout(function() {
	        mousewheelTimer = null;
	        zoomended(dispatch);
	      }, 50);
	      d3_eventPreventDefault();
	      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
	      translateTo(center0, translate0);
	      zoomed(dispatch);
	    }
	    function dblclicked() {
	      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
	      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
	    }
	    return d3.rebind(zoom, event, "on");
	  };
	  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
	  d3.color = d3_color;
	  function d3_color() {}
	  d3_color.prototype.toString = function() {
	    return this.rgb() + "";
	  };
	  d3.hsl = d3_hsl;
	  function d3_hsl(h, s, l) {
	    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
	  }
	  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
	  d3_hslPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, this.l / k);
	  };
	  d3_hslPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, k * this.l);
	  };
	  d3_hslPrototype.rgb = function() {
	    return d3_hsl_rgb(this.h, this.s, this.l);
	  };
	  function d3_hsl_rgb(h, s, l) {
	    var m1, m2;
	    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
	    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
	    l = l < 0 ? 0 : l > 1 ? 1 : l;
	    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
	    m1 = 2 * l - m2;
	    function v(h) {
	      if (h > 360) h -= 360; else if (h < 0) h += 360;
	      if (h < 60) return m1 + (m2 - m1) * h / 60;
	      if (h < 180) return m2;
	      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
	      return m1;
	    }
	    function vv(h) {
	      return Math.round(v(h) * 255);
	    }
	    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
	  }
	  d3.hcl = d3_hcl;
	  function d3_hcl(h, c, l) {
	    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
	  }
	  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
	  d3_hclPrototype.brighter = function(k) {
	    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.darker = function(k) {
	    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.rgb = function() {
	    return d3_hcl_lab(this.h, this.c, this.l).rgb();
	  };
	  function d3_hcl_lab(h, c, l) {
	    if (isNaN(h)) h = 0;
	    if (isNaN(c)) c = 0;
	    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
	  }
	  d3.lab = d3_lab;
	  function d3_lab(l, a, b) {
	    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
	  }
	  var d3_lab_K = 18;
	  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
	  var d3_labPrototype = d3_lab.prototype = new d3_color();
	  d3_labPrototype.brighter = function(k) {
	    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.darker = function(k) {
	    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.rgb = function() {
	    return d3_lab_rgb(this.l, this.a, this.b);
	  };
	  function d3_lab_rgb(l, a, b) {
	    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
	    x = d3_lab_xyz(x) * d3_lab_X;
	    y = d3_lab_xyz(y) * d3_lab_Y;
	    z = d3_lab_xyz(z) * d3_lab_Z;
	    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
	  }
	  function d3_lab_hcl(l, a, b) {
	    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
	  }
	  function d3_lab_xyz(x) {
	    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
	  }
	  function d3_xyz_lab(x) {
	    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
	  }
	  function d3_xyz_rgb(r) {
	    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
	  }
	  d3.rgb = d3_rgb;
	  function d3_rgb(r, g, b) {
	    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
	  }
	  function d3_rgbNumber(value) {
	    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
	  }
	  function d3_rgbString(value) {
	    return d3_rgbNumber(value) + "";
	  }
	  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
	  d3_rgbPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    var r = this.r, g = this.g, b = this.b, i = 30;
	    if (!r && !g && !b) return new d3_rgb(i, i, i);
	    if (r && r < i) r = i;
	    if (g && g < i) g = i;
	    if (b && b < i) b = i;
	    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
	  };
	  d3_rgbPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_rgb(k * this.r, k * this.g, k * this.b);
	  };
	  d3_rgbPrototype.hsl = function() {
	    return d3_rgb_hsl(this.r, this.g, this.b);
	  };
	  d3_rgbPrototype.toString = function() {
	    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
	  };
	  function d3_rgb_hex(v) {
	    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
	  }
	  function d3_rgb_parse(format, rgb, hsl) {
	    var r = 0, g = 0, b = 0, m1, m2, color;
	    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
	    if (m1) {
	      m2 = m1[2].split(",");
	      switch (m1[1]) {
	       case "hsl":
	        {
	          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
	        }

	       case "rgb":
	        {
	          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
	        }
	      }
	    }
	    if (color = d3_rgb_names.get(format)) {
	      return rgb(color.r, color.g, color.b);
	    }
	    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
	      if (format.length === 4) {
	        r = (color & 3840) >> 4;
	        r = r >> 4 | r;
	        g = color & 240;
	        g = g >> 4 | g;
	        b = color & 15;
	        b = b << 4 | b;
	      } else if (format.length === 7) {
	        r = (color & 16711680) >> 16;
	        g = (color & 65280) >> 8;
	        b = color & 255;
	      }
	    }
	    return rgb(r, g, b);
	  }
	  function d3_rgb_hsl(r, g, b) {
	    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
	    if (d) {
	      s = l < .5 ? d / (max + min) : d / (2 - max - min);
	      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
	      h *= 60;
	    } else {
	      h = NaN;
	      s = l > 0 && l < 1 ? 0 : h;
	    }
	    return new d3_hsl(h, s, l);
	  }
	  function d3_rgb_lab(r, g, b) {
	    r = d3_rgb_xyz(r);
	    g = d3_rgb_xyz(g);
	    b = d3_rgb_xyz(b);
	    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
	    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
	  }
	  function d3_rgb_xyz(r) {
	    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
	  }
	  function d3_rgb_parseNumber(c) {
	    var f = parseFloat(c);
	    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
	  }
	  var d3_rgb_names = d3.map({
	    aliceblue: 15792383,
	    antiquewhite: 16444375,
	    aqua: 65535,
	    aquamarine: 8388564,
	    azure: 15794175,
	    beige: 16119260,
	    bisque: 16770244,
	    black: 0,
	    blanchedalmond: 16772045,
	    blue: 255,
	    blueviolet: 9055202,
	    brown: 10824234,
	    burlywood: 14596231,
	    cadetblue: 6266528,
	    chartreuse: 8388352,
	    chocolate: 13789470,
	    coral: 16744272,
	    cornflowerblue: 6591981,
	    cornsilk: 16775388,
	    crimson: 14423100,
	    cyan: 65535,
	    darkblue: 139,
	    darkcyan: 35723,
	    darkgoldenrod: 12092939,
	    darkgray: 11119017,
	    darkgreen: 25600,
	    darkgrey: 11119017,
	    darkkhaki: 12433259,
	    darkmagenta: 9109643,
	    darkolivegreen: 5597999,
	    darkorange: 16747520,
	    darkorchid: 10040012,
	    darkred: 9109504,
	    darksalmon: 15308410,
	    darkseagreen: 9419919,
	    darkslateblue: 4734347,
	    darkslategray: 3100495,
	    darkslategrey: 3100495,
	    darkturquoise: 52945,
	    darkviolet: 9699539,
	    deeppink: 16716947,
	    deepskyblue: 49151,
	    dimgray: 6908265,
	    dimgrey: 6908265,
	    dodgerblue: 2003199,
	    firebrick: 11674146,
	    floralwhite: 16775920,
	    forestgreen: 2263842,
	    fuchsia: 16711935,
	    gainsboro: 14474460,
	    ghostwhite: 16316671,
	    gold: 16766720,
	    goldenrod: 14329120,
	    gray: 8421504,
	    green: 32768,
	    greenyellow: 11403055,
	    grey: 8421504,
	    honeydew: 15794160,
	    hotpink: 16738740,
	    indianred: 13458524,
	    indigo: 4915330,
	    ivory: 16777200,
	    khaki: 15787660,
	    lavender: 15132410,
	    lavenderblush: 16773365,
	    lawngreen: 8190976,
	    lemonchiffon: 16775885,
	    lightblue: 11393254,
	    lightcoral: 15761536,
	    lightcyan: 14745599,
	    lightgoldenrodyellow: 16448210,
	    lightgray: 13882323,
	    lightgreen: 9498256,
	    lightgrey: 13882323,
	    lightpink: 16758465,
	    lightsalmon: 16752762,
	    lightseagreen: 2142890,
	    lightskyblue: 8900346,
	    lightslategray: 7833753,
	    lightslategrey: 7833753,
	    lightsteelblue: 11584734,
	    lightyellow: 16777184,
	    lime: 65280,
	    limegreen: 3329330,
	    linen: 16445670,
	    magenta: 16711935,
	    maroon: 8388608,
	    mediumaquamarine: 6737322,
	    mediumblue: 205,
	    mediumorchid: 12211667,
	    mediumpurple: 9662683,
	    mediumseagreen: 3978097,
	    mediumslateblue: 8087790,
	    mediumspringgreen: 64154,
	    mediumturquoise: 4772300,
	    mediumvioletred: 13047173,
	    midnightblue: 1644912,
	    mintcream: 16121850,
	    mistyrose: 16770273,
	    moccasin: 16770229,
	    navajowhite: 16768685,
	    navy: 128,
	    oldlace: 16643558,
	    olive: 8421376,
	    olivedrab: 7048739,
	    orange: 16753920,
	    orangered: 16729344,
	    orchid: 14315734,
	    palegoldenrod: 15657130,
	    palegreen: 10025880,
	    paleturquoise: 11529966,
	    palevioletred: 14381203,
	    papayawhip: 16773077,
	    peachpuff: 16767673,
	    peru: 13468991,
	    pink: 16761035,
	    plum: 14524637,
	    powderblue: 11591910,
	    purple: 8388736,
	    rebeccapurple: 6697881,
	    red: 16711680,
	    rosybrown: 12357519,
	    royalblue: 4286945,
	    saddlebrown: 9127187,
	    salmon: 16416882,
	    sandybrown: 16032864,
	    seagreen: 3050327,
	    seashell: 16774638,
	    sienna: 10506797,
	    silver: 12632256,
	    skyblue: 8900331,
	    slateblue: 6970061,
	    slategray: 7372944,
	    slategrey: 7372944,
	    snow: 16775930,
	    springgreen: 65407,
	    steelblue: 4620980,
	    tan: 13808780,
	    teal: 32896,
	    thistle: 14204888,
	    tomato: 16737095,
	    turquoise: 4251856,
	    violet: 15631086,
	    wheat: 16113331,
	    white: 16777215,
	    whitesmoke: 16119285,
	    yellow: 16776960,
	    yellowgreen: 10145074
	  });
	  d3_rgb_names.forEach(function(key, value) {
	    d3_rgb_names.set(key, d3_rgbNumber(value));
	  });
	  function d3_functor(v) {
	    return typeof v === "function" ? v : function() {
	      return v;
	    };
	  }
	  d3.functor = d3_functor;
	  d3.xhr = d3_xhrType(d3_identity);
	  function d3_xhrType(response) {
	    return function(url, mimeType, callback) {
	      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
	      mimeType = null;
	      return d3_xhr(url, mimeType, response, callback);
	    };
	  }
	  function d3_xhr(url, mimeType, response, callback) {
	    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
	    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
	    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
	      request.readyState > 3 && respond();
	    };
	    function respond() {
	      var status = request.status, result;
	      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
	        try {
	          result = response.call(xhr, request);
	        } catch (e) {
	          dispatch.error.call(xhr, e);
	          return;
	        }
	        dispatch.load.call(xhr, result);
	      } else {
	        dispatch.error.call(xhr, request);
	      }
	    }
	    request.onprogress = function(event) {
	      var o = d3.event;
	      d3.event = event;
	      try {
	        dispatch.progress.call(xhr, request);
	      } finally {
	        d3.event = o;
	      }
	    };
	    xhr.header = function(name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers[name];
	      if (value == null) delete headers[name]; else headers[name] = value + "";
	      return xhr;
	    };
	    xhr.mimeType = function(value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return xhr;
	    };
	    xhr.responseType = function(value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return xhr;
	    };
	    xhr.response = function(value) {
	      response = value;
	      return xhr;
	    };
	    [ "get", "post" ].forEach(function(method) {
	      xhr[method] = function() {
	        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
	      };
	    });
	    xhr.send = function(method, data, callback) {
	      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
	      request.open(method, url, true);
	      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
	      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
	      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
	      if (responseType != null) request.responseType = responseType;
	      if (callback != null) xhr.on("error", callback).on("load", function(request) {
	        callback(null, request);
	      });
	      dispatch.beforesend.call(xhr, request);
	      request.send(data == null ? null : data);
	      return xhr;
	    };
	    xhr.abort = function() {
	      request.abort();
	      return xhr;
	    };
	    d3.rebind(xhr, dispatch, "on");
	    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
	  }
	  function d3_xhr_fixCallback(callback) {
	    return callback.length === 1 ? function(error, request) {
	      callback(error == null ? request : null);
	    } : callback;
	  }
	  function d3_xhrHasResponse(request) {
	    var type = request.responseType;
	    return type && type !== "text" ? request.response : request.responseText;
	  }
	  d3.dsv = function(delimiter, mimeType) {
	    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
	    function dsv(url, row, callback) {
	      if (arguments.length < 3) callback = row, row = null;
	      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
	      xhr.row = function(_) {
	        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
	      };
	      return xhr;
	    }
	    function response(request) {
	      return dsv.parse(request.responseText);
	    }
	    function typedResponse(f) {
	      return function(request) {
	        return dsv.parse(request.responseText, f);
	      };
	    }
	    dsv.parse = function(text, f) {
	      var o;
	      return dsv.parseRows(text, function(row, i) {
	        if (o) return o(row, i - 1);
	        var a = new Function("d", "return {" + row.map(function(name, i) {
	          return JSON.stringify(name) + ": d[" + i + "]";
	        }).join(",") + "}");
	        o = f ? function(row, i) {
	          return f(a(row), i);
	        } : a;
	      });
	    };
	    dsv.parseRows = function(text, f) {
	      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
	      function token() {
	        if (I >= N) return EOF;
	        if (eol) return eol = false, EOL;
	        var j = I;
	        if (text.charCodeAt(j) === 34) {
	          var i = j;
	          while (i++ < N) {
	            if (text.charCodeAt(i) === 34) {
	              if (text.charCodeAt(i + 1) !== 34) break;
	              ++i;
	            }
	          }
	          I = i + 2;
	          var c = text.charCodeAt(i + 1);
	          if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(i + 2) === 10) ++I;
	          } else if (c === 10) {
	            eol = true;
	          }
	          return text.slice(j + 1, i).replace(/""/g, '"');
	        }
	        while (I < N) {
	          var c = text.charCodeAt(I++), k = 1;
	          if (c === 10) eol = true; else if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(I) === 10) ++I, ++k;
	          } else if (c !== delimiterCode) continue;
	          return text.slice(j, I - k);
	        }
	        return text.slice(j);
	      }
	      while ((t = token()) !== EOF) {
	        var a = [];
	        while (t !== EOL && t !== EOF) {
	          a.push(t);
	          t = token();
	        }
	        if (f && (a = f(a, n++)) == null) continue;
	        rows.push(a);
	      }
	      return rows;
	    };
	    dsv.format = function(rows) {
	      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
	      var fieldSet = new d3_Set(), fields = [];
	      rows.forEach(function(row) {
	        for (var field in row) {
	          if (!fieldSet.has(field)) {
	            fields.push(fieldSet.add(field));
	          }
	        }
	      });
	      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
	        return fields.map(function(field) {
	          return formatValue(row[field]);
	        }).join(delimiter);
	      })).join("\n");
	    };
	    dsv.formatRows = function(rows) {
	      return rows.map(formatRow).join("\n");
	    };
	    function formatRow(row) {
	      return row.map(formatValue).join(delimiter);
	    }
	    function formatValue(text) {
	      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
	    }
	    return dsv;
	  };
	  d3.csv = d3.dsv(",", "text/csv");
	  d3.tsv = d3.dsv("	", "text/tab-separated-values");
	  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
	    setTimeout(callback, 17);
	  };
	  d3.timer = function() {
	    d3_timer.apply(this, arguments);
	  };
	  function d3_timer(callback, delay, then) {
	    var n = arguments.length;
	    if (n < 2) delay = 0;
	    if (n < 3) then = Date.now();
	    var time = then + delay, timer = {
	      c: callback,
	      t: time,
	      n: null
	    };
	    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
	    d3_timer_queueTail = timer;
	    if (!d3_timer_interval) {
	      d3_timer_timeout = clearTimeout(d3_timer_timeout);
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	    return timer;
	  }
	  function d3_timer_step() {
	    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
	    if (delay > 24) {
	      if (isFinite(delay)) {
	        clearTimeout(d3_timer_timeout);
	        d3_timer_timeout = setTimeout(d3_timer_step, delay);
	      }
	      d3_timer_interval = 0;
	    } else {
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	  }
	  d3.timer.flush = function() {
	    d3_timer_mark();
	    d3_timer_sweep();
	  };
	  function d3_timer_mark() {
	    var now = Date.now(), timer = d3_timer_queueHead;
	    while (timer) {
	      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
	      timer = timer.n;
	    }
	    return now;
	  }
	  function d3_timer_sweep() {
	    var t0, t1 = d3_timer_queueHead, time = Infinity;
	    while (t1) {
	      if (t1.c) {
	        if (t1.t < time) time = t1.t;
	        t1 = (t0 = t1).n;
	      } else {
	        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
	      }
	    }
	    d3_timer_queueTail = t0;
	    return time;
	  }
	  function d3_format_precision(x, p) {
	    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
	  }
	  d3.round = function(x, n) {
	    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
	  };
	  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
	  d3.formatPrefix = function(value, precision) {
	    var i = 0;
	    if (value = +value) {
	      if (value < 0) value *= -1;
	      if (precision) value = d3.round(value, d3_format_precision(value, precision));
	      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
	      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
	    }
	    return d3_formatPrefixes[8 + i / 3];
	  };
	  function d3_formatPrefix(d, i) {
	    var k = Math.pow(10, abs(8 - i) * 3);
	    return {
	      scale: i > 8 ? function(d) {
	        return d / k;
	      } : function(d) {
	        return d * k;
	      },
	      symbol: d
	    };
	  }
	  function d3_locale_numberFormat(locale) {
	    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
	      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
	      while (i > 0 && g > 0) {
	        if (length + g + 1 > width) g = Math.max(1, width - length);
	        t.push(value.substring(i -= g, i + g));
	        if ((length += g + 1) > width) break;
	        g = locale_grouping[j = (j + 1) % locale_grouping.length];
	      }
	      return t.reverse().join(locale_thousands);
	    } : d3_identity;
	    return function(specifier) {
	      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
	      if (precision) precision = +precision.substring(1);
	      if (zfill || fill === "0" && align === "=") {
	        zfill = fill = "0";
	        align = "=";
	      }
	      switch (type) {
	       case "n":
	        comma = true;
	        type = "g";
	        break;

	       case "%":
	        scale = 100;
	        suffix = "%";
	        type = "f";
	        break;

	       case "p":
	        scale = 100;
	        suffix = "%";
	        type = "r";
	        break;

	       case "b":
	       case "o":
	       case "x":
	       case "X":
	        if (symbol === "#") prefix = "0" + type.toLowerCase();

	       case "c":
	        exponent = false;

	       case "d":
	        integer = true;
	        precision = 0;
	        break;

	       case "s":
	        scale = -1;
	        type = "r";
	        break;
	      }
	      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
	      if (type == "r" && !precision) type = "g";
	      if (precision != null) {
	        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
	      }
	      type = d3_format_types.get(type) || d3_format_typeDefault;
	      var zcomma = zfill && comma;
	      return function(value) {
	        var fullSuffix = suffix;
	        if (integer && value % 1) return "";
	        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
	        if (scale < 0) {
	          var unit = d3.formatPrefix(value, precision);
	          value = unit.scale(value);
	          fullSuffix = unit.symbol + suffix;
	        } else {
	          value *= scale;
	        }
	        value = type(value, precision);
	        var i = value.lastIndexOf("."), before, after;
	        if (i < 0) {
	          var j = exponent ? value.lastIndexOf("e") : -1;
	          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
	        } else {
	          before = value.substring(0, i);
	          after = locale_decimal + value.substring(i + 1);
	        }
	        if (!zfill && comma) before = formatGroup(before, Infinity);
	        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
	        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
	        negative += prefix;
	        value = before + after;
	        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
	      };
	    };
	  }
	  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
	  var d3_format_types = d3.map({
	    b: function(x) {
	      return x.toString(2);
	    },
	    c: function(x) {
	      return String.fromCharCode(x);
	    },
	    o: function(x) {
	      return x.toString(8);
	    },
	    x: function(x) {
	      return x.toString(16);
	    },
	    X: function(x) {
	      return x.toString(16).toUpperCase();
	    },
	    g: function(x, p) {
	      return x.toPrecision(p);
	    },
	    e: function(x, p) {
	      return x.toExponential(p);
	    },
	    f: function(x, p) {
	      return x.toFixed(p);
	    },
	    r: function(x, p) {
	      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
	    }
	  });
	  function d3_format_typeDefault(x) {
	    return x + "";
	  }
	  var d3_time = d3.time = {}, d3_date = Date;
	  function d3_date_utc() {
	    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
	  }
	  d3_date_utc.prototype = {
	    getDate: function() {
	      return this._.getUTCDate();
	    },
	    getDay: function() {
	      return this._.getUTCDay();
	    },
	    getFullYear: function() {
	      return this._.getUTCFullYear();
	    },
	    getHours: function() {
	      return this._.getUTCHours();
	    },
	    getMilliseconds: function() {
	      return this._.getUTCMilliseconds();
	    },
	    getMinutes: function() {
	      return this._.getUTCMinutes();
	    },
	    getMonth: function() {
	      return this._.getUTCMonth();
	    },
	    getSeconds: function() {
	      return this._.getUTCSeconds();
	    },
	    getTime: function() {
	      return this._.getTime();
	    },
	    getTimezoneOffset: function() {
	      return 0;
	    },
	    valueOf: function() {
	      return this._.valueOf();
	    },
	    setDate: function() {
	      d3_time_prototype.setUTCDate.apply(this._, arguments);
	    },
	    setDay: function() {
	      d3_time_prototype.setUTCDay.apply(this._, arguments);
	    },
	    setFullYear: function() {
	      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
	    },
	    setHours: function() {
	      d3_time_prototype.setUTCHours.apply(this._, arguments);
	    },
	    setMilliseconds: function() {
	      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
	    },
	    setMinutes: function() {
	      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
	    },
	    setMonth: function() {
	      d3_time_prototype.setUTCMonth.apply(this._, arguments);
	    },
	    setSeconds: function() {
	      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
	    },
	    setTime: function() {
	      d3_time_prototype.setTime.apply(this._, arguments);
	    }
	  };
	  var d3_time_prototype = Date.prototype;
	  function d3_time_interval(local, step, number) {
	    function round(date) {
	      var d0 = local(date), d1 = offset(d0, 1);
	      return date - d0 < d1 - date ? d0 : d1;
	    }
	    function ceil(date) {
	      step(date = local(new d3_date(date - 1)), 1);
	      return date;
	    }
	    function offset(date, k) {
	      step(date = new d3_date(+date), k);
	      return date;
	    }
	    function range(t0, t1, dt) {
	      var time = ceil(t0), times = [];
	      if (dt > 1) {
	        while (time < t1) {
	          if (!(number(time) % dt)) times.push(new Date(+time));
	          step(time, 1);
	        }
	      } else {
	        while (time < t1) times.push(new Date(+time)), step(time, 1);
	      }
	      return times;
	    }
	    function range_utc(t0, t1, dt) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = t0;
	        return range(utc, t1, dt);
	      } finally {
	        d3_date = Date;
	      }
	    }
	    local.floor = local;
	    local.round = round;
	    local.ceil = ceil;
	    local.offset = offset;
	    local.range = range;
	    var utc = local.utc = d3_time_interval_utc(local);
	    utc.floor = utc;
	    utc.round = d3_time_interval_utc(round);
	    utc.ceil = d3_time_interval_utc(ceil);
	    utc.offset = d3_time_interval_utc(offset);
	    utc.range = range_utc;
	    return local;
	  }
	  function d3_time_interval_utc(method) {
	    return function(date, k) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = date;
	        return method(utc, k)._;
	      } finally {
	        d3_date = Date;
	      }
	    };
	  }
	  d3_time.year = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setMonth(0, 1);
	    return date;
	  }, function(date, offset) {
	    date.setFullYear(date.getFullYear() + offset);
	  }, function(date) {
	    return date.getFullYear();
	  });
	  d3_time.years = d3_time.year.range;
	  d3_time.years.utc = d3_time.year.utc.range;
	  d3_time.day = d3_time_interval(function(date) {
	    var day = new d3_date(2e3, 0);
	    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
	    return day;
	  }, function(date, offset) {
	    date.setDate(date.getDate() + offset);
	  }, function(date) {
	    return date.getDate() - 1;
	  });
	  d3_time.days = d3_time.day.range;
	  d3_time.days.utc = d3_time.day.utc.range;
	  d3_time.dayOfYear = function(date) {
	    var year = d3_time.year(date);
	    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
	  };
	  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
	    i = 7 - i;
	    var interval = d3_time[day] = d3_time_interval(function(date) {
	      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
	      return date;
	    }, function(date, offset) {
	      date.setDate(date.getDate() + Math.floor(offset) * 7);
	    }, function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
	    });
	    d3_time[day + "s"] = interval.range;
	    d3_time[day + "s"].utc = interval.utc.range;
	    d3_time[day + "OfYear"] = function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
	    };
	  });
	  d3_time.week = d3_time.sunday;
	  d3_time.weeks = d3_time.sunday.range;
	  d3_time.weeks.utc = d3_time.sunday.utc.range;
	  d3_time.weekOfYear = d3_time.sundayOfYear;
	  function d3_locale_timeFormat(locale) {
	    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
	    function d3_time_format(template) {
	      var n = template.length;
	      function format(date) {
	        var string = [], i = -1, j = 0, c, p, f;
	        while (++i < n) {
	          if (template.charCodeAt(i) === 37) {
	            string.push(template.slice(j, i));
	            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
	            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
	            string.push(c);
	            j = i + 1;
	          }
	        }
	        string.push(template.slice(j, i));
	        return string.join("");
	      }
	      format.parse = function(string) {
	        var d = {
	          y: 1900,
	          m: 0,
	          d: 1,
	          H: 0,
	          M: 0,
	          S: 0,
	          L: 0,
	          Z: null
	        }, i = d3_time_parse(d, template, string, 0);
	        if (i != string.length) return null;
	        if ("p" in d) d.H = d.H % 12 + d.p * 12;
	        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
	        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
	          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
	          date.setFullYear(d.y, 0, 1);
	          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
	        } else date.setFullYear(d.y, d.m, d.d);
	        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
	        return localZ ? date._ : date;
	      };
	      format.toString = function() {
	        return template;
	      };
	      return format;
	    }
	    function d3_time_parse(date, template, string, j) {
	      var c, p, t, i = 0, n = template.length, m = string.length;
	      while (i < n) {
	        if (j >= m) return -1;
	        c = template.charCodeAt(i++);
	        if (c === 37) {
	          t = template.charAt(i++);
	          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
	          if (!p || (j = p(date, string, j)) < 0) return -1;
	        } else if (c != string.charCodeAt(j++)) {
	          return -1;
	        }
	      }
	      return j;
	    }
	    d3_time_format.utc = function(template) {
	      var local = d3_time_format(template);
	      function format(date) {
	        try {
	          d3_date = d3_date_utc;
	          var utc = new d3_date();
	          utc._ = date;
	          return local(utc);
	        } finally {
	          d3_date = Date;
	        }
	      }
	      format.parse = function(string) {
	        try {
	          d3_date = d3_date_utc;
	          var date = local.parse(string);
	          return date && date._;
	        } finally {
	          d3_date = Date;
	        }
	      };
	      format.toString = local.toString;
	      return format;
	    };
	    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
	    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
	    locale_periods.forEach(function(p, i) {
	      d3_time_periodLookup.set(p.toLowerCase(), i);
	    });
	    var d3_time_formats = {
	      a: function(d) {
	        return locale_shortDays[d.getDay()];
	      },
	      A: function(d) {
	        return locale_days[d.getDay()];
	      },
	      b: function(d) {
	        return locale_shortMonths[d.getMonth()];
	      },
	      B: function(d) {
	        return locale_months[d.getMonth()];
	      },
	      c: d3_time_format(locale_dateTime),
	      d: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      e: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      H: function(d, p) {
	        return d3_time_formatPad(d.getHours(), p, 2);
	      },
	      I: function(d, p) {
	        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
	      },
	      j: function(d, p) {
	        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
	      },
	      L: function(d, p) {
	        return d3_time_formatPad(d.getMilliseconds(), p, 3);
	      },
	      m: function(d, p) {
	        return d3_time_formatPad(d.getMonth() + 1, p, 2);
	      },
	      M: function(d, p) {
	        return d3_time_formatPad(d.getMinutes(), p, 2);
	      },
	      p: function(d) {
	        return locale_periods[+(d.getHours() >= 12)];
	      },
	      S: function(d, p) {
	        return d3_time_formatPad(d.getSeconds(), p, 2);
	      },
	      U: function(d, p) {
	        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
	      },
	      w: function(d) {
	        return d.getDay();
	      },
	      W: function(d, p) {
	        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
	      },
	      x: d3_time_format(locale_date),
	      X: d3_time_format(locale_time),
	      y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
	      },
	      Y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
	      },
	      Z: d3_time_zone,
	      "%": function() {
	        return "%";
	      }
	    };
	    var d3_time_parsers = {
	      a: d3_time_parseWeekdayAbbrev,
	      A: d3_time_parseWeekday,
	      b: d3_time_parseMonthAbbrev,
	      B: d3_time_parseMonth,
	      c: d3_time_parseLocaleFull,
	      d: d3_time_parseDay,
	      e: d3_time_parseDay,
	      H: d3_time_parseHour24,
	      I: d3_time_parseHour24,
	      j: d3_time_parseDayOfYear,
	      L: d3_time_parseMilliseconds,
	      m: d3_time_parseMonthNumber,
	      M: d3_time_parseMinutes,
	      p: d3_time_parseAmPm,
	      S: d3_time_parseSeconds,
	      U: d3_time_parseWeekNumberSunday,
	      w: d3_time_parseWeekdayNumber,
	      W: d3_time_parseWeekNumberMonday,
	      x: d3_time_parseLocaleDate,
	      X: d3_time_parseLocaleTime,
	      y: d3_time_parseYear,
	      Y: d3_time_parseFullYear,
	      Z: d3_time_parseZone,
	      "%": d3_time_parseLiteralPercent
	    };
	    function d3_time_parseWeekdayAbbrev(date, string, i) {
	      d3_time_dayAbbrevRe.lastIndex = 0;
	      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseWeekday(date, string, i) {
	      d3_time_dayRe.lastIndex = 0;
	      var n = d3_time_dayRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonthAbbrev(date, string, i) {
	      d3_time_monthAbbrevRe.lastIndex = 0;
	      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonth(date, string, i) {
	      d3_time_monthRe.lastIndex = 0;
	      var n = d3_time_monthRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseLocaleFull(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
	    }
	    function d3_time_parseLocaleDate(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
	    }
	    function d3_time_parseLocaleTime(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
	    }
	    function d3_time_parseAmPm(date, string, i) {
	      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
	      return n == null ? -1 : (date.p = n, i);
	    }
	    return d3_time_format;
	  }
	  var d3_time_formatPads = {
	    "-": "",
	    _: " ",
	    "0": "0"
	  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
	  function d3_time_formatPad(value, fill, width) {
	    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
	    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	  }
	  function d3_time_formatRe(names) {
	    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
	  }
	  function d3_time_formatLookup(names) {
	    var map = new d3_Map(), i = -1, n = names.length;
	    while (++i < n) map.set(names[i].toLowerCase(), i);
	    return map;
	  }
	  function d3_time_parseWeekdayNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
	    return n ? (date.w = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberSunday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.U = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberMonday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.W = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseFullYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
	    return n ? (date.y = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
	  }
	  function d3_time_parseZone(date, string, i) {
	    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
	    i + 5) : -1;
	  }
	  function d3_time_expandYear(d) {
	    return d + (d > 68 ? 1900 : 2e3);
	  }
	  function d3_time_parseMonthNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
	  }
	  function d3_time_parseDay(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.d = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseDayOfYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.j = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseHour24(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.H = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMinutes(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.M = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseSeconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.S = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMilliseconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.L = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_zone(d) {
	    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
	    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
	  }
	  function d3_time_parseLiteralPercent(date, string, i) {
	    d3_time_percentRe.lastIndex = 0;
	    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
	    return n ? i + n[0].length : -1;
	  }
	  function d3_time_formatMulti(formats) {
	    var n = formats.length, i = -1;
	    while (++i < n) formats[i][0] = this(formats[i][0]);
	    return function(date) {
	      var i = 0, f = formats[i];
	      while (!f[1](date)) f = formats[++i];
	      return f[0](date);
	    };
	  }
	  d3.locale = function(locale) {
	    return {
	      numberFormat: d3_locale_numberFormat(locale),
	      timeFormat: d3_locale_timeFormat(locale)
	    };
	  };
	  var d3_locale_enUS = d3.locale({
	    decimal: ".",
	    thousands: ",",
	    grouping: [ 3 ],
	    currency: [ "$", "" ],
	    dateTime: "%a %b %e %X %Y",
	    date: "%m/%d/%Y",
	    time: "%H:%M:%S",
	    periods: [ "AM", "PM" ],
	    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
	    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
	    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
	    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
	  });
	  d3.format = d3_locale_enUS.numberFormat;
	  d3.geo = {};
	  function d3_adder() {}
	  d3_adder.prototype = {
	    s: 0,
	    t: 0,
	    add: function(y) {
	      d3_adderSum(y, this.t, d3_adderTemp);
	      d3_adderSum(d3_adderTemp.s, this.s, this);
	      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
	    },
	    reset: function() {
	      this.s = this.t = 0;
	    },
	    valueOf: function() {
	      return this.s;
	    }
	  };
	  var d3_adderTemp = new d3_adder();
	  function d3_adderSum(a, b, o) {
	    var x = o.s = a + b, bv = x - a, av = x - bv;
	    o.t = a - av + (b - bv);
	  }
	  d3.geo.stream = function(object, listener) {
	    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
	      d3_geo_streamObjectType[object.type](object, listener);
	    } else {
	      d3_geo_streamGeometry(object, listener);
	    }
	  };
	  function d3_geo_streamGeometry(geometry, listener) {
	    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
	      d3_geo_streamGeometryType[geometry.type](geometry, listener);
	    }
	  }
	  var d3_geo_streamObjectType = {
	    Feature: function(feature, listener) {
	      d3_geo_streamGeometry(feature.geometry, listener);
	    },
	    FeatureCollection: function(object, listener) {
	      var features = object.features, i = -1, n = features.length;
	      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
	    }
	  };
	  var d3_geo_streamGeometryType = {
	    Sphere: function(object, listener) {
	      listener.sphere();
	    },
	    Point: function(object, listener) {
	      object = object.coordinates;
	      listener.point(object[0], object[1], object[2]);
	    },
	    MultiPoint: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
	    },
	    LineString: function(object, listener) {
	      d3_geo_streamLine(object.coordinates, listener, 0);
	    },
	    MultiLineString: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
	    },
	    Polygon: function(object, listener) {
	      d3_geo_streamPolygon(object.coordinates, listener);
	    },
	    MultiPolygon: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
	    },
	    GeometryCollection: function(object, listener) {
	      var geometries = object.geometries, i = -1, n = geometries.length;
	      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
	    }
	  };
	  function d3_geo_streamLine(coordinates, listener, closed) {
	    var i = -1, n = coordinates.length - closed, coordinate;
	    listener.lineStart();
	    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
	    listener.lineEnd();
	  }
	  function d3_geo_streamPolygon(coordinates, listener) {
	    var i = -1, n = coordinates.length;
	    listener.polygonStart();
	    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
	    listener.polygonEnd();
	  }
	  d3.geo.area = function(object) {
	    d3_geo_areaSum = 0;
	    d3.geo.stream(object, d3_geo_area);
	    return d3_geo_areaSum;
	  };
	  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
	  var d3_geo_area = {
	    sphere: function() {
	      d3_geo_areaSum += 4 * π;
	    },
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_areaRingSum.reset();
	      d3_geo_area.lineStart = d3_geo_areaRingStart;
	    },
	    polygonEnd: function() {
	      var area = 2 * d3_geo_areaRingSum;
	      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
	      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
	    }
	  };
	  function d3_geo_areaRingStart() {
	    var λ00, φ00, λ0, cosφ0, sinφ0;
	    d3_geo_area.point = function(λ, φ) {
	      d3_geo_area.point = nextPoint;
	      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
	      sinφ0 = Math.sin(φ);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      φ = φ * d3_radians / 2 + π / 4;
	      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
	      d3_geo_areaRingSum.add(Math.atan2(v, u));
	      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
	    }
	    d3_geo_area.lineEnd = function() {
	      nextPoint(λ00, φ00);
	    };
	  }
	  function d3_geo_cartesian(spherical) {
	    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
	    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
	  }
	  function d3_geo_cartesianDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	  }
	  function d3_geo_cartesianCross(a, b) {
	    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
	  }
	  function d3_geo_cartesianAdd(a, b) {
	    a[0] += b[0];
	    a[1] += b[1];
	    a[2] += b[2];
	  }
	  function d3_geo_cartesianScale(vector, k) {
	    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
	  }
	  function d3_geo_cartesianNormalize(d) {
	    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	    d[0] /= l;
	    d[1] /= l;
	    d[2] /= l;
	  }
	  function d3_geo_spherical(cartesian) {
	    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
	  }
	  function d3_geo_sphericalEqual(a, b) {
	    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
	  }
	  d3.geo.bounds = function() {
	    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
	    var bound = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        bound.point = ringPoint;
	        bound.lineStart = ringStart;
	        bound.lineEnd = ringEnd;
	        dλSum = 0;
	        d3_geo_area.polygonStart();
	      },
	      polygonEnd: function() {
	        d3_geo_area.polygonEnd();
	        bound.point = point;
	        bound.lineStart = lineStart;
	        bound.lineEnd = lineEnd;
	        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
	        range[0] = λ0, range[1] = λ1;
	      }
	    };
	    function point(λ, φ) {
	      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
	      if (φ < φ0) φ0 = φ;
	      if (φ > φ1) φ1 = φ;
	    }
	    function linePoint(λ, φ) {
	      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
	      if (p0) {
	        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
	        d3_geo_cartesianNormalize(inflection);
	        inflection = d3_geo_spherical(inflection);
	        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
	        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = inflection[1] * d3_degrees;
	          if (φi > φ1) φ1 = φi;
	        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = -inflection[1] * d3_degrees;
	          if (φi < φ0) φ0 = φi;
	        } else {
	          if (φ < φ0) φ0 = φ;
	          if (φ > φ1) φ1 = φ;
	        }
	        if (antimeridian) {
	          if (λ < λ_) {
	            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	          } else {
	            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	          }
	        } else {
	          if (λ1 >= λ0) {
	            if (λ < λ0) λ0 = λ;
	            if (λ > λ1) λ1 = λ;
	          } else {
	            if (λ > λ_) {
	              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	            } else {
	              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	            }
	          }
	        }
	      } else {
	        point(λ, φ);
	      }
	      p0 = p, λ_ = λ;
	    }
	    function lineStart() {
	      bound.point = linePoint;
	    }
	    function lineEnd() {
	      range[0] = λ0, range[1] = λ1;
	      bound.point = point;
	      p0 = null;
	    }
	    function ringPoint(λ, φ) {
	      if (p0) {
	        var dλ = λ - λ_;
	        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
	      } else λ__ = λ, φ__ = φ;
	      d3_geo_area.point(λ, φ);
	      linePoint(λ, φ);
	    }
	    function ringStart() {
	      d3_geo_area.lineStart();
	    }
	    function ringEnd() {
	      ringPoint(λ__, φ__);
	      d3_geo_area.lineEnd();
	      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
	      range[0] = λ0, range[1] = λ1;
	      p0 = null;
	    }
	    function angle(λ0, λ1) {
	      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
	    }
	    function compareRanges(a, b) {
	      return a[0] - b[0];
	    }
	    function withinRange(x, range) {
	      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	    }
	    return function(feature) {
	      φ1 = λ1 = -(λ0 = φ0 = Infinity);
	      ranges = [];
	      d3.geo.stream(feature, bound);
	      var n = ranges.length;
	      if (n) {
	        ranges.sort(compareRanges);
	        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
	          b = ranges[i];
	          if (withinRange(b[0], a) || withinRange(b[1], a)) {
	            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	          } else {
	            merged.push(a = b);
	          }
	        }
	        var best = -Infinity, dλ;
	        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
	          b = merged[i];
	          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
	        }
	      }
	      ranges = range = null;
	      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
	    };
	  }();
	  d3.geo.centroid = function(object) {
	    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	    d3.geo.stream(object, d3_geo_centroid);
	    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
	    if (m < ε2) {
	      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
	      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
	      m = x * x + y * y + z * z;
	      if (m < ε2) return [ NaN, NaN ];
	    }
	    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
	  };
	  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
	  var d3_geo_centroid = {
	    sphere: d3_noop,
	    point: d3_geo_centroidPoint,
	    lineStart: d3_geo_centroidLineStart,
	    lineEnd: d3_geo_centroidLineEnd,
	    polygonStart: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
	    }
	  };
	  function d3_geo_centroidPoint(λ, φ) {
	    λ *= d3_radians;
	    var cosφ = Math.cos(φ *= d3_radians);
	    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
	  }
	  function d3_geo_centroidPointXYZ(x, y, z) {
	    ++d3_geo_centroidW0;
	    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
	    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
	    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
	  }
	  function d3_geo_centroidLineStart() {
	    var x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroid.point = nextPoint;
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_centroidLineEnd() {
	    d3_geo_centroid.point = d3_geo_centroidPoint;
	  }
	  function d3_geo_centroidRingStart() {
	    var λ00, φ00, x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ00 = λ, φ00 = φ;
	      d3_geo_centroid.point = nextPoint;
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    d3_geo_centroid.lineEnd = function() {
	      nextPoint(λ00, φ00);
	      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
	      d3_geo_centroid.point = d3_geo_centroidPoint;
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
	      d3_geo_centroidX2 += v * cx;
	      d3_geo_centroidY2 += v * cy;
	      d3_geo_centroidZ2 += v * cz;
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_compose(a, b) {
	    function compose(x, y) {
	      return x = a(x, y), b(x[0], x[1]);
	    }
	    if (a.invert && b.invert) compose.invert = function(x, y) {
	      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	    };
	    return compose;
	  }
	  function d3_true() {
	    return true;
	  }
	  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
	    var subject = [], clip = [];
	    segments.forEach(function(segment) {
	      if ((n = segment.length - 1) <= 0) return;
	      var n, p0 = segment[0], p1 = segment[n];
	      if (d3_geo_sphericalEqual(p0, p1)) {
	        listener.lineStart();
	        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
	        listener.lineEnd();
	        return;
	      }
	      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
	      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	    });
	    clip.sort(compare);
	    d3_geo_clipPolygonLinkCircular(subject);
	    d3_geo_clipPolygonLinkCircular(clip);
	    if (!subject.length) return;
	    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
	      clip[i].e = entry = !entry;
	    }
	    var start = subject[0], points, point;
	    while (1) {
	      var current = start, isSubject = true;
	      while (current.v) if ((current = current.n) === start) return;
	      points = current.z;
	      listener.lineStart();
	      do {
	        current.v = current.o.v = true;
	        if (current.e) {
	          if (isSubject) {
	            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.n.x, 1, listener);
	          }
	          current = current.n;
	        } else {
	          if (isSubject) {
	            points = current.p.z;
	            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.p.x, -1, listener);
	          }
	          current = current.p;
	        }
	        current = current.o;
	        points = current.z;
	        isSubject = !isSubject;
	      } while (!current.v);
	      listener.lineEnd();
	    }
	  }
	  function d3_geo_clipPolygonLinkCircular(array) {
	    if (!(n = array.length)) return;
	    var n, i = 0, a = array[0], b;
	    while (++i < n) {
	      a.n = b = array[i];
	      b.p = a;
	      a = b;
	    }
	    a.n = b = array[0];
	    b.p = a;
	  }
	  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
	    this.x = point;
	    this.z = points;
	    this.o = other;
	    this.e = entry;
	    this.v = false;
	    this.n = this.p = null;
	  }
	  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
	    return function(rotate, listener) {
	      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          clip.point = pointRing;
	          clip.lineStart = ringStart;
	          clip.lineEnd = ringEnd;
	          segments = [];
	          polygon = [];
	        },
	        polygonEnd: function() {
	          clip.point = point;
	          clip.lineStart = lineStart;
	          clip.lineEnd = lineEnd;
	          segments = d3.merge(segments);
	          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
	          if (segments.length) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
	          } else if (clipStartInside) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            interpolate(null, null, 1, listener);
	            listener.lineEnd();
	          }
	          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
	          segments = polygon = null;
	        },
	        sphere: function() {
	          listener.polygonStart();
	          listener.lineStart();
	          interpolate(null, null, 1, listener);
	          listener.lineEnd();
	          listener.polygonEnd();
	        }
	      };
	      function point(λ, φ) {
	        var point = rotate(λ, φ);
	        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
	      }
	      function pointLine(λ, φ) {
	        var point = rotate(λ, φ);
	        line.point(point[0], point[1]);
	      }
	      function lineStart() {
	        clip.point = pointLine;
	        line.lineStart();
	      }
	      function lineEnd() {
	        clip.point = point;
	        line.lineEnd();
	      }
	      var segments;
	      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
	      function pointRing(λ, φ) {
	        ring.push([ λ, φ ]);
	        var point = rotate(λ, φ);
	        ringListener.point(point[0], point[1]);
	      }
	      function ringStart() {
	        ringListener.lineStart();
	        ring = [];
	      }
	      function ringEnd() {
	        pointRing(ring[0][0], ring[0][1]);
	        ringListener.lineEnd();
	        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
	        ring.pop();
	        polygon.push(ring);
	        ring = null;
	        if (!n) return;
	        if (clean & 1) {
	          segment = ringSegments[0];
	          var n = segment.length - 1, i = -1, point;
	          if (n > 0) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            while (++i < n) listener.point((point = segment[i])[0], point[1]);
	            listener.lineEnd();
	          }
	          return;
	        }
	        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
	        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
	      }
	      return clip;
	    };
	  }
	  function d3_geo_clipSegmentLength1(segment) {
	    return segment.length > 1;
	  }
	  function d3_geo_clipBufferListener() {
	    var lines = [], line;
	    return {
	      lineStart: function() {
	        lines.push(line = []);
	      },
	      point: function(λ, φ) {
	        line.push([ λ, φ ]);
	      },
	      lineEnd: d3_noop,
	      buffer: function() {
	        var buffer = lines;
	        lines = [];
	        line = null;
	        return buffer;
	      },
	      rejoin: function() {
	        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	      }
	    };
	  }
	  function d3_geo_clipSort(a, b) {
	    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
	  }
	  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
	  function d3_geo_clipAntimeridianLine(listener) {
	    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
	    return {
	      lineStart: function() {
	        listener.lineStart();
	        clean = 1;
	      },
	      point: function(λ1, φ1) {
	        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
	        if (abs(dλ - π) < ε) {
	          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          listener.point(λ1, φ0);
	          clean = 0;
	        } else if (sλ0 !== sλ1 && dλ >= π) {
	          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
	          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
	          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          clean = 0;
	        }
	        listener.point(λ0 = λ1, φ0 = φ1);
	        sλ0 = sλ1;
	      },
	      lineEnd: function() {
	        listener.lineEnd();
	        λ0 = φ0 = NaN;
	      },
	      clean: function() {
	        return 2 - clean;
	      }
	    };
	  }
	  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
	    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
	    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
	  }
	  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
	    var φ;
	    if (from == null) {
	      φ = direction * halfπ;
	      listener.point(-π, φ);
	      listener.point(0, φ);
	      listener.point(π, φ);
	      listener.point(π, 0);
	      listener.point(π, -φ);
	      listener.point(0, -φ);
	      listener.point(-π, -φ);
	      listener.point(-π, 0);
	      listener.point(-π, φ);
	    } else if (abs(from[0] - to[0]) > ε) {
	      var s = from[0] < to[0] ? π : -π;
	      φ = direction * s / 2;
	      listener.point(-s, φ);
	      listener.point(0, φ);
	      listener.point(s, φ);
	    } else {
	      listener.point(to[0], to[1]);
	    }
	  }
	  function d3_geo_pointInPolygon(point, polygon) {
	    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
	    d3_geo_areaRingSum.reset();
	    for (var i = 0, n = polygon.length; i < n; ++i) {
	      var ring = polygon[i], m = ring.length;
	      if (!m) continue;
	      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
	      while (true) {
	        if (j === m) j = 0;
	        point = ring[j];
	        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
	        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
	        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
	        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
	          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
	          d3_geo_cartesianNormalize(arc);
	          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
	          d3_geo_cartesianNormalize(intersection);
	          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
	          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
	            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
	          }
	        }
	        if (!j++) break;
	        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
	      }
	    }
	    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
	  }
	  function d3_geo_clipCircle(radius) {
	    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
	    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
	    function visible(λ, φ) {
	      return Math.cos(λ) * Math.cos(φ) > cr;
	    }
	    function clipLine(listener) {
	      var point0, c0, v0, v00, clean;
	      return {
	        lineStart: function() {
	          v00 = v0 = false;
	          clean = 1;
	        },
	        point: function(λ, φ) {
	          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
	          if (!point0 && (v00 = v0 = v)) listener.lineStart();
	          if (v !== v0) {
	            point2 = intersect(point0, point1);
	            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
	              point1[0] += ε;
	              point1[1] += ε;
	              v = visible(point1[0], point1[1]);
	            }
	          }
	          if (v !== v0) {
	            clean = 0;
	            if (v) {
	              listener.lineStart();
	              point2 = intersect(point1, point0);
	              listener.point(point2[0], point2[1]);
	            } else {
	              point2 = intersect(point0, point1);
	              listener.point(point2[0], point2[1]);
	              listener.lineEnd();
	            }
	            point0 = point2;
	          } else if (notHemisphere && point0 && smallRadius ^ v) {
	            var t;
	            if (!(c & c0) && (t = intersect(point1, point0, true))) {
	              clean = 0;
	              if (smallRadius) {
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	              } else {
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	              }
	            }
	          }
	          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
	            listener.point(point1[0], point1[1]);
	          }
	          point0 = point1, v0 = v, c0 = c;
	        },
	        lineEnd: function() {
	          if (v0) listener.lineEnd();
	          point0 = null;
	        },
	        clean: function() {
	          return clean | (v00 && v0) << 1;
	        }
	      };
	    }
	    function intersect(a, b, two) {
	      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
	      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
	      if (!determinant) return !two && a;
	      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
	      d3_geo_cartesianAdd(A, B);
	      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
	      if (t2 < 0) return;
	      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
	      d3_geo_cartesianAdd(q, A);
	      q = d3_geo_spherical(q);
	      if (!two) return q;
	      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
	      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
	      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
	      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
	      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
	        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
	        d3_geo_cartesianAdd(q1, A);
	        return [ q, d3_geo_spherical(q1) ];
	      }
	    }
	    function code(λ, φ) {
	      var r = smallRadius ? radius : π - radius, code = 0;
	      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
	      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
	      return code;
	    }
	  }
	  function d3_geom_clipLine(x0, y0, x1, y1) {
	    return function(line) {
	      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
	      r = x0 - ax;
	      if (!dx && r > 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dx > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = x1 - ax;
	      if (!dx && r < 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dx > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      r = y0 - ay;
	      if (!dy && r > 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dy > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = y1 - ay;
	      if (!dy && r < 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dy > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      if (t0 > 0) line.a = {
	        x: ax + t0 * dx,
	        y: ay + t0 * dy
	      };
	      if (t1 < 1) line.b = {
	        x: ax + t1 * dx,
	        y: ay + t1 * dy
	      };
	      return line;
	    };
	  }
	  var d3_geo_clipExtentMAX = 1e9;
	  d3.geo.clipExtent = function() {
	    var x0, y0, x1, y1, stream, clip, clipExtent = {
	      stream: function(output) {
	        if (stream) stream.valid = false;
	        stream = clip(output);
	        stream.valid = true;
	        return stream;
	      },
	      extent: function(_) {
	        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
	        if (stream) stream.valid = false, stream = null;
	        return clipExtent;
	      }
	    };
	    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
	  };
	  function d3_geo_clipExtent(x0, y0, x1, y1) {
	    return function(listener) {
	      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          listener = bufferListener;
	          segments = [];
	          polygon = [];
	          clean = true;
	        },
	        polygonEnd: function() {
	          listener = listener_;
	          segments = d3.merge(segments);
	          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
	          if (inside || visible) {
	            listener.polygonStart();
	            if (inside) {
	              listener.lineStart();
	              interpolate(null, null, 1, listener);
	              listener.lineEnd();
	            }
	            if (visible) {
	              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
	            }
	            listener.polygonEnd();
	          }
	          segments = polygon = ring = null;
	        }
	      };
	      function insidePolygon(p) {
	        var wn = 0, n = polygon.length, y = p[1];
	        for (var i = 0; i < n; ++i) {
	          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
	            b = v[j];
	            if (a[1] <= y) {
	              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
	            } else {
	              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
	            }
	            a = b;
	          }
	        }
	        return wn !== 0;
	      }
	      function interpolate(from, to, direction, listener) {
	        var a = 0, a1 = 0;
	        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
	          do {
	            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	          } while ((a = (a + direction + 4) % 4) !== a1);
	        } else {
	          listener.point(to[0], to[1]);
	        }
	      }
	      function pointVisible(x, y) {
	        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	      }
	      function point(x, y) {
	        if (pointVisible(x, y)) listener.point(x, y);
	      }
	      var x__, y__, v__, x_, y_, v_, first, clean;
	      function lineStart() {
	        clip.point = linePoint;
	        if (polygon) polygon.push(ring = []);
	        first = true;
	        v_ = false;
	        x_ = y_ = NaN;
	      }
	      function lineEnd() {
	        if (segments) {
	          linePoint(x__, y__);
	          if (v__ && v_) bufferListener.rejoin();
	          segments.push(bufferListener.buffer());
	        }
	        clip.point = point;
	        if (v_) listener.lineEnd();
	      }
	      function linePoint(x, y) {
	        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
	        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
	        var v = pointVisible(x, y);
	        if (polygon) ring.push([ x, y ]);
	        if (first) {
	          x__ = x, y__ = y, v__ = v;
	          first = false;
	          if (v) {
	            listener.lineStart();
	            listener.point(x, y);
	          }
	        } else {
	          if (v && v_) listener.point(x, y); else {
	            var l = {
	              a: {
	                x: x_,
	                y: y_
	              },
	              b: {
	                x: x,
	                y: y
	              }
	            };
	            if (clipLine(l)) {
	              if (!v_) {
	                listener.lineStart();
	                listener.point(l.a.x, l.a.y);
	              }
	              listener.point(l.b.x, l.b.y);
	              if (!v) listener.lineEnd();
	              clean = false;
	            } else if (v) {
	              listener.lineStart();
	              listener.point(x, y);
	              clean = false;
	            }
	          }
	        }
	        x_ = x, y_ = y, v_ = v;
	      }
	      return clip;
	    };
	    function corner(p, direction) {
	      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
	    }
	    function compare(a, b) {
	      return comparePoints(a.x, b.x);
	    }
	    function comparePoints(a, b) {
	      var ca = corner(a, 1), cb = corner(b, 1);
	      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
	    }
	  }
	  function d3_geo_conic(projectAt) {
	    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
	    p.parallels = function(_) {
	      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
	      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
	    };
	    return p;
	  }
	  function d3_geo_conicEqualArea(φ0, φ1) {
	    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
	    function forward(λ, φ) {
	      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
	      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = ρ0 - y;
	      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEqualArea = function() {
	    return d3_geo_conic(d3_geo_conicEqualArea);
	  }).raw = d3_geo_conicEqualArea;
	  d3.geo.albers = function() {
	    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
	  };
	  d3.geo.albersUsa = function() {
	    var lower48 = d3.geo.albers();
	    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
	    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
	    var point, pointStream = {
	      point: function(x, y) {
	        point = [ x, y ];
	      }
	    }, lower48Point, alaskaPoint, hawaiiPoint;
	    function albersUsa(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      point = null;
	      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
	      return point;
	    }
	    albersUsa.invert = function(coordinates) {
	      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
	      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
	    };
	    albersUsa.stream = function(stream) {
	      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
	      return {
	        point: function(x, y) {
	          lower48Stream.point(x, y);
	          alaskaStream.point(x, y);
	          hawaiiStream.point(x, y);
	        },
	        sphere: function() {
	          lower48Stream.sphere();
	          alaskaStream.sphere();
	          hawaiiStream.sphere();
	        },
	        lineStart: function() {
	          lower48Stream.lineStart();
	          alaskaStream.lineStart();
	          hawaiiStream.lineStart();
	        },
	        lineEnd: function() {
	          lower48Stream.lineEnd();
	          alaskaStream.lineEnd();
	          hawaiiStream.lineEnd();
	        },
	        polygonStart: function() {
	          lower48Stream.polygonStart();
	          alaskaStream.polygonStart();
	          hawaiiStream.polygonStart();
	        },
	        polygonEnd: function() {
	          lower48Stream.polygonEnd();
	          alaskaStream.polygonEnd();
	          hawaiiStream.polygonEnd();
	        }
	      };
	    };
	    albersUsa.precision = function(_) {
	      if (!arguments.length) return lower48.precision();
	      lower48.precision(_);
	      alaska.precision(_);
	      hawaii.precision(_);
	      return albersUsa;
	    };
	    albersUsa.scale = function(_) {
	      if (!arguments.length) return lower48.scale();
	      lower48.scale(_);
	      alaska.scale(_ * .35);
	      hawaii.scale(_);
	      return albersUsa.translate(lower48.translate());
	    };
	    albersUsa.translate = function(_) {
	      if (!arguments.length) return lower48.translate();
	      var k = lower48.scale(), x = +_[0], y = +_[1];
	      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
	      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      return albersUsa;
	    };
	    return albersUsa.scale(1070);
	  };
	  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_pathAreaPolygon = 0;
	      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
	      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
	    }
	  };
	  function d3_geo_pathAreaRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathArea.point = function(x, y) {
	      d3_geo_pathArea.point = nextPoint;
	      x00 = x0 = x, y00 = y0 = y;
	    };
	    function nextPoint(x, y) {
	      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
	      x0 = x, y0 = y;
	    }
	    d3_geo_pathArea.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
	  var d3_geo_pathBounds = {
	    point: d3_geo_pathBoundsPoint,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_pathBoundsPoint(x, y) {
	    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
	    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
	    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
	    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
	  }
	  function d3_geo_pathBuffer() {
	    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointCircle = d3_geo_pathBufferCircle(_);
	        return stream;
	      },
	      result: function() {
	        if (buffer.length) {
	          var result = buffer.join("");
	          buffer = [];
	          return result;
	        }
	      }
	    };
	    function point(x, y) {
	      buffer.push("M", x, ",", y, pointCircle);
	    }
	    function pointLineStart(x, y) {
	      buffer.push("M", x, ",", y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      buffer.push("L", x, ",", y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      buffer.push("Z");
	    }
	    return stream;
	  }
	  function d3_geo_pathBufferCircle(radius) {
	    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
	  }
	  var d3_geo_pathCentroid = {
	    point: d3_geo_pathCentroidPoint,
	    lineStart: d3_geo_pathCentroidLineStart,
	    lineEnd: d3_geo_pathCentroidLineEnd,
	    polygonStart: function() {
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
	      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
	    }
	  };
	  function d3_geo_pathCentroidPoint(x, y) {
	    d3_geo_centroidX0 += x;
	    d3_geo_centroidY0 += y;
	    ++d3_geo_centroidZ0;
	  }
	  function d3_geo_pathCentroidLineStart() {
	    var x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	  }
	  function d3_geo_pathCentroidLineEnd() {
	    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	  }
	  function d3_geo_pathCentroidRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      z = y0 * x - x0 * y;
	      d3_geo_centroidX2 += z * (x0 + x);
	      d3_geo_centroidY2 += z * (y0 + y);
	      d3_geo_centroidZ2 += z * 3;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	    d3_geo_pathCentroid.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  function d3_geo_pathContext(context) {
	    var pointRadius = 4.5;
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointRadius = _;
	        return stream;
	      },
	      result: d3_noop
	    };
	    function point(x, y) {
	      context.moveTo(x + pointRadius, y);
	      context.arc(x, y, pointRadius, 0, τ);
	    }
	    function pointLineStart(x, y) {
	      context.moveTo(x, y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      context.lineTo(x, y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      context.closePath();
	    }
	    return stream;
	  }
	  function d3_geo_resample(project) {
	    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
	    function resample(stream) {
	      return (maxDepth ? resampleRecursive : resampleNone)(stream);
	    }
	    function resampleNone(stream) {
	      return d3_geo_transformPoint(stream, function(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      });
	    }
	    function resampleRecursive(stream) {
	      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
	      var resample = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          stream.polygonStart();
	          resample.lineStart = ringStart;
	        },
	        polygonEnd: function() {
	          stream.polygonEnd();
	          resample.lineStart = lineStart;
	        }
	      };
	      function point(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      }
	      function lineStart() {
	        x0 = NaN;
	        resample.point = linePoint;
	        stream.lineStart();
	      }
	      function linePoint(λ, φ) {
	        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	        stream.point(x0, y0);
	      }
	      function lineEnd() {
	        resample.point = point;
	        stream.lineEnd();
	      }
	      function ringStart() {
	        lineStart();
	        resample.point = ringPoint;
	        resample.lineEnd = ringEnd;
	      }
	      function ringPoint(λ, φ) {
	        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	        resample.point = linePoint;
	      }
	      function ringEnd() {
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
	        resample.lineEnd = lineEnd;
	        lineEnd();
	      }
	      return resample;
	    }
	    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
	      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
	      if (d2 > 4 * δ2 && depth--) {
	        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
	        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
	          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
	          stream.point(x2, y2);
	          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
	        }
	      }
	    }
	    resample.precision = function(_) {
	      if (!arguments.length) return Math.sqrt(δ2);
	      maxDepth = (δ2 = _ * _) > 0 && 16;
	      return resample;
	    };
	    return resample;
	  }
	  d3.geo.path = function() {
	    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
	    function path(object) {
	      if (object) {
	        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
	        d3.geo.stream(object, cacheStream);
	      }
	      return contextStream.result();
	    }
	    path.area = function(object) {
	      d3_geo_pathAreaSum = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathArea));
	      return d3_geo_pathAreaSum;
	    };
	    path.centroid = function(object) {
	      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
	      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
	    };
	    path.bounds = function(object) {
	      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
	      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
	      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
	    };
	    path.projection = function(_) {
	      if (!arguments.length) return projection;
	      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
	      return reset();
	    };
	    path.context = function(_) {
	      if (!arguments.length) return context;
	      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
	      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	      return reset();
	    };
	    path.pointRadius = function(_) {
	      if (!arguments.length) return pointRadius;
	      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	      return path;
	    };
	    function reset() {
	      cacheStream = null;
	      return path;
	    }
	    return path.projection(d3.geo.albersUsa()).context(null);
	  };
	  function d3_geo_pathProjectStream(project) {
	    var resample = d3_geo_resample(function(x, y) {
	      return project([ x * d3_degrees, y * d3_degrees ]);
	    });
	    return function(stream) {
	      return d3_geo_projectionRadians(resample(stream));
	    };
	  }
	  d3.geo.transform = function(methods) {
	    return {
	      stream: function(stream) {
	        var transform = new d3_geo_transform(stream);
	        for (var k in methods) transform[k] = methods[k];
	        return transform;
	      }
	    };
	  };
	  function d3_geo_transform(stream) {
	    this.stream = stream;
	  }
	  d3_geo_transform.prototype = {
	    point: function(x, y) {
	      this.stream.point(x, y);
	    },
	    sphere: function() {
	      this.stream.sphere();
	    },
	    lineStart: function() {
	      this.stream.lineStart();
	    },
	    lineEnd: function() {
	      this.stream.lineEnd();
	    },
	    polygonStart: function() {
	      this.stream.polygonStart();
	    },
	    polygonEnd: function() {
	      this.stream.polygonEnd();
	    }
	  };
	  function d3_geo_transformPoint(stream, point) {
	    return {
	      point: point,
	      sphere: function() {
	        stream.sphere();
	      },
	      lineStart: function() {
	        stream.lineStart();
	      },
	      lineEnd: function() {
	        stream.lineEnd();
	      },
	      polygonStart: function() {
	        stream.polygonStart();
	      },
	      polygonEnd: function() {
	        stream.polygonEnd();
	      }
	    };
	  }
	  d3.geo.projection = d3_geo_projection;
	  d3.geo.projectionMutator = d3_geo_projectionMutator;
	  function d3_geo_projection(project) {
	    return d3_geo_projectionMutator(function() {
	      return project;
	    })();
	  }
	  function d3_geo_projectionMutator(projectAt) {
	    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
	      x = project(x, y);
	      return [ x[0] * k + δx, δy - x[1] * k ];
	    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
	    function projection(point) {
	      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
	      return [ point[0] * k + δx, δy - point[1] * k ];
	    }
	    function invert(point) {
	      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
	      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
	    }
	    projection.stream = function(output) {
	      if (stream) stream.valid = false;
	      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
	      stream.valid = true;
	      return stream;
	    };
	    projection.clipAngle = function(_) {
	      if (!arguments.length) return clipAngle;
	      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
	      return invalidate();
	    };
	    projection.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent;
	      clipExtent = _;
	      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
	      return invalidate();
	    };
	    projection.scale = function(_) {
	      if (!arguments.length) return k;
	      k = +_;
	      return reset();
	    };
	    projection.translate = function(_) {
	      if (!arguments.length) return [ x, y ];
	      x = +_[0];
	      y = +_[1];
	      return reset();
	    };
	    projection.center = function(_) {
	      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
	      λ = _[0] % 360 * d3_radians;
	      φ = _[1] % 360 * d3_radians;
	      return reset();
	    };
	    projection.rotate = function(_) {
	      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
	      δλ = _[0] % 360 * d3_radians;
	      δφ = _[1] % 360 * d3_radians;
	      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
	      return reset();
	    };
	    d3.rebind(projection, projectResample, "precision");
	    function reset() {
	      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
	      var center = project(λ, φ);
	      δx = x - center[0] * k;
	      δy = y + center[1] * k;
	      return invalidate();
	    }
	    function invalidate() {
	      if (stream) stream.valid = false, stream = null;
	      return projection;
	    }
	    return function() {
	      project = projectAt.apply(this, arguments);
	      projection.invert = project.invert && invert;
	      return reset();
	    };
	  }
	  function d3_geo_projectionRadians(stream) {
	    return d3_geo_transformPoint(stream, function(x, y) {
	      stream.point(x * d3_radians, y * d3_radians);
	    });
	  }
	  function d3_geo_equirectangular(λ, φ) {
	    return [ λ, φ ];
	  }
	  (d3.geo.equirectangular = function() {
	    return d3_geo_projection(d3_geo_equirectangular);
	  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
	  d3.geo.rotation = function(rotate) {
	    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
	    function forward(coordinates) {
	      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    }
	    forward.invert = function(coordinates) {
	      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    };
	    return forward;
	  };
	  function d3_geo_identityRotation(λ, φ) {
	    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	  }
	  d3_geo_identityRotation.invert = d3_geo_equirectangular;
	  function d3_geo_rotation(δλ, δφ, δγ) {
	    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
	  }
	  function d3_geo_forwardRotationλ(δλ) {
	    return function(λ, φ) {
	      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	    };
	  }
	  function d3_geo_rotationλ(δλ) {
	    var rotation = d3_geo_forwardRotationλ(δλ);
	    rotation.invert = d3_geo_forwardRotationλ(-δλ);
	    return rotation;
	  }
	  function d3_geo_rotationφγ(δφ, δγ) {
	    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
	    function rotation(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
	      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
	    }
	    rotation.invert = function(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
	      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
	    };
	    return rotation;
	  }
	  d3.geo.circle = function() {
	    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
	    function circle() {
	      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
	      interpolate(null, null, 1, {
	        point: function(x, y) {
	          ring.push(x = rotate(x, y));
	          x[0] *= d3_degrees, x[1] *= d3_degrees;
	        }
	      });
	      return {
	        type: "Polygon",
	        coordinates: [ ring ]
	      };
	    }
	    circle.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return circle;
	    };
	    circle.angle = function(x) {
	      if (!arguments.length) return angle;
	      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
	      return circle;
	    };
	    circle.precision = function(_) {
	      if (!arguments.length) return precision;
	      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
	      return circle;
	    };
	    return circle.angle(90);
	  };
	  function d3_geo_circleInterpolate(radius, precision) {
	    var cr = Math.cos(radius), sr = Math.sin(radius);
	    return function(from, to, direction, listener) {
	      var step = direction * precision;
	      if (from != null) {
	        from = d3_geo_circleAngle(cr, from);
	        to = d3_geo_circleAngle(cr, to);
	        if (direction > 0 ? from < to : from > to) from += direction * τ;
	      } else {
	        from = radius + direction * τ;
	        to = radius - .5 * step;
	      }
	      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
	        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
	      }
	    };
	  }
	  function d3_geo_circleAngle(cr, point) {
	    var a = d3_geo_cartesian(point);
	    a[0] -= cr;
	    d3_geo_cartesianNormalize(a);
	    var angle = d3_acos(-a[1]);
	    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
	  }
	  d3.geo.distance = function(a, b) {
	    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
	    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
	  };
	  d3.geo.graticule = function() {
	    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
	    function graticule() {
	      return {
	        type: "MultiLineString",
	        coordinates: lines()
	      };
	    }
	    function lines() {
	      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
	        return abs(x % DX) > ε;
	      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
	        return abs(y % DY) > ε;
	      }).map(y));
	    }
	    graticule.lines = function() {
	      return lines().map(function(coordinates) {
	        return {
	          type: "LineString",
	          coordinates: coordinates
	        };
	      });
	    };
	    graticule.outline = function() {
	      return {
	        type: "Polygon",
	        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
	      };
	    };
	    graticule.extent = function(_) {
	      if (!arguments.length) return graticule.minorExtent();
	      return graticule.majorExtent(_).minorExtent(_);
	    };
	    graticule.majorExtent = function(_) {
	      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
	      X0 = +_[0][0], X1 = +_[1][0];
	      Y0 = +_[0][1], Y1 = +_[1][1];
	      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.minorExtent = function(_) {
	      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	      x0 = +_[0][0], x1 = +_[1][0];
	      y0 = +_[0][1], y1 = +_[1][1];
	      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.step = function(_) {
	      if (!arguments.length) return graticule.minorStep();
	      return graticule.majorStep(_).minorStep(_);
	    };
	    graticule.majorStep = function(_) {
	      if (!arguments.length) return [ DX, DY ];
	      DX = +_[0], DY = +_[1];
	      return graticule;
	    };
	    graticule.minorStep = function(_) {
	      if (!arguments.length) return [ dx, dy ];
	      dx = +_[0], dy = +_[1];
	      return graticule;
	    };
	    graticule.precision = function(_) {
	      if (!arguments.length) return precision;
	      precision = +_;
	      x = d3_geo_graticuleX(y0, y1, 90);
	      y = d3_geo_graticuleY(x0, x1, precision);
	      X = d3_geo_graticuleX(Y0, Y1, 90);
	      Y = d3_geo_graticuleY(X0, X1, precision);
	      return graticule;
	    };
	    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
	  };
	  function d3_geo_graticuleX(y0, y1, dy) {
	    var y = d3.range(y0, y1 - ε, dy).concat(y1);
	    return function(x) {
	      return y.map(function(y) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_geo_graticuleY(x0, x1, dx) {
	    var x = d3.range(x0, x1 - ε, dx).concat(x1);
	    return function(y) {
	      return x.map(function(x) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_source(d) {
	    return d.source;
	  }
	  function d3_target(d) {
	    return d.target;
	  }
	  d3.geo.greatArc = function() {
	    var source = d3_source, source_, target = d3_target, target_;
	    function greatArc() {
	      return {
	        type: "LineString",
	        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
	      };
	    }
	    greatArc.distance = function() {
	      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
	    };
	    greatArc.source = function(_) {
	      if (!arguments.length) return source;
	      source = _, source_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.target = function(_) {
	      if (!arguments.length) return target;
	      target = _, target_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.precision = function() {
	      return arguments.length ? greatArc : 0;
	    };
	    return greatArc;
	  };
	  d3.geo.interpolate = function(source, target) {
	    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
	  };
	  function d3_geo_interpolate(x0, y0, x1, y1) {
	    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
	    var interpolate = d ? function(t) {
	      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
	      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
	    } : function() {
	      return [ x0 * d3_degrees, y0 * d3_degrees ];
	    };
	    interpolate.distance = d;
	    return interpolate;
	  }
	  d3.geo.length = function(object) {
	    d3_geo_lengthSum = 0;
	    d3.geo.stream(object, d3_geo_length);
	    return d3_geo_lengthSum;
	  };
	  var d3_geo_lengthSum;
	  var d3_geo_length = {
	    sphere: d3_noop,
	    point: d3_noop,
	    lineStart: d3_geo_lengthLineStart,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_lengthLineStart() {
	    var λ0, sinφ0, cosφ0;
	    d3_geo_length.point = function(λ, φ) {
	      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
	      d3_geo_length.point = nextPoint;
	    };
	    d3_geo_length.lineEnd = function() {
	      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
	    };
	    function nextPoint(λ, φ) {
	      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
	      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
	      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
	    }
	  }
	  function d3_geo_azimuthal(scale, angle) {
	    function azimuthal(λ, φ) {
	      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
	      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
	    }
	    azimuthal.invert = function(x, y) {
	      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
	      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
	    };
	    return azimuthal;
	  }
	  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
	    return Math.sqrt(2 / (1 + cosλcosφ));
	  }, function(ρ) {
	    return 2 * Math.asin(ρ / 2);
	  });
	  (d3.geo.azimuthalEqualArea = function() {
	    return d3_geo_projection(d3_geo_azimuthalEqualArea);
	  }).raw = d3_geo_azimuthalEqualArea;
	  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
	    var c = Math.acos(cosλcosφ);
	    return c && c / Math.sin(c);
	  }, d3_identity);
	  (d3.geo.azimuthalEquidistant = function() {
	    return d3_geo_projection(d3_geo_azimuthalEquidistant);
	  }).raw = d3_geo_azimuthalEquidistant;
	  function d3_geo_conicConformal(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), t = function(φ) {
	      return Math.tan(π / 4 + φ / 2);
	    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
	    if (!n) return d3_geo_mercator;
	    function forward(λ, φ) {
	      if (F > 0) {
	        if (φ < -halfπ + ε) φ = -halfπ + ε;
	      } else {
	        if (φ > halfπ - ε) φ = halfπ - ε;
	      }
	      var ρ = F / Math.pow(t(φ), n);
	      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
	      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
	    };
	    return forward;
	  }
	  (d3.geo.conicConformal = function() {
	    return d3_geo_conic(d3_geo_conicConformal);
	  }).raw = d3_geo_conicConformal;
	  function d3_geo_conicEquidistant(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
	    if (abs(n) < ε) return d3_geo_equirectangular;
	    function forward(λ, φ) {
	      var ρ = G - φ;
	      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = G - y;
	      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEquidistant = function() {
	    return d3_geo_conic(d3_geo_conicEquidistant);
	  }).raw = d3_geo_conicEquidistant;
	  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / cosλcosφ;
	  }, Math.atan);
	  (d3.geo.gnomonic = function() {
	    return d3_geo_projection(d3_geo_gnomonic);
	  }).raw = d3_geo_gnomonic;
	  function d3_geo_mercator(λ, φ) {
	    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
	  }
	  d3_geo_mercator.invert = function(x, y) {
	    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
	  };
	  function d3_geo_mercatorProjection(project) {
	    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
	    m.scale = function() {
	      var v = scale.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.translate = function() {
	      var v = translate.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.clipExtent = function(_) {
	      var v = clipExtent.apply(m, arguments);
	      if (v === m) {
	        if (clipAuto = _ == null) {
	          var k = π * scale(), t = translate();
	          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
	        }
	      } else if (clipAuto) {
	        v = null;
	      }
	      return v;
	    };
	    return m.clipExtent(null);
	  }
	  (d3.geo.mercator = function() {
	    return d3_geo_mercatorProjection(d3_geo_mercator);
	  }).raw = d3_geo_mercator;
	  var d3_geo_orthographic = d3_geo_azimuthal(function() {
	    return 1;
	  }, Math.asin);
	  (d3.geo.orthographic = function() {
	    return d3_geo_projection(d3_geo_orthographic);
	  }).raw = d3_geo_orthographic;
	  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / (1 + cosλcosφ);
	  }, function(ρ) {
	    return 2 * Math.atan(ρ);
	  });
	  (d3.geo.stereographic = function() {
	    return d3_geo_projection(d3_geo_stereographic);
	  }).raw = d3_geo_stereographic;
	  function d3_geo_transverseMercator(λ, φ) {
	    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
	  }
	  d3_geo_transverseMercator.invert = function(x, y) {
	    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
	  };
	  (d3.geo.transverseMercator = function() {
	    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
	    projection.center = function(_) {
	      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
	    };
	    projection.rotate = function(_) {
	      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
	      [ _[0], _[1], _[2] - 90 ]);
	    };
	    return rotate([ 0, 0, 90 ]);
	  }).raw = d3_geo_transverseMercator;
	  d3.geom = {};
	  function d3_geom_pointX(d) {
	    return d[0];
	  }
	  function d3_geom_pointY(d) {
	    return d[1];
	  }
	  d3.geom.hull = function(vertices) {
	    var x = d3_geom_pointX, y = d3_geom_pointY;
	    if (arguments.length) return hull(vertices);
	    function hull(data) {
	      if (data.length < 3) return [];
	      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
	      for (i = 0; i < n; i++) {
	        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
	      }
	      points.sort(d3_geom_hullOrder);
	      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
	      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
	      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
	      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
	      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
	      return polygon;
	    }
	    hull.x = function(_) {
	      return arguments.length ? (x = _, hull) : x;
	    };
	    hull.y = function(_) {
	      return arguments.length ? (y = _, hull) : y;
	    };
	    return hull;
	  };
	  function d3_geom_hullUpper(points) {
	    var n = points.length, hull = [ 0, 1 ], hs = 2;
	    for (var i = 2; i < n; i++) {
	      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
	      hull[hs++] = i;
	    }
	    return hull.slice(0, hs);
	  }
	  function d3_geom_hullOrder(a, b) {
	    return a[0] - b[0] || a[1] - b[1];
	  }
	  d3.geom.polygon = function(coordinates) {
	    d3_subclass(coordinates, d3_geom_polygonPrototype);
	    return coordinates;
	  };
	  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
	  d3_geom_polygonPrototype.area = function() {
	    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      area += a[1] * b[0] - a[0] * b[1];
	    }
	    return area * .5;
	  };
	  d3_geom_polygonPrototype.centroid = function(k) {
	    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
	    if (!arguments.length) k = -1 / (6 * this.area());
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      c = a[0] * b[1] - b[0] * a[1];
	      x += (a[0] + b[0]) * c;
	      y += (a[1] + b[1]) * c;
	    }
	    return [ x * k, y * k ];
	  };
	  d3_geom_polygonPrototype.clip = function(subject) {
	    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
	    while (++i < n) {
	      input = subject.slice();
	      subject.length = 0;
	      b = this[i];
	      c = input[(m = input.length - closed) - 1];
	      j = -1;
	      while (++j < m) {
	        d = input[j];
	        if (d3_geom_polygonInside(d, a, b)) {
	          if (!d3_geom_polygonInside(c, a, b)) {
	            subject.push(d3_geom_polygonIntersect(c, d, a, b));
	          }
	          subject.push(d);
	        } else if (d3_geom_polygonInside(c, a, b)) {
	          subject.push(d3_geom_polygonIntersect(c, d, a, b));
	        }
	        c = d;
	      }
	      if (closed) subject.push(subject[0]);
	      a = b;
	    }
	    return subject;
	  };
	  function d3_geom_polygonInside(p, a, b) {
	    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
	  }
	  function d3_geom_polygonIntersect(c, d, a, b) {
	    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
	    return [ x1 + ua * x21, y1 + ua * y21 ];
	  }
	  function d3_geom_polygonClosed(coordinates) {
	    var a = coordinates[0], b = coordinates[coordinates.length - 1];
	    return !(a[0] - b[0] || a[1] - b[1]);
	  }
	  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
	  function d3_geom_voronoiBeach() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.edge = this.site = this.circle = null;
	  }
	  function d3_geom_voronoiCreateBeach(site) {
	    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
	    beach.site = site;
	    return beach;
	  }
	  function d3_geom_voronoiDetachBeach(beach) {
	    d3_geom_voronoiDetachCircle(beach);
	    d3_geom_voronoiBeaches.remove(beach);
	    d3_geom_voronoiBeachPool.push(beach);
	    d3_geom_voronoiRedBlackNode(beach);
	  }
	  function d3_geom_voronoiRemoveBeach(beach) {
	    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
	      x: x,
	      y: y
	    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
	    d3_geom_voronoiDetachBeach(beach);
	    var lArc = previous;
	    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
	      previous = lArc.P;
	      disappearing.unshift(lArc);
	      d3_geom_voronoiDetachBeach(lArc);
	      lArc = previous;
	    }
	    disappearing.unshift(lArc);
	    d3_geom_voronoiDetachCircle(lArc);
	    var rArc = next;
	    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
	      next = rArc.N;
	      disappearing.push(rArc);
	      d3_geom_voronoiDetachBeach(rArc);
	      rArc = next;
	    }
	    disappearing.push(rArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var nArcs = disappearing.length, iArc;
	    for (iArc = 1; iArc < nArcs; ++iArc) {
	      rArc = disappearing[iArc];
	      lArc = disappearing[iArc - 1];
	      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	    }
	    lArc = disappearing[0];
	    rArc = disappearing[nArcs - 1];
	    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiAddBeach(site) {
	    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
	    while (node) {
	      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
	      if (dxl > ε) node = node.L; else {
	        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
	        if (dxr > ε) {
	          if (!node.R) {
	            lArc = node;
	            break;
	          }
	          node = node.R;
	        } else {
	          if (dxl > -ε) {
	            lArc = node.P;
	            rArc = node;
	          } else if (dxr > -ε) {
	            lArc = node;
	            rArc = node.N;
	          } else {
	            lArc = rArc = node;
	          }
	          break;
	        }
	      }
	    }
	    var newArc = d3_geom_voronoiCreateBeach(site);
	    d3_geom_voronoiBeaches.insert(lArc, newArc);
	    if (!lArc && !rArc) return;
	    if (lArc === rArc) {
	      d3_geom_voronoiDetachCircle(lArc);
	      rArc = d3_geom_voronoiCreateBeach(lArc.site);
	      d3_geom_voronoiBeaches.insert(newArc, rArc);
	      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      d3_geom_voronoiAttachCircle(lArc);
	      d3_geom_voronoiAttachCircle(rArc);
	      return;
	    }
	    if (!rArc) {
	      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      return;
	    }
	    d3_geom_voronoiDetachCircle(lArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
	      x: (cy * hb - by * hc) / d + ax,
	      y: (bx * hc - cx * hb) / d + ay
	    };
	    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
	    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
	    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
	    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
	    if (!pby2) return rfocx;
	    var lArc = arc.P;
	    if (!lArc) return -Infinity;
	    site = lArc.site;
	    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
	    if (!plby2) return lfocx;
	    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
	    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
	    return (rfocx + lfocx) / 2;
	  }
	  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
	    var rArc = arc.N;
	    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
	    var site = arc.site;
	    return site.y === directrix ? site.x : Infinity;
	  }
	  function d3_geom_voronoiCell(site) {
	    this.site = site;
	    this.edges = [];
	  }
	  d3_geom_voronoiCell.prototype.prepare = function() {
	    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
	    while (iHalfEdge--) {
	      edge = halfEdges[iHalfEdge].edge;
	      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
	    }
	    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
	    return halfEdges.length;
	  };
	  function d3_geom_voronoiCloseCells(extent) {
	    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
	    while (iCell--) {
	      cell = cells[iCell];
	      if (!cell || !cell.prepare()) continue;
	      halfEdges = cell.edges;
	      nHalfEdges = halfEdges.length;
	      iHalfEdge = 0;
	      while (iHalfEdge < nHalfEdges) {
	        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
	        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
	        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
	          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
	            x: x0,
	            y: abs(x2 - x0) < ε ? y2 : y1
	          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
	            x: abs(y2 - y1) < ε ? x2 : x1,
	            y: y1
	          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
	            x: x1,
	            y: abs(x2 - x1) < ε ? y2 : y0
	          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
	            x: abs(y2 - y0) < ε ? x2 : x0,
	            y: y0
	          } : null), cell.site, null));
	          ++nHalfEdges;
	        }
	      }
	    }
	  }
	  function d3_geom_voronoiHalfEdgeOrder(a, b) {
	    return b.angle - a.angle;
	  }
	  function d3_geom_voronoiCircle() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.x = this.y = this.arc = this.site = this.cy = null;
	  }
	  function d3_geom_voronoiAttachCircle(arc) {
	    var lArc = arc.P, rArc = arc.N;
	    if (!lArc || !rArc) return;
	    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
	    if (lSite === rSite) return;
	    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
	    var d = 2 * (ax * cy - ay * cx);
	    if (d >= -ε2) return;
	    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
	    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
	    circle.arc = arc;
	    circle.site = cSite;
	    circle.x = x + bx;
	    circle.y = cy + Math.sqrt(x * x + y * y);
	    circle.cy = cy;
	    arc.circle = circle;
	    var before = null, node = d3_geom_voronoiCircles._;
	    while (node) {
	      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
	        if (node.L) node = node.L; else {
	          before = node.P;
	          break;
	        }
	      } else {
	        if (node.R) node = node.R; else {
	          before = node;
	          break;
	        }
	      }
	    }
	    d3_geom_voronoiCircles.insert(before, circle);
	    if (!before) d3_geom_voronoiFirstCircle = circle;
	  }
	  function d3_geom_voronoiDetachCircle(arc) {
	    var circle = arc.circle;
	    if (circle) {
	      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
	      d3_geom_voronoiCircles.remove(circle);
	      d3_geom_voronoiCirclePool.push(circle);
	      d3_geom_voronoiRedBlackNode(circle);
	      arc.circle = null;
	    }
	  }
	  function d3_geom_voronoiClipEdges(extent) {
	    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
	    while (i--) {
	      e = edges[i];
	      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
	        e.a = e.b = null;
	        edges.splice(i, 1);
	      }
	    }
	  }
	  function d3_geom_voronoiConnectEdge(edge, extent) {
	    var vb = edge.b;
	    if (vb) return true;
	    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
	    if (ry === ly) {
	      if (fx < x0 || fx >= x1) return;
	      if (lx > rx) {
	        if (!va) va = {
	          x: fx,
	          y: y0
	        }; else if (va.y >= y1) return;
	        vb = {
	          x: fx,
	          y: y1
	        };
	      } else {
	        if (!va) va = {
	          x: fx,
	          y: y1
	        }; else if (va.y < y0) return;
	        vb = {
	          x: fx,
	          y: y0
	        };
	      }
	    } else {
	      fm = (lx - rx) / (ry - ly);
	      fb = fy - fm * fx;
	      if (fm < -1 || fm > 1) {
	        if (lx > rx) {
	          if (!va) va = {
	            x: (y0 - fb) / fm,
	            y: y0
	          }; else if (va.y >= y1) return;
	          vb = {
	            x: (y1 - fb) / fm,
	            y: y1
	          };
	        } else {
	          if (!va) va = {
	            x: (y1 - fb) / fm,
	            y: y1
	          }; else if (va.y < y0) return;
	          vb = {
	            x: (y0 - fb) / fm,
	            y: y0
	          };
	        }
	      } else {
	        if (ly < ry) {
	          if (!va) va = {
	            x: x0,
	            y: fm * x0 + fb
	          }; else if (va.x >= x1) return;
	          vb = {
	            x: x1,
	            y: fm * x1 + fb
	          };
	        } else {
	          if (!va) va = {
	            x: x1,
	            y: fm * x1 + fb
	          }; else if (va.x < x0) return;
	          vb = {
	            x: x0,
	            y: fm * x0 + fb
	          };
	        }
	      }
	    }
	    edge.a = va;
	    edge.b = vb;
	    return true;
	  }
	  function d3_geom_voronoiEdge(lSite, rSite) {
	    this.l = lSite;
	    this.r = rSite;
	    this.a = this.b = null;
	  }
	  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, rSite);
	    d3_geom_voronoiEdges.push(edge);
	    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
	    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
	    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
	    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
	    return edge;
	  }
	  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, null);
	    edge.a = va;
	    edge.b = vb;
	    d3_geom_voronoiEdges.push(edge);
	    return edge;
	  }
	  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
	    if (!edge.a && !edge.b) {
	      edge.a = vertex;
	      edge.l = lSite;
	      edge.r = rSite;
	    } else if (edge.l === rSite) {
	      edge.b = vertex;
	    } else {
	      edge.a = vertex;
	    }
	  }
	  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
	    var va = edge.a, vb = edge.b;
	    this.edge = edge;
	    this.site = lSite;
	    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
	  }
	  d3_geom_voronoiHalfEdge.prototype = {
	    start: function() {
	      return this.edge.l === this.site ? this.edge.a : this.edge.b;
	    },
	    end: function() {
	      return this.edge.l === this.site ? this.edge.b : this.edge.a;
	    }
	  };
	  function d3_geom_voronoiRedBlackTree() {
	    this._ = null;
	  }
	  function d3_geom_voronoiRedBlackNode(node) {
	    node.U = node.C = node.L = node.R = node.P = node.N = null;
	  }
	  d3_geom_voronoiRedBlackTree.prototype = {
	    insert: function(after, node) {
	      var parent, grandpa, uncle;
	      if (after) {
	        node.P = after;
	        node.N = after.N;
	        if (after.N) after.N.P = node;
	        after.N = node;
	        if (after.R) {
	          after = after.R;
	          while (after.L) after = after.L;
	          after.L = node;
	        } else {
	          after.R = node;
	        }
	        parent = after;
	      } else if (this._) {
	        after = d3_geom_voronoiRedBlackFirst(this._);
	        node.P = null;
	        node.N = after;
	        after.P = after.L = node;
	        parent = after;
	      } else {
	        node.P = node.N = null;
	        this._ = node;
	        parent = null;
	      }
	      node.L = node.R = null;
	      node.U = parent;
	      node.C = true;
	      after = node;
	      while (parent && parent.C) {
	        grandpa = parent.U;
	        if (parent === grandpa.L) {
	          uncle = grandpa.R;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.R) {
	              d3_geom_voronoiRedBlackRotateLeft(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
	          }
	        } else {
	          uncle = grandpa.L;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.L) {
	              d3_geom_voronoiRedBlackRotateRight(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
	          }
	        }
	        parent = after.U;
	      }
	      this._.C = false;
	    },
	    remove: function(node) {
	      if (node.N) node.N.P = node.P;
	      if (node.P) node.P.N = node.N;
	      node.N = node.P = null;
	      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
	      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
	      if (parent) {
	        if (parent.L === node) parent.L = next; else parent.R = next;
	      } else {
	        this._ = next;
	      }
	      if (left && right) {
	        red = next.C;
	        next.C = node.C;
	        next.L = left;
	        left.U = next;
	        if (next !== right) {
	          parent = next.U;
	          next.U = node.U;
	          node = next.R;
	          parent.L = node;
	          next.R = right;
	          right.U = next;
	        } else {
	          next.U = parent;
	          parent = next;
	          node = next.R;
	        }
	      } else {
	        red = node.C;
	        node = next;
	      }
	      if (node) node.U = parent;
	      if (red) return;
	      if (node && node.C) {
	        node.C = false;
	        return;
	      }
	      do {
	        if (node === this._) break;
	        if (node === parent.L) {
	          sibling = parent.R;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            sibling = parent.R;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.R || !sibling.R.C) {
	              sibling.L.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateRight(this, sibling);
	              sibling = parent.R;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.R.C = false;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            node = this._;
	            break;
	          }
	        } else {
	          sibling = parent.L;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            sibling = parent.L;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.L || !sibling.L.C) {
	              sibling.R.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
	              sibling = parent.L;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.L.C = false;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            node = this._;
	            break;
	          }
	        }
	        sibling.C = true;
	        node = parent;
	        parent = parent.U;
	      } while (!node.C);
	      if (node) node.C = false;
	    }
	  };
	  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
	    var p = node, q = node.R, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.R = q.L;
	    if (p.R) p.R.U = p;
	    q.L = p;
	  }
	  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
	    var p = node, q = node.L, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.L = q.R;
	    if (p.L) p.L.U = p;
	    q.R = p;
	  }
	  function d3_geom_voronoiRedBlackFirst(node) {
	    while (node.L) node = node.L;
	    return node;
	  }
	  function d3_geom_voronoi(sites, bbox) {
	    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
	    d3_geom_voronoiEdges = [];
	    d3_geom_voronoiCells = new Array(sites.length);
	    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
	    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
	    while (true) {
	      circle = d3_geom_voronoiFirstCircle;
	      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
	        if (site.x !== x0 || site.y !== y0) {
	          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
	          d3_geom_voronoiAddBeach(site);
	          x0 = site.x, y0 = site.y;
	        }
	        site = sites.pop();
	      } else if (circle) {
	        d3_geom_voronoiRemoveBeach(circle.arc);
	      } else {
	        break;
	      }
	    }
	    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
	    var diagram = {
	      cells: d3_geom_voronoiCells,
	      edges: d3_geom_voronoiEdges
	    };
	    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
	    return diagram;
	  }
	  function d3_geom_voronoiVertexOrder(a, b) {
	    return b.y - a.y || b.x - a.x;
	  }
	  d3.geom.voronoi = function(points) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
	    if (points) return voronoi(points);
	    function voronoi(data) {
	      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
	      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
	        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
	          var s = e.start();
	          return [ s.x, s.y ];
	        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
	        polygon.point = data[i];
	      });
	      return polygons;
	    }
	    function sites(data) {
	      return data.map(function(d, i) {
	        return {
	          x: Math.round(fx(d, i) / ε) * ε,
	          y: Math.round(fy(d, i) / ε) * ε,
	          i: i
	        };
	      });
	    }
	    voronoi.links = function(data) {
	      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
	        return edge.l && edge.r;
	      }).map(function(edge) {
	        return {
	          source: data[edge.l.i],
	          target: data[edge.r.i]
	        };
	      });
	    };
	    voronoi.triangles = function(data) {
	      var triangles = [];
	      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
	        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
	        while (++j < m) {
	          e0 = e1;
	          s0 = s1;
	          e1 = edges[j].edge;
	          s1 = e1.l === site ? e1.r : e1.l;
	          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
	            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
	          }
	        }
	      });
	      return triangles;
	    };
	    voronoi.x = function(_) {
	      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
	    };
	    voronoi.y = function(_) {
	      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
	    };
	    voronoi.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
	      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
	      return voronoi;
	    };
	    voronoi.size = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
	      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
	    };
	    return voronoi;
	  };
	  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
	  function d3_geom_voronoiTriangleArea(a, b, c) {
	    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
	  }
	  d3.geom.delaunay = function(vertices) {
	    return d3.geom.voronoi().triangles(vertices);
	  };
	  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
	    if (compat = arguments.length) {
	      x = d3_geom_quadtreeCompatX;
	      y = d3_geom_quadtreeCompatY;
	      if (compat === 3) {
	        y2 = y1;
	        x2 = x1;
	        y1 = x1 = 0;
	      }
	      return quadtree(points);
	    }
	    function quadtree(data) {
	      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
	      if (x1 != null) {
	        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
	      } else {
	        x2_ = y2_ = -(x1_ = y1_ = Infinity);
	        xs = [], ys = [];
	        n = data.length;
	        if (compat) for (i = 0; i < n; ++i) {
	          d = data[i];
	          if (d.x < x1_) x1_ = d.x;
	          if (d.y < y1_) y1_ = d.y;
	          if (d.x > x2_) x2_ = d.x;
	          if (d.y > y2_) y2_ = d.y;
	          xs.push(d.x);
	          ys.push(d.y);
	        } else for (i = 0; i < n; ++i) {
	          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
	          if (x_ < x1_) x1_ = x_;
	          if (y_ < y1_) y1_ = y_;
	          if (x_ > x2_) x2_ = x_;
	          if (y_ > y2_) y2_ = y_;
	          xs.push(x_);
	          ys.push(y_);
	        }
	      }
	      var dx = x2_ - x1_, dy = y2_ - y1_;
	      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
	      function insert(n, d, x, y, x1, y1, x2, y2) {
	        if (isNaN(x) || isNaN(y)) return;
	        if (n.leaf) {
	          var nx = n.x, ny = n.y;
	          if (nx != null) {
	            if (abs(nx - x) + abs(ny - y) < .01) {
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            } else {
	              var nPoint = n.point;
	              n.x = n.y = n.point = null;
	              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            }
	          } else {
	            n.x = x, n.y = y, n.point = d;
	          }
	        } else {
	          insertChild(n, d, x, y, x1, y1, x2, y2);
	        }
	      }
	      function insertChild(n, d, x, y, x1, y1, x2, y2) {
	        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
	        n.leaf = false;
	        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
	        if (right) x1 = xm; else x2 = xm;
	        if (below) y1 = ym; else y2 = ym;
	        insert(n, d, x, y, x1, y1, x2, y2);
	      }
	      var root = d3_geom_quadtreeNode();
	      root.add = function(d) {
	        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
	      };
	      root.visit = function(f) {
	        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
	      };
	      root.find = function(point) {
	        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
	      };
	      i = -1;
	      if (x1 == null) {
	        while (++i < n) {
	          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
	        }
	        --i;
	      } else data.forEach(root.add);
	      xs = ys = data = d = null;
	      return root;
	    }
	    quadtree.x = function(_) {
	      return arguments.length ? (x = _, quadtree) : x;
	    };
	    quadtree.y = function(_) {
	      return arguments.length ? (y = _, quadtree) : y;
	    };
	    quadtree.extent = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
	      y2 = +_[1][1];
	      return quadtree;
	    };
	    quadtree.size = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
	      return quadtree;
	    };
	    return quadtree;
	  };
	  function d3_geom_quadtreeCompatX(d) {
	    return d.x;
	  }
	  function d3_geom_quadtreeCompatY(d) {
	    return d.y;
	  }
	  function d3_geom_quadtreeNode() {
	    return {
	      leaf: true,
	      nodes: [],
	      point: null,
	      x: null,
	      y: null
	    };
	  }
	  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
	    if (!f(node, x1, y1, x2, y2)) {
	      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
	      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
	      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
	      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
	      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
	    }
	  }
	  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
	    var minDistance2 = Infinity, closestPoint;
	    (function find(node, x1, y1, x2, y2) {
	      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
	      if (point = node.point) {
	        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
	        if (distance2 < minDistance2) {
	          var distance = Math.sqrt(minDistance2 = distance2);
	          x0 = x - distance, y0 = y - distance;
	          x3 = x + distance, y3 = y + distance;
	          closestPoint = point;
	        }
	      }
	      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
	      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
	        if (node = children[i & 3]) switch (i & 3) {
	         case 0:
	          find(node, x1, y1, xm, ym);
	          break;

	         case 1:
	          find(node, xm, y1, x2, ym);
	          break;

	         case 2:
	          find(node, x1, ym, xm, y2);
	          break;

	         case 3:
	          find(node, xm, ym, x2, y2);
	          break;
	        }
	      }
	    })(root, x0, y0, x3, y3);
	    return closestPoint;
	  }
	  d3.interpolateRgb = d3_interpolateRgb;
	  function d3_interpolateRgb(a, b) {
	    a = d3.rgb(a);
	    b = d3.rgb(b);
	    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
	    return function(t) {
	      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
	    };
	  }
	  d3.interpolateObject = d3_interpolateObject;
	  function d3_interpolateObject(a, b) {
	    var i = {}, c = {}, k;
	    for (k in a) {
	      if (k in b) {
	        i[k] = d3_interpolate(a[k], b[k]);
	      } else {
	        c[k] = a[k];
	      }
	    }
	    for (k in b) {
	      if (!(k in a)) {
	        c[k] = b[k];
	      }
	    }
	    return function(t) {
	      for (k in i) c[k] = i[k](t);
	      return c;
	    };
	  }
	  d3.interpolateNumber = d3_interpolateNumber;
	  function d3_interpolateNumber(a, b) {
	    a = +a, b = +b;
	    return function(t) {
	      return a * (1 - t) + b * t;
	    };
	  }
	  d3.interpolateString = d3_interpolateString;
	  function d3_interpolateString(a, b) {
	    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
	    a = a + "", b = b + "";
	    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
	      if ((bs = bm.index) > bi) {
	        bs = b.slice(bi, bs);
	        if (s[i]) s[i] += bs; else s[++i] = bs;
	      }
	      if ((am = am[0]) === (bm = bm[0])) {
	        if (s[i]) s[i] += bm; else s[++i] = bm;
	      } else {
	        s[++i] = null;
	        q.push({
	          i: i,
	          x: d3_interpolateNumber(am, bm)
	        });
	      }
	      bi = d3_interpolate_numberB.lastIndex;
	    }
	    if (bi < b.length) {
	      bs = b.slice(bi);
	      if (s[i]) s[i] += bs; else s[++i] = bs;
	    }
	    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
	      return b(t) + "";
	    }) : function() {
	      return b;
	    } : (b = q.length, function(t) {
	      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    });
	  }
	  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
	  d3.interpolate = d3_interpolate;
	  function d3_interpolate(a, b) {
	    var i = d3.interpolators.length, f;
	    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
	    return f;
	  }
	  d3.interpolators = [ function(a, b) {
	    var t = typeof b;
	    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
	  } ];
	  d3.interpolateArray = d3_interpolateArray;
	  function d3_interpolateArray(a, b) {
	    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
	    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
	    for (;i < na; ++i) c[i] = a[i];
	    for (;i < nb; ++i) c[i] = b[i];
	    return function(t) {
	      for (i = 0; i < n0; ++i) c[i] = x[i](t);
	      return c;
	    };
	  }
	  var d3_ease_default = function() {
	    return d3_identity;
	  };
	  var d3_ease = d3.map({
	    linear: d3_ease_default,
	    poly: d3_ease_poly,
	    quad: function() {
	      return d3_ease_quad;
	    },
	    cubic: function() {
	      return d3_ease_cubic;
	    },
	    sin: function() {
	      return d3_ease_sin;
	    },
	    exp: function() {
	      return d3_ease_exp;
	    },
	    circle: function() {
	      return d3_ease_circle;
	    },
	    elastic: d3_ease_elastic,
	    back: d3_ease_back,
	    bounce: function() {
	      return d3_ease_bounce;
	    }
	  });
	  var d3_ease_mode = d3.map({
	    "in": d3_identity,
	    out: d3_ease_reverse,
	    "in-out": d3_ease_reflect,
	    "out-in": function(f) {
	      return d3_ease_reflect(d3_ease_reverse(f));
	    }
	  });
	  d3.ease = function(name) {
	    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
	    t = d3_ease.get(t) || d3_ease_default;
	    m = d3_ease_mode.get(m) || d3_identity;
	    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
	  };
	  function d3_ease_clamp(f) {
	    return function(t) {
	      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
	    };
	  }
	  function d3_ease_reverse(f) {
	    return function(t) {
	      return 1 - f(1 - t);
	    };
	  }
	  function d3_ease_reflect(f) {
	    return function(t) {
	      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
	    };
	  }
	  function d3_ease_quad(t) {
	    return t * t;
	  }
	  function d3_ease_cubic(t) {
	    return t * t * t;
	  }
	  function d3_ease_cubicInOut(t) {
	    if (t <= 0) return 0;
	    if (t >= 1) return 1;
	    var t2 = t * t, t3 = t2 * t;
	    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
	  }
	  function d3_ease_poly(e) {
	    return function(t) {
	      return Math.pow(t, e);
	    };
	  }
	  function d3_ease_sin(t) {
	    return 1 - Math.cos(t * halfπ);
	  }
	  function d3_ease_exp(t) {
	    return Math.pow(2, 10 * (t - 1));
	  }
	  function d3_ease_circle(t) {
	    return 1 - Math.sqrt(1 - t * t);
	  }
	  function d3_ease_elastic(a, p) {
	    var s;
	    if (arguments.length < 2) p = .45;
	    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
	    return function(t) {
	      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
	    };
	  }
	  function d3_ease_back(s) {
	    if (!s) s = 1.70158;
	    return function(t) {
	      return t * t * ((s + 1) * t - s);
	    };
	  }
	  function d3_ease_bounce(t) {
	    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
	  }
	  d3.interpolateHcl = d3_interpolateHcl;
	  function d3_interpolateHcl(a, b) {
	    a = d3.hcl(a);
	    b = d3.hcl(b);
	    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
	    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateHsl = d3_interpolateHsl;
	  function d3_interpolateHsl(a, b) {
	    a = d3.hsl(a);
	    b = d3.hsl(b);
	    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
	    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateLab = d3_interpolateLab;
	  function d3_interpolateLab(a, b) {
	    a = d3.lab(a);
	    b = d3.lab(b);
	    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
	    return function(t) {
	      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
	    };
	  }
	  d3.interpolateRound = d3_interpolateRound;
	  function d3_interpolateRound(a, b) {
	    b -= a;
	    return function(t) {
	      return Math.round(a + b * t);
	    };
	  }
	  d3.transform = function(string) {
	    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
	    return (d3.transform = function(string) {
	      if (string != null) {
	        g.setAttribute("transform", string);
	        var t = g.transform.baseVal.consolidate();
	      }
	      return new d3_transform(t ? t.matrix : d3_transformIdentity);
	    })(string);
	  };
	  function d3_transform(m) {
	    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
	    if (r0[0] * r1[1] < r1[0] * r0[1]) {
	      r0[0] *= -1;
	      r0[1] *= -1;
	      kx *= -1;
	      kz *= -1;
	    }
	    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
	    this.translate = [ m.e, m.f ];
	    this.scale = [ kx, ky ];
	    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
	  }
	  d3_transform.prototype.toString = function() {
	    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
	  };
	  function d3_transformDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1];
	  }
	  function d3_transformNormalize(a) {
	    var k = Math.sqrt(d3_transformDot(a, a));
	    if (k) {
	      a[0] /= k;
	      a[1] /= k;
	    }
	    return k;
	  }
	  function d3_transformCombine(a, b, k) {
	    a[0] += k * b[0];
	    a[1] += k * b[1];
	    return a;
	  }
	  var d3_transformIdentity = {
	    a: 1,
	    b: 0,
	    c: 0,
	    d: 1,
	    e: 0,
	    f: 0
	  };
	  d3.interpolateTransform = d3_interpolateTransform;
	  function d3_interpolateTransformPop(s) {
	    return s.length ? s.pop() + "," : "";
	  }
	  function d3_interpolateTranslate(ta, tb, s, q) {
	    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
	      var i = s.push("translate(", null, ",", null, ")");
	      q.push({
	        i: i - 4,
	        x: d3_interpolateNumber(ta[0], tb[0])
	      }, {
	        i: i - 2,
	        x: d3_interpolateNumber(ta[1], tb[1])
	      });
	    } else if (tb[0] || tb[1]) {
	      s.push("translate(" + tb + ")");
	    }
	  }
	  function d3_interpolateRotate(ra, rb, s, q) {
	    if (ra !== rb) {
	      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
	      q.push({
	        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
	        x: d3_interpolateNumber(ra, rb)
	      });
	    } else if (rb) {
	      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
	    }
	  }
	  function d3_interpolateSkew(wa, wb, s, q) {
	    if (wa !== wb) {
	      q.push({
	        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
	        x: d3_interpolateNumber(wa, wb)
	      });
	    } else if (wb) {
	      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
	    }
	  }
	  function d3_interpolateScale(ka, kb, s, q) {
	    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
	      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
	      q.push({
	        i: i - 4,
	        x: d3_interpolateNumber(ka[0], kb[0])
	      }, {
	        i: i - 2,
	        x: d3_interpolateNumber(ka[1], kb[1])
	      });
	    } else if (kb[0] !== 1 || kb[1] !== 1) {
	      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
	    }
	  }
	  function d3_interpolateTransform(a, b) {
	    var s = [], q = [];
	    a = d3.transform(a), b = d3.transform(b);
	    d3_interpolateTranslate(a.translate, b.translate, s, q);
	    d3_interpolateRotate(a.rotate, b.rotate, s, q);
	    d3_interpolateSkew(a.skew, b.skew, s, q);
	    d3_interpolateScale(a.scale, b.scale, s, q);
	    a = b = null;
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  }
	  function d3_uninterpolateNumber(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return (x - a) / b;
	    };
	  }
	  function d3_uninterpolateClamp(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return Math.max(0, Math.min(1, (x - a) / b));
	    };
	  }
	  d3.layout = {};
	  d3.layout.bundle = function() {
	    return function(links) {
	      var paths = [], i = -1, n = links.length;
	      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
	      return paths;
	    };
	  };
	  function d3_layout_bundlePath(link) {
	    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
	    while (start !== lca) {
	      start = start.parent;
	      points.push(start);
	    }
	    var k = points.length;
	    while (end !== lca) {
	      points.splice(k, 0, end);
	      end = end.parent;
	    }
	    return points;
	  }
	  function d3_layout_bundleAncestors(node) {
	    var ancestors = [], parent = node.parent;
	    while (parent != null) {
	      ancestors.push(node);
	      node = parent;
	      parent = parent.parent;
	    }
	    ancestors.push(node);
	    return ancestors;
	  }
	  function d3_layout_bundleLeastCommonAncestor(a, b) {
	    if (a === b) return a;
	    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
	    while (aNode === bNode) {
	      sharedNode = aNode;
	      aNode = aNodes.pop();
	      bNode = bNodes.pop();
	    }
	    return sharedNode;
	  }
	  d3.layout.chord = function() {
	    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
	    function relayout() {
	      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
	      chords = [];
	      groups = [];
	      k = 0, i = -1;
	      while (++i < n) {
	        x = 0, j = -1;
	        while (++j < n) {
	          x += matrix[i][j];
	        }
	        groupSums.push(x);
	        subgroupIndex.push(d3.range(n));
	        k += x;
	      }
	      if (sortGroups) {
	        groupIndex.sort(function(a, b) {
	          return sortGroups(groupSums[a], groupSums[b]);
	        });
	      }
	      if (sortSubgroups) {
	        subgroupIndex.forEach(function(d, i) {
	          d.sort(function(a, b) {
	            return sortSubgroups(matrix[i][a], matrix[i][b]);
	          });
	        });
	      }
	      k = (τ - padding * n) / k;
	      x = 0, i = -1;
	      while (++i < n) {
	        x0 = x, j = -1;
	        while (++j < n) {
	          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
	          subgroups[di + "-" + dj] = {
	            index: di,
	            subindex: dj,
	            startAngle: a0,
	            endAngle: a1,
	            value: v
	          };
	        }
	        groups[di] = {
	          index: di,
	          startAngle: x0,
	          endAngle: x,
	          value: groupSums[di]
	        };
	        x += padding;
	      }
	      i = -1;
	      while (++i < n) {
	        j = i - 1;
	        while (++j < n) {
	          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
	          if (source.value || target.value) {
	            chords.push(source.value < target.value ? {
	              source: target,
	              target: source
	            } : {
	              source: source,
	              target: target
	            });
	          }
	        }
	      }
	      if (sortChords) resort();
	    }
	    function resort() {
	      chords.sort(function(a, b) {
	        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
	      });
	    }
	    chord.matrix = function(x) {
	      if (!arguments.length) return matrix;
	      n = (matrix = x) && matrix.length;
	      chords = groups = null;
	      return chord;
	    };
	    chord.padding = function(x) {
	      if (!arguments.length) return padding;
	      padding = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortGroups = function(x) {
	      if (!arguments.length) return sortGroups;
	      sortGroups = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortSubgroups = function(x) {
	      if (!arguments.length) return sortSubgroups;
	      sortSubgroups = x;
	      chords = null;
	      return chord;
	    };
	    chord.sortChords = function(x) {
	      if (!arguments.length) return sortChords;
	      sortChords = x;
	      if (chords) resort();
	      return chord;
	    };
	    chord.chords = function() {
	      if (!chords) relayout();
	      return chords;
	    };
	    chord.groups = function() {
	      if (!groups) relayout();
	      return groups;
	    };
	    return chord;
	  };
	  d3.layout.force = function() {
	    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
	    function repulse(node) {
	      return function(quad, x1, _, x2) {
	        if (quad.point !== node) {
	          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
	          if (dw * dw / theta2 < dn) {
	            if (dn < chargeDistance2) {
	              var k = quad.charge / dn;
	              node.px -= dx * k;
	              node.py -= dy * k;
	            }
	            return true;
	          }
	          if (quad.point && dn && dn < chargeDistance2) {
	            var k = quad.pointCharge / dn;
	            node.px -= dx * k;
	            node.py -= dy * k;
	          }
	        }
	        return !quad.charge;
	      };
	    }
	    force.tick = function() {
	      if ((alpha *= .99) < .005) {
	        timer = null;
	        event.end({
	          type: "end",
	          alpha: alpha = 0
	        });
	        return true;
	      }
	      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        s = o.source;
	        t = o.target;
	        x = t.x - s.x;
	        y = t.y - s.y;
	        if (l = x * x + y * y) {
	          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
	          x *= l;
	          y *= l;
	          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
	          t.y -= y * k;
	          s.x += x * (k = 1 - k);
	          s.y += y * k;
	        }
	      }
	      if (k = alpha * gravity) {
	        x = size[0] / 2;
	        y = size[1] / 2;
	        i = -1;
	        if (k) while (++i < n) {
	          o = nodes[i];
	          o.x += (x - o.x) * k;
	          o.y += (y - o.y) * k;
	        }
	      }
	      if (charge) {
	        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
	        i = -1;
	        while (++i < n) {
	          if (!(o = nodes[i]).fixed) {
	            q.visit(repulse(o));
	          }
	        }
	      }
	      i = -1;
	      while (++i < n) {
	        o = nodes[i];
	        if (o.fixed) {
	          o.x = o.px;
	          o.y = o.py;
	        } else {
	          o.x -= (o.px - (o.px = o.x)) * friction;
	          o.y -= (o.py - (o.py = o.y)) * friction;
	        }
	      }
	      event.tick({
	        type: "tick",
	        alpha: alpha
	      });
	    };
	    force.nodes = function(x) {
	      if (!arguments.length) return nodes;
	      nodes = x;
	      return force;
	    };
	    force.links = function(x) {
	      if (!arguments.length) return links;
	      links = x;
	      return force;
	    };
	    force.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return force;
	    };
	    force.linkDistance = function(x) {
	      if (!arguments.length) return linkDistance;
	      linkDistance = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.distance = force.linkDistance;
	    force.linkStrength = function(x) {
	      if (!arguments.length) return linkStrength;
	      linkStrength = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.friction = function(x) {
	      if (!arguments.length) return friction;
	      friction = +x;
	      return force;
	    };
	    force.charge = function(x) {
	      if (!arguments.length) return charge;
	      charge = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.chargeDistance = function(x) {
	      if (!arguments.length) return Math.sqrt(chargeDistance2);
	      chargeDistance2 = x * x;
	      return force;
	    };
	    force.gravity = function(x) {
	      if (!arguments.length) return gravity;
	      gravity = +x;
	      return force;
	    };
	    force.theta = function(x) {
	      if (!arguments.length) return Math.sqrt(theta2);
	      theta2 = x * x;
	      return force;
	    };
	    force.alpha = function(x) {
	      if (!arguments.length) return alpha;
	      x = +x;
	      if (alpha) {
	        if (x > 0) {
	          alpha = x;
	        } else {
	          timer.c = null, timer.t = NaN, timer = null;
	          event.end({
	            type: "end",
	            alpha: alpha = 0
	          });
	        }
	      } else if (x > 0) {
	        event.start({
	          type: "start",
	          alpha: alpha = x
	        });
	        timer = d3_timer(force.tick);
	      }
	      return force;
	    };
	    force.start = function() {
	      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
	      for (i = 0; i < n; ++i) {
	        (o = nodes[i]).index = i;
	        o.weight = 0;
	      }
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        if (typeof o.source == "number") o.source = nodes[o.source];
	        if (typeof o.target == "number") o.target = nodes[o.target];
	        ++o.source.weight;
	        ++o.target.weight;
	      }
	      for (i = 0; i < n; ++i) {
	        o = nodes[i];
	        if (isNaN(o.x)) o.x = position("x", w);
	        if (isNaN(o.y)) o.y = position("y", h);
	        if (isNaN(o.px)) o.px = o.x;
	        if (isNaN(o.py)) o.py = o.y;
	      }
	      distances = [];
	      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
	      strengths = [];
	      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
	      charges = [];
	      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
	      function position(dimension, size) {
	        if (!neighbors) {
	          neighbors = new Array(n);
	          for (j = 0; j < n; ++j) {
	            neighbors[j] = [];
	          }
	          for (j = 0; j < m; ++j) {
	            var o = links[j];
	            neighbors[o.source.index].push(o.target);
	            neighbors[o.target.index].push(o.source);
	          }
	        }
	        var candidates = neighbors[i], j = -1, l = candidates.length, x;
	        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
	        return Math.random() * size;
	      }
	      return force.resume();
	    };
	    force.resume = function() {
	      return force.alpha(.1);
	    };
	    force.stop = function() {
	      return force.alpha(0);
	    };
	    force.drag = function() {
	      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
	      if (!arguments.length) return drag;
	      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
	    };
	    function dragmove(d) {
	      d.px = d3.event.x, d.py = d3.event.y;
	      force.resume();
	    }
	    return d3.rebind(force, event, "on");
	  };
	  function d3_layout_forceDragstart(d) {
	    d.fixed |= 2;
	  }
	  function d3_layout_forceDragend(d) {
	    d.fixed &= ~6;
	  }
	  function d3_layout_forceMouseover(d) {
	    d.fixed |= 4;
	    d.px = d.x, d.py = d.y;
	  }
	  function d3_layout_forceMouseout(d) {
	    d.fixed &= ~4;
	  }
	  function d3_layout_forceAccumulate(quad, alpha, charges) {
	    var cx = 0, cy = 0;
	    quad.charge = 0;
	    if (!quad.leaf) {
	      var nodes = quad.nodes, n = nodes.length, i = -1, c;
	      while (++i < n) {
	        c = nodes[i];
	        if (c == null) continue;
	        d3_layout_forceAccumulate(c, alpha, charges);
	        quad.charge += c.charge;
	        cx += c.charge * c.cx;
	        cy += c.charge * c.cy;
	      }
	    }
	    if (quad.point) {
	      if (!quad.leaf) {
	        quad.point.x += Math.random() - .5;
	        quad.point.y += Math.random() - .5;
	      }
	      var k = alpha * charges[quad.point.index];
	      quad.charge += quad.pointCharge = k;
	      cx += k * quad.point.x;
	      cy += k * quad.point.y;
	    }
	    quad.cx = cx / quad.charge;
	    quad.cy = cy / quad.charge;
	  }
	  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
	  d3.layout.hierarchy = function() {
	    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
	    function hierarchy(root) {
	      var stack = [ root ], nodes = [], node;
	      root.depth = 0;
	      while ((node = stack.pop()) != null) {
	        nodes.push(node);
	        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
	          var n, childs, child;
	          while (--n >= 0) {
	            stack.push(child = childs[n]);
	            child.parent = node;
	            child.depth = node.depth + 1;
	          }
	          if (value) node.value = 0;
	          node.children = childs;
	        } else {
	          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          delete node.children;
	        }
	      }
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var childs, parent;
	        if (sort && (childs = node.children)) childs.sort(sort);
	        if (value && (parent = node.parent)) parent.value += node.value;
	      });
	      return nodes;
	    }
	    hierarchy.sort = function(x) {
	      if (!arguments.length) return sort;
	      sort = x;
	      return hierarchy;
	    };
	    hierarchy.children = function(x) {
	      if (!arguments.length) return children;
	      children = x;
	      return hierarchy;
	    };
	    hierarchy.value = function(x) {
	      if (!arguments.length) return value;
	      value = x;
	      return hierarchy;
	    };
	    hierarchy.revalue = function(root) {
	      if (value) {
	        d3_layout_hierarchyVisitBefore(root, function(node) {
	          if (node.children) node.value = 0;
	        });
	        d3_layout_hierarchyVisitAfter(root, function(node) {
	          var parent;
	          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          if (parent = node.parent) parent.value += node.value;
	        });
	      }
	      return root;
	    };
	    return hierarchy;
	  };
	  function d3_layout_hierarchyRebind(object, hierarchy) {
	    d3.rebind(object, hierarchy, "sort", "children", "value");
	    object.nodes = object;
	    object.links = d3_layout_hierarchyLinks;
	    return object;
	  }
	  function d3_layout_hierarchyVisitBefore(node, callback) {
	    var nodes = [ node ];
	    while ((node = nodes.pop()) != null) {
	      callback(node);
	      if ((children = node.children) && (n = children.length)) {
	        var n, children;
	        while (--n >= 0) nodes.push(children[n]);
	      }
	    }
	  }
	  function d3_layout_hierarchyVisitAfter(node, callback) {
	    var nodes = [ node ], nodes2 = [];
	    while ((node = nodes.pop()) != null) {
	      nodes2.push(node);
	      if ((children = node.children) && (n = children.length)) {
	        var i = -1, n, children;
	        while (++i < n) nodes.push(children[i]);
	      }
	    }
	    while ((node = nodes2.pop()) != null) {
	      callback(node);
	    }
	  }
	  function d3_layout_hierarchyChildren(d) {
	    return d.children;
	  }
	  function d3_layout_hierarchyValue(d) {
	    return d.value;
	  }
	  function d3_layout_hierarchySort(a, b) {
	    return b.value - a.value;
	  }
	  function d3_layout_hierarchyLinks(nodes) {
	    return d3.merge(nodes.map(function(parent) {
	      return (parent.children || []).map(function(child) {
	        return {
	          source: parent,
	          target: child
	        };
	      });
	    }));
	  }
	  d3.layout.partition = function() {
	    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
	    function position(node, x, dx, dy) {
	      var children = node.children;
	      node.x = x;
	      node.y = node.depth * dy;
	      node.dx = dx;
	      node.dy = dy;
	      if (children && (n = children.length)) {
	        var i = -1, n, c, d;
	        dx = node.value ? dx / node.value : 0;
	        while (++i < n) {
	          position(c = children[i], x, d = c.value * dx, dy);
	          x += d;
	        }
	      }
	    }
	    function depth(node) {
	      var children = node.children, d = 0;
	      if (children && (n = children.length)) {
	        var i = -1, n;
	        while (++i < n) d = Math.max(d, depth(children[i]));
	      }
	      return 1 + d;
	    }
	    function partition(d, i) {
	      var nodes = hierarchy.call(this, d, i);
	      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
	      return nodes;
	    }
	    partition.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return partition;
	    };
	    return d3_layout_hierarchyRebind(partition, hierarchy);
	  };
	  d3.layout.pie = function() {
	    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
	    function pie(data) {
	      var n = data.length, values = data.map(function(d, i) {
	        return +value.call(pie, d, i);
	      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
	      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
	        return values[j] - values[i];
	      } : function(i, j) {
	        return sort(data[i], data[j]);
	      });
	      index.forEach(function(i) {
	        arcs[i] = {
	          data: data[i],
	          value: v = values[i],
	          startAngle: a,
	          endAngle: a += v * k + pa,
	          padAngle: p
	        };
	      });
	      return arcs;
	    }
	    pie.value = function(_) {
	      if (!arguments.length) return value;
	      value = _;
	      return pie;
	    };
	    pie.sort = function(_) {
	      if (!arguments.length) return sort;
	      sort = _;
	      return pie;
	    };
	    pie.startAngle = function(_) {
	      if (!arguments.length) return startAngle;
	      startAngle = _;
	      return pie;
	    };
	    pie.endAngle = function(_) {
	      if (!arguments.length) return endAngle;
	      endAngle = _;
	      return pie;
	    };
	    pie.padAngle = function(_) {
	      if (!arguments.length) return padAngle;
	      padAngle = _;
	      return pie;
	    };
	    return pie;
	  };
	  var d3_layout_pieSortByValue = {};
	  d3.layout.stack = function() {
	    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
	    function stack(data, index) {
	      if (!(n = data.length)) return data;
	      var series = data.map(function(d, i) {
	        return values.call(stack, d, i);
	      });
	      var points = series.map(function(d) {
	        return d.map(function(v, i) {
	          return [ x.call(stack, v, i), y.call(stack, v, i) ];
	        });
	      });
	      var orders = order.call(stack, points, index);
	      series = d3.permute(series, orders);
	      points = d3.permute(points, orders);
	      var offsets = offset.call(stack, points, index);
	      var m = series[0].length, n, i, j, o;
	      for (j = 0; j < m; ++j) {
	        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
	        for (i = 1; i < n; ++i) {
	          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
	        }
	      }
	      return data;
	    }
	    stack.values = function(x) {
	      if (!arguments.length) return values;
	      values = x;
	      return stack;
	    };
	    stack.order = function(x) {
	      if (!arguments.length) return order;
	      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
	      return stack;
	    };
	    stack.offset = function(x) {
	      if (!arguments.length) return offset;
	      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
	      return stack;
	    };
	    stack.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      return stack;
	    };
	    stack.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      return stack;
	    };
	    stack.out = function(z) {
	      if (!arguments.length) return out;
	      out = z;
	      return stack;
	    };
	    return stack;
	  };
	  function d3_layout_stackX(d) {
	    return d.x;
	  }
	  function d3_layout_stackY(d) {
	    return d.y;
	  }
	  function d3_layout_stackOut(d, y0, y) {
	    d.y0 = y0;
	    d.y = y;
	  }
	  var d3_layout_stackOrders = d3.map({
	    "inside-out": function(data) {
	      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
	        return max[a] - max[b];
	      }), top = 0, bottom = 0, tops = [], bottoms = [];
	      for (i = 0; i < n; ++i) {
	        j = index[i];
	        if (top < bottom) {
	          top += sums[j];
	          tops.push(j);
	        } else {
	          bottom += sums[j];
	          bottoms.push(j);
	        }
	      }
	      return bottoms.reverse().concat(tops);
	    },
	    reverse: function(data) {
	      return d3.range(data.length).reverse();
	    },
	    "default": d3_layout_stackOrderDefault
	  });
	  var d3_layout_stackOffsets = d3.map({
	    silhouette: function(data) {
	      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o > max) max = o;
	        sums.push(o);
	      }
	      for (j = 0; j < m; ++j) {
	        y0[j] = (max - sums[j]) / 2;
	      }
	      return y0;
	    },
	    wiggle: function(data) {
	      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
	      y0[0] = o = o0 = 0;
	      for (j = 1; j < m; ++j) {
	        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
	        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
	          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
	            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
	          }
	          s2 += s3 * data[i][j][1];
	        }
	        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
	        if (o < o0) o0 = o;
	      }
	      for (j = 0; j < m; ++j) y0[j] -= o0;
	      return y0;
	    },
	    expand: function(data) {
	      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
	      }
	      for (j = 0; j < m; ++j) y0[j] = 0;
	      return y0;
	    },
	    zero: d3_layout_stackOffsetZero
	  });
	  function d3_layout_stackOrderDefault(data) {
	    return d3.range(data.length);
	  }
	  function d3_layout_stackOffsetZero(data) {
	    var j = -1, m = data[0].length, y0 = [];
	    while (++j < m) y0[j] = 0;
	    return y0;
	  }
	  function d3_layout_stackMaxIndex(array) {
	    var i = 1, j = 0, v = array[0][1], k, n = array.length;
	    for (;i < n; ++i) {
	      if ((k = array[i][1]) > v) {
	        j = i;
	        v = k;
	      }
	    }
	    return j;
	  }
	  function d3_layout_stackReduceSum(d) {
	    return d.reduce(d3_layout_stackSum, 0);
	  }
	  function d3_layout_stackSum(p, d) {
	    return p + d[1];
	  }
	  d3.layout.histogram = function() {
	    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
	    function histogram(data, i) {
	      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
	      while (++i < m) {
	        bin = bins[i] = [];
	        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
	        bin.y = 0;
	      }
	      if (m > 0) {
	        i = -1;
	        while (++i < n) {
	          x = values[i];
	          if (x >= range[0] && x <= range[1]) {
	            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
	            bin.y += k;
	            bin.push(data[i]);
	          }
	        }
	      }
	      return bins;
	    }
	    histogram.value = function(x) {
	      if (!arguments.length) return valuer;
	      valuer = x;
	      return histogram;
	    };
	    histogram.range = function(x) {
	      if (!arguments.length) return ranger;
	      ranger = d3_functor(x);
	      return histogram;
	    };
	    histogram.bins = function(x) {
	      if (!arguments.length) return binner;
	      binner = typeof x === "number" ? function(range) {
	        return d3_layout_histogramBinFixed(range, x);
	      } : d3_functor(x);
	      return histogram;
	    };
	    histogram.frequency = function(x) {
	      if (!arguments.length) return frequency;
	      frequency = !!x;
	      return histogram;
	    };
	    return histogram;
	  };
	  function d3_layout_histogramBinSturges(range, values) {
	    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
	  }
	  function d3_layout_histogramBinFixed(range, n) {
	    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
	    while (++x <= n) f[x] = m * x + b;
	    return f;
	  }
	  function d3_layout_histogramRange(values) {
	    return [ d3.min(values), d3.max(values) ];
	  }
	  d3.layout.pack = function() {
	    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
	    function pack(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
	        return radius;
	      };
	      root.x = root.y = 0;
	      d3_layout_hierarchyVisitAfter(root, function(d) {
	        d.r = +r(d.value);
	      });
	      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	      if (padding) {
	        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r += dr;
	        });
	        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r -= dr;
	        });
	      }
	      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
	      return nodes;
	    }
	    pack.size = function(_) {
	      if (!arguments.length) return size;
	      size = _;
	      return pack;
	    };
	    pack.radius = function(_) {
	      if (!arguments.length) return radius;
	      radius = _ == null || typeof _ === "function" ? _ : +_;
	      return pack;
	    };
	    pack.padding = function(_) {
	      if (!arguments.length) return padding;
	      padding = +_;
	      return pack;
	    };
	    return d3_layout_hierarchyRebind(pack, hierarchy);
	  };
	  function d3_layout_packSort(a, b) {
	    return a.value - b.value;
	  }
	  function d3_layout_packInsert(a, b) {
	    var c = a._pack_next;
	    a._pack_next = b;
	    b._pack_prev = a;
	    b._pack_next = c;
	    c._pack_prev = b;
	  }
	  function d3_layout_packSplice(a, b) {
	    a._pack_next = b;
	    b._pack_prev = a;
	  }
	  function d3_layout_packIntersects(a, b) {
	    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
	    return .999 * dr * dr > dx * dx + dy * dy;
	  }
	  function d3_layout_packSiblings(node) {
	    if (!(nodes = node.children) || !(n = nodes.length)) return;
	    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
	    function bound(node) {
	      xMin = Math.min(node.x - node.r, xMin);
	      xMax = Math.max(node.x + node.r, xMax);
	      yMin = Math.min(node.y - node.r, yMin);
	      yMax = Math.max(node.y + node.r, yMax);
	    }
	    nodes.forEach(d3_layout_packLink);
	    a = nodes[0];
	    a.x = -a.r;
	    a.y = 0;
	    bound(a);
	    if (n > 1) {
	      b = nodes[1];
	      b.x = b.r;
	      b.y = 0;
	      bound(b);
	      if (n > 2) {
	        c = nodes[2];
	        d3_layout_packPlace(a, b, c);
	        bound(c);
	        d3_layout_packInsert(a, c);
	        a._pack_prev = c;
	        d3_layout_packInsert(c, b);
	        b = a._pack_next;
	        for (i = 3; i < n; i++) {
	          d3_layout_packPlace(a, b, c = nodes[i]);
	          var isect = 0, s1 = 1, s2 = 1;
	          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
	            if (d3_layout_packIntersects(j, c)) {
	              isect = 1;
	              break;
	            }
	          }
	          if (isect == 1) {
	            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
	              if (d3_layout_packIntersects(k, c)) {
	                break;
	              }
	            }
	          }
	          if (isect) {
	            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
	            i--;
	          } else {
	            d3_layout_packInsert(a, c);
	            b = c;
	            bound(c);
	          }
	        }
	      }
	    }
	    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
	    for (i = 0; i < n; i++) {
	      c = nodes[i];
	      c.x -= cx;
	      c.y -= cy;
	      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
	    }
	    node.r = cr;
	    nodes.forEach(d3_layout_packUnlink);
	  }
	  function d3_layout_packLink(node) {
	    node._pack_next = node._pack_prev = node;
	  }
	  function d3_layout_packUnlink(node) {
	    delete node._pack_next;
	    delete node._pack_prev;
	  }
	  function d3_layout_packTransform(node, x, y, k) {
	    var children = node.children;
	    node.x = x += k * node.x;
	    node.y = y += k * node.y;
	    node.r *= k;
	    if (children) {
	      var i = -1, n = children.length;
	      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
	    }
	  }
	  function d3_layout_packPlace(a, b, c) {
	    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
	    if (db && (dx || dy)) {
	      var da = b.r + c.r, dc = dx * dx + dy * dy;
	      da *= da;
	      db *= db;
	      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	      c.x = a.x + x * dx + y * dy;
	      c.y = a.y + x * dy - y * dx;
	    } else {
	      c.x = a.x + db;
	      c.y = a.y;
	    }
	  }
	  d3.layout.tree = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
	    function tree(d, i) {
	      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
	      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
	      d3_layout_hierarchyVisitBefore(root1, secondWalk);
	      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
	        var left = root0, right = root0, bottom = root0;
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          if (node.x < left.x) left = node;
	          if (node.x > right.x) right = node;
	          if (node.depth > bottom.depth) bottom = node;
	        });
	        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          node.x = (node.x + tx) * kx;
	          node.y = node.depth * ky;
	        });
	      }
	      return nodes;
	    }
	    function wrapTree(root0) {
	      var root1 = {
	        A: null,
	        children: [ root0 ]
	      }, queue = [ root1 ], node1;
	      while ((node1 = queue.pop()) != null) {
	        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
	          queue.push((children[i] = child = {
	            _: children[i],
	            parent: node1,
	            children: (child = children[i].children) && child.slice() || [],
	            A: null,
	            a: null,
	            z: 0,
	            m: 0,
	            c: 0,
	            s: 0,
	            t: null,
	            i: i
	          }).a = child);
	        }
	      }
	      return root1.children[0];
	    }
	    function firstWalk(v) {
	      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
	      if (children.length) {
	        d3_layout_treeShift(v);
	        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	        if (w) {
	          v.z = w.z + separation(v._, w._);
	          v.m = v.z - midpoint;
	        } else {
	          v.z = midpoint;
	        }
	      } else if (w) {
	        v.z = w.z + separation(v._, w._);
	      }
	      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	    }
	    function secondWalk(v) {
	      v._.x = v.z + v.parent.m;
	      v.m += v.parent.m;
	    }
	    function apportion(v, w, ancestor) {
	      if (w) {
	        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
	        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
	          vom = d3_layout_treeLeft(vom);
	          vop = d3_layout_treeRight(vop);
	          vop.a = v;
	          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	          if (shift > 0) {
	            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
	            sip += shift;
	            sop += shift;
	          }
	          sim += vim.m;
	          sip += vip.m;
	          som += vom.m;
	          sop += vop.m;
	        }
	        if (vim && !d3_layout_treeRight(vop)) {
	          vop.t = vim;
	          vop.m += sim - sop;
	        }
	        if (vip && !d3_layout_treeLeft(vom)) {
	          vom.t = vip;
	          vom.m += sip - som;
	          ancestor = v;
	        }
	      }
	      return ancestor;
	    }
	    function sizeNode(node) {
	      node.x *= size[0];
	      node.y = node.depth * size[1];
	    }
	    tree.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return tree;
	    };
	    tree.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null ? sizeNode : null;
	      return tree;
	    };
	    tree.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) == null ? null : sizeNode;
	      return tree;
	    };
	    return d3_layout_hierarchyRebind(tree, hierarchy);
	  };
	  function d3_layout_treeSeparation(a, b) {
	    return a.parent == b.parent ? 1 : 2;
	  }
	  function d3_layout_treeLeft(v) {
	    var children = v.children;
	    return children.length ? children[0] : v.t;
	  }
	  function d3_layout_treeRight(v) {
	    var children = v.children, n;
	    return (n = children.length) ? children[n - 1] : v.t;
	  }
	  function d3_layout_treeMove(wm, wp, shift) {
	    var change = shift / (wp.i - wm.i);
	    wp.c -= change;
	    wp.s += shift;
	    wm.c += change;
	    wp.z += shift;
	    wp.m += shift;
	  }
	  function d3_layout_treeShift(v) {
	    var shift = 0, change = 0, children = v.children, i = children.length, w;
	    while (--i >= 0) {
	      w = children[i];
	      w.z += shift;
	      w.m += shift;
	      shift += w.s + (change += w.c);
	    }
	  }
	  function d3_layout_treeAncestor(vim, v, ancestor) {
	    return vim.a.parent === v.parent ? vim.a : ancestor;
	  }
	  d3.layout.cluster = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
	    function cluster(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var children = node.children;
	        if (children && children.length) {
	          node.x = d3_layout_clusterX(children);
	          node.y = d3_layout_clusterY(children);
	        } else {
	          node.x = previousNode ? x += separation(node, previousNode) : 0;
	          node.y = 0;
	          previousNode = node;
	        }
	      });
	      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
	      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
	        node.x = (node.x - root.x) * size[0];
	        node.y = (root.y - node.y) * size[1];
	      } : function(node) {
	        node.x = (node.x - x0) / (x1 - x0) * size[0];
	        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
	      });
	      return nodes;
	    }
	    cluster.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return cluster;
	    };
	    cluster.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null;
	      return cluster;
	    };
	    cluster.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) != null;
	      return cluster;
	    };
	    return d3_layout_hierarchyRebind(cluster, hierarchy);
	  };
	  function d3_layout_clusterY(children) {
	    return 1 + d3.max(children, function(child) {
	      return child.y;
	    });
	  }
	  function d3_layout_clusterX(children) {
	    return children.reduce(function(x, child) {
	      return x + child.x;
	    }, 0) / children.length;
	  }
	  function d3_layout_clusterLeft(node) {
	    var children = node.children;
	    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
	  }
	  function d3_layout_clusterRight(node) {
	    var children = node.children, n;
	    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
	  }
	  d3.layout.treemap = function() {
	    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
	    function scale(children, k) {
	      var i = -1, n = children.length, child, area;
	      while (++i < n) {
	        area = (child = children[i]).value * (k < 0 ? 0 : k);
	        child.area = isNaN(area) || area <= 0 ? 0 : area;
	      }
	    }
	    function squarify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while ((n = remaining.length) > 0) {
	          row.push(child = remaining[n - 1]);
	          row.area += child.area;
	          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
	            remaining.pop();
	            best = score;
	          } else {
	            row.area -= row.pop().area;
	            position(row, u, rect, false);
	            u = Math.min(rect.dx, rect.dy);
	            row.length = row.area = 0;
	            best = Infinity;
	          }
	        }
	        if (row.length) {
	          position(row, u, rect, true);
	          row.length = row.area = 0;
	        }
	        children.forEach(squarify);
	      }
	    }
	    function stickify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), remaining = children.slice(), child, row = [];
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while (child = remaining.pop()) {
	          row.push(child);
	          row.area += child.area;
	          if (child.z != null) {
	            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
	            row.length = row.area = 0;
	          }
	        }
	        children.forEach(stickify);
	      }
	    }
	    function worst(row, u) {
	      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
	      while (++i < n) {
	        if (!(r = row[i].area)) continue;
	        if (r < rmin) rmin = r;
	        if (r > rmax) rmax = r;
	      }
	      s *= s;
	      u *= u;
	      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
	    }
	    function position(row, u, rect, flush) {
	      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
	      if (u == rect.dx) {
	        if (flush || v > rect.dy) v = rect.dy;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dy = v;
	          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
	        }
	        o.z = true;
	        o.dx += rect.x + rect.dx - x;
	        rect.y += v;
	        rect.dy -= v;
	      } else {
	        if (flush || v > rect.dx) v = rect.dx;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dx = v;
	          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
	        }
	        o.z = false;
	        o.dy += rect.y + rect.dy - y;
	        rect.x += v;
	        rect.dx -= v;
	      }
	    }
	    function treemap(d) {
	      var nodes = stickies || hierarchy(d), root = nodes[0];
	      root.x = root.y = 0;
	      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
	      if (stickies) hierarchy.revalue(root);
	      scale([ root ], root.dx * root.dy / root.value);
	      (stickies ? stickify : squarify)(root);
	      if (sticky) stickies = nodes;
	      return nodes;
	    }
	    treemap.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return treemap;
	    };
	    treemap.padding = function(x) {
	      if (!arguments.length) return padding;
	      function padFunction(node) {
	        var p = x.call(treemap, node, node.depth);
	        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
	      }
	      function padConstant(node) {
	        return d3_layout_treemapPad(node, x);
	      }
	      var type;
	      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
	      padConstant) : padConstant;
	      return treemap;
	    };
	    treemap.round = function(x) {
	      if (!arguments.length) return round != Number;
	      round = x ? Math.round : Number;
	      return treemap;
	    };
	    treemap.sticky = function(x) {
	      if (!arguments.length) return sticky;
	      sticky = x;
	      stickies = null;
	      return treemap;
	    };
	    treemap.ratio = function(x) {
	      if (!arguments.length) return ratio;
	      ratio = x;
	      return treemap;
	    };
	    treemap.mode = function(x) {
	      if (!arguments.length) return mode;
	      mode = x + "";
	      return treemap;
	    };
	    return d3_layout_hierarchyRebind(treemap, hierarchy);
	  };
	  function d3_layout_treemapPadNull(node) {
	    return {
	      x: node.x,
	      y: node.y,
	      dx: node.dx,
	      dy: node.dy
	    };
	  }
	  function d3_layout_treemapPad(node, padding) {
	    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
	    if (dx < 0) {
	      x += dx / 2;
	      dx = 0;
	    }
	    if (dy < 0) {
	      y += dy / 2;
	      dy = 0;
	    }
	    return {
	      x: x,
	      y: y,
	      dx: dx,
	      dy: dy
	    };
	  }
	  d3.random = {
	    normal: function(µ, σ) {
	      var n = arguments.length;
	      if (n < 2) σ = 1;
	      if (n < 1) µ = 0;
	      return function() {
	        var x, y, r;
	        do {
	          x = Math.random() * 2 - 1;
	          y = Math.random() * 2 - 1;
	          r = x * x + y * y;
	        } while (!r || r > 1);
	        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
	      };
	    },
	    logNormal: function() {
	      var random = d3.random.normal.apply(d3, arguments);
	      return function() {
	        return Math.exp(random());
	      };
	    },
	    bates: function(m) {
	      var random = d3.random.irwinHall(m);
	      return function() {
	        return random() / m;
	      };
	    },
	    irwinHall: function(m) {
	      return function() {
	        for (var s = 0, j = 0; j < m; j++) s += Math.random();
	        return s;
	      };
	    }
	  };
	  d3.scale = {};
	  function d3_scaleExtent(domain) {
	    var start = domain[0], stop = domain[domain.length - 1];
	    return start < stop ? [ start, stop ] : [ stop, start ];
	  }
	  function d3_scaleRange(scale) {
	    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
	  }
	  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
	    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
	    return function(x) {
	      return i(u(x));
	    };
	  }
	  function d3_scale_nice(domain, nice) {
	    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
	    if (x1 < x0) {
	      dx = i0, i0 = i1, i1 = dx;
	      dx = x0, x0 = x1, x1 = dx;
	    }
	    domain[i0] = nice.floor(x0);
	    domain[i1] = nice.ceil(x1);
	    return domain;
	  }
	  function d3_scale_niceStep(step) {
	    return step ? {
	      floor: function(x) {
	        return Math.floor(x / step) * step;
	      },
	      ceil: function(x) {
	        return Math.ceil(x / step) * step;
	      }
	    } : d3_scale_niceIdentity;
	  }
	  var d3_scale_niceIdentity = {
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
	    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
	    if (domain[k] < domain[0]) {
	      domain = domain.slice().reverse();
	      range = range.slice().reverse();
	    }
	    while (++j <= k) {
	      u.push(uninterpolate(domain[j - 1], domain[j]));
	      i.push(interpolate(range[j - 1], range[j]));
	    }
	    return function(x) {
	      var j = d3.bisect(domain, x, 1, k) - 1;
	      return i[j](u[j](x));
	    };
	  }
	  d3.scale.linear = function() {
	    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
	  };
	  function d3_scale_linear(domain, range, interpolate, clamp) {
	    var output, input;
	    function rescale() {
	      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
	      output = linear(domain, range, uninterpolate, interpolate);
	      input = linear(range, domain, uninterpolate, d3_interpolate);
	      return scale;
	    }
	    function scale(x) {
	      return output(x);
	    }
	    scale.invert = function(y) {
	      return input(y);
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(Number);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.rangeRound = function(x) {
	      return scale.range(x).interpolate(d3_interpolateRound);
	    };
	    scale.clamp = function(x) {
	      if (!arguments.length) return clamp;
	      clamp = x;
	      return rescale();
	    };
	    scale.interpolate = function(x) {
	      if (!arguments.length) return interpolate;
	      interpolate = x;
	      return rescale();
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      d3_scale_linearNice(domain, m);
	      return rescale();
	    };
	    scale.copy = function() {
	      return d3_scale_linear(domain, range, interpolate, clamp);
	    };
	    return rescale();
	  }
	  function d3_scale_linearRebind(scale, linear) {
	    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
	  }
	  function d3_scale_linearNice(domain, m) {
	    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	    return domain;
	  }
	  function d3_scale_linearTickRange(domain, m) {
	    if (m == null) m = 10;
	    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
	    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
	    extent[0] = Math.ceil(extent[0] / step) * step;
	    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
	    extent[2] = step;
	    return extent;
	  }
	  function d3_scale_linearTicks(domain, m) {
	    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
	  }
	  function d3_scale_linearTickFormat(domain, m, format) {
	    var range = d3_scale_linearTickRange(domain, m);
	    if (format) {
	      var match = d3_format_re.exec(format);
	      match.shift();
	      if (match[8] === "s") {
	        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
	        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
	        match[8] = "f";
	        format = d3.format(match.join(""));
	        return function(d) {
	          return format(prefix.scale(d)) + prefix.symbol;
	        };
	      }
	      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
	      format = match.join("");
	    } else {
	      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
	    }
	    return d3.format(format);
	  }
	  var d3_scale_linearFormatSignificant = {
	    s: 1,
	    g: 1,
	    p: 1,
	    r: 1,
	    e: 1
	  };
	  function d3_scale_linearPrecision(value) {
	    return -Math.floor(Math.log(value) / Math.LN10 + .01);
	  }
	  function d3_scale_linearFormatPrecision(type, range) {
	    var p = d3_scale_linearPrecision(range[2]);
	    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
	  }
	  d3.scale.log = function() {
	    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
	  };
	  function d3_scale_log(linear, base, positive, domain) {
	    function log(x) {
	      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
	    }
	    function pow(x) {
	      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
	    }
	    function scale(x) {
	      return linear(log(x));
	    }
	    scale.invert = function(x) {
	      return pow(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      positive = x[0] >= 0;
	      linear.domain((domain = x.map(Number)).map(log));
	      return scale;
	    };
	    scale.base = function(_) {
	      if (!arguments.length) return base;
	      base = +_;
	      linear.domain(domain.map(log));
	      return scale;
	    };
	    scale.nice = function() {
	      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
	      linear.domain(niced);
	      domain = niced.map(pow);
	      return scale;
	    };
	    scale.ticks = function() {
	      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
	      if (isFinite(j - i)) {
	        if (positive) {
	          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
	          ticks.push(pow(i));
	        } else {
	          ticks.push(pow(i));
	          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
	        }
	        for (i = 0; ticks[i] < u; i++) {}
	        for (j = ticks.length; ticks[j - 1] > v; j--) {}
	        ticks = ticks.slice(i, j);
	      }
	      return ticks;
	    };
	    scale.tickFormat = function(n, format) {
	      if (!arguments.length) return d3_scale_logFormat;
	      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
	      var k = Math.max(1, base * n / scale.ticks().length);
	      return function(d) {
	        var i = d / pow(Math.round(log(d)));
	        if (i * base < base - .5) i *= base;
	        return i <= k ? format(d) : "";
	      };
	    };
	    scale.copy = function() {
	      return d3_scale_log(linear.copy(), base, positive, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
	    floor: function(x) {
	      return -Math.ceil(-x);
	    },
	    ceil: function(x) {
	      return -Math.floor(-x);
	    }
	  };
	  d3.scale.pow = function() {
	    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
	  };
	  function d3_scale_pow(linear, exponent, domain) {
	    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
	    function scale(x) {
	      return linear(powp(x));
	    }
	    scale.invert = function(x) {
	      return powb(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      linear.domain((domain = x.map(Number)).map(powp));
	      return scale;
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      return scale.domain(d3_scale_linearNice(domain, m));
	    };
	    scale.exponent = function(x) {
	      if (!arguments.length) return exponent;
	      powp = d3_scale_powPow(exponent = x);
	      powb = d3_scale_powPow(1 / exponent);
	      linear.domain(domain.map(powp));
	      return scale;
	    };
	    scale.copy = function() {
	      return d3_scale_pow(linear.copy(), exponent, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_scale_powPow(e) {
	    return function(x) {
	      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
	    };
	  }
	  d3.scale.sqrt = function() {
	    return d3.scale.pow().exponent(.5);
	  };
	  d3.scale.ordinal = function() {
	    return d3_scale_ordinal([], {
	      t: "range",
	      a: [ [] ]
	    });
	  };
	  function d3_scale_ordinal(domain, ranger) {
	    var index, range, rangeBand;
	    function scale(x) {
	      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
	    }
	    function steps(start, step) {
	      return d3.range(domain.length).map(function(i) {
	        return start + step * i;
	      });
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = [];
	      index = new d3_Map();
	      var i = -1, n = x.length, xi;
	      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
	      return scale[ranger.t].apply(scale, ranger.a);
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      rangeBand = 0;
	      ranger = {
	        t: "range",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangePoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
	      0) : (stop - start) / (domain.length - 1 + padding);
	      range = steps(start + step * padding / 2, step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangePoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundPoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
	      0) : (stop - start) / (domain.length - 1 + padding) | 0;
	      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangeRoundPoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
	      range = steps(start + step * outerPadding, step);
	      if (reverse) range.reverse();
	      rangeBand = step * (1 - padding);
	      ranger = {
	        t: "rangeBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
	      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
	      if (reverse) range.reverse();
	      rangeBand = Math.round(step * (1 - padding));
	      ranger = {
	        t: "rangeRoundBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBand = function() {
	      return rangeBand;
	    };
	    scale.rangeExtent = function() {
	      return d3_scaleExtent(ranger.a[0]);
	    };
	    scale.copy = function() {
	      return d3_scale_ordinal(domain, ranger);
	    };
	    return scale.domain(domain);
	  }
	  d3.scale.category10 = function() {
	    return d3.scale.ordinal().range(d3_category10);
	  };
	  d3.scale.category20 = function() {
	    return d3.scale.ordinal().range(d3_category20);
	  };
	  d3.scale.category20b = function() {
	    return d3.scale.ordinal().range(d3_category20b);
	  };
	  d3.scale.category20c = function() {
	    return d3.scale.ordinal().range(d3_category20c);
	  };
	  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
	  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
	  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
	  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
	  d3.scale.quantile = function() {
	    return d3_scale_quantile([], []);
	  };
	  function d3_scale_quantile(domain, range) {
	    var thresholds;
	    function rescale() {
	      var k = 0, q = range.length;
	      thresholds = [];
	      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
	      return scale;
	    }
	    function scale(x) {
	      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.quantiles = function() {
	      return thresholds;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantile(domain, range);
	    };
	    return rescale();
	  }
	  d3.scale.quantize = function() {
	    return d3_scale_quantize(0, 1, [ 0, 1 ]);
	  };
	  function d3_scale_quantize(x0, x1, range) {
	    var kx, i;
	    function scale(x) {
	      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
	    }
	    function rescale() {
	      kx = range.length / (x1 - x0);
	      i = range.length - 1;
	      return scale;
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return [ x0, x1 ];
	      x0 = +x[0];
	      x1 = +x[x.length - 1];
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      y = y < 0 ? NaN : y / kx + x0;
	      return [ y, y + 1 / kx ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantize(x0, x1, range);
	    };
	    return rescale();
	  }
	  d3.scale.threshold = function() {
	    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
	  };
	  function d3_scale_threshold(domain, range) {
	    function scale(x) {
	      if (x <= x) return range[d3.bisect(domain, x)];
	    }
	    scale.domain = function(_) {
	      if (!arguments.length) return domain;
	      domain = _;
	      return scale;
	    };
	    scale.range = function(_) {
	      if (!arguments.length) return range;
	      range = _;
	      return scale;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return [ domain[y - 1], domain[y] ];
	    };
	    scale.copy = function() {
	      return d3_scale_threshold(domain, range);
	    };
	    return scale;
	  }
	  d3.scale.identity = function() {
	    return d3_scale_identity([ 0, 1 ]);
	  };
	  function d3_scale_identity(domain) {
	    function identity(x) {
	      return +x;
	    }
	    identity.invert = identity;
	    identity.domain = identity.range = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(identity);
	      return identity;
	    };
	    identity.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    identity.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    identity.copy = function() {
	      return d3_scale_identity(domain);
	    };
	    return identity;
	  }
	  d3.svg = {};
	  function d3_zero() {
	    return 0;
	  }
	  d3.svg.arc = function() {
	    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
	    function arc() {
	      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
	      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
	      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
	      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
	      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
	        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
	        if (!cw) p1 *= -1;
	        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
	        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
	      }
	      if (r1) {
	        x0 = r1 * Math.cos(a0 + p1);
	        y0 = r1 * Math.sin(a0 + p1);
	        x1 = r1 * Math.cos(a1 - p1);
	        y1 = r1 * Math.sin(a1 - p1);
	        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
	        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
	          var h1 = (a0 + a1) / 2;
	          x0 = r1 * Math.cos(h1);
	          y0 = r1 * Math.sin(h1);
	          x1 = y1 = null;
	        }
	      } else {
	        x0 = y0 = 0;
	      }
	      if (r0) {
	        x2 = r0 * Math.cos(a1 - p0);
	        y2 = r0 * Math.sin(a1 - p0);
	        x3 = r0 * Math.cos(a0 + p0);
	        y3 = r0 * Math.sin(a0 + p0);
	        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
	        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
	          var h0 = (a0 + a1) / 2;
	          x2 = r0 * Math.cos(h0);
	          y2 = r0 * Math.sin(h0);
	          x3 = y3 = null;
	        }
	      } else {
	        x2 = y2 = 0;
	      }
	      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
	        cr = r0 < r1 ^ cw ? 0 : 1;
	        var rc1 = rc, rc0 = rc;
	        if (da < π) {
	          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
	          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
	        }
	        if (x1 != null) {
	          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
	          if (rc === rc1) {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
	          } else {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
	          }
	        } else {
	          path.push("M", x0, ",", y0);
	        }
	        if (x3 != null) {
	          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
	          if (rc === rc0) {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          } else {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          }
	        } else {
	          path.push("L", x2, ",", y2);
	        }
	      } else {
	        path.push("M", x0, ",", y0);
	        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
	        path.push("L", x2, ",", y2);
	        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
	      }
	      path.push("Z");
	      return path.join("");
	    }
	    function circleSegment(r1, cw) {
	      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
	    }
	    arc.innerRadius = function(v) {
	      if (!arguments.length) return innerRadius;
	      innerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.outerRadius = function(v) {
	      if (!arguments.length) return outerRadius;
	      outerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.cornerRadius = function(v) {
	      if (!arguments.length) return cornerRadius;
	      cornerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.padRadius = function(v) {
	      if (!arguments.length) return padRadius;
	      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
	      return arc;
	    };
	    arc.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return arc;
	    };
	    arc.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return arc;
	    };
	    arc.padAngle = function(v) {
	      if (!arguments.length) return padAngle;
	      padAngle = d3_functor(v);
	      return arc;
	    };
	    arc.centroid = function() {
	      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
	      return [ Math.cos(a) * r, Math.sin(a) * r ];
	    };
	    return arc;
	  };
	  var d3_svg_arcAuto = "auto";
	  function d3_svg_arcInnerRadius(d) {
	    return d.innerRadius;
	  }
	  function d3_svg_arcOuterRadius(d) {
	    return d.outerRadius;
	  }
	  function d3_svg_arcStartAngle(d) {
	    return d.startAngle;
	  }
	  function d3_svg_arcEndAngle(d) {
	    return d.endAngle;
	  }
	  function d3_svg_arcPadAngle(d) {
	    return d && d.padAngle;
	  }
	  function d3_svg_arcSweep(x0, y0, x1, y1) {
	    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
	  }
	  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
	    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
	    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
	    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
	  }
	  function d3_svg_line(projection) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
	    function line(data) {
	      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
	      function segment() {
	        segments.push("M", interpolate(projection(points), tension));
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
	        } else if (points.length) {
	          segment();
	          points = [];
	        }
	      }
	      if (points.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    line.x = function(_) {
	      if (!arguments.length) return x;
	      x = _;
	      return line;
	    };
	    line.y = function(_) {
	      if (!arguments.length) return y;
	      y = _;
	      return line;
	    };
	    line.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return line;
	    };
	    line.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      return line;
	    };
	    line.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return line;
	    };
	    return line;
	  }
	  d3.svg.line = function() {
	    return d3_svg_line(d3_identity);
	  };
	  var d3_svg_lineInterpolators = d3.map({
	    linear: d3_svg_lineLinear,
	    "linear-closed": d3_svg_lineLinearClosed,
	    step: d3_svg_lineStep,
	    "step-before": d3_svg_lineStepBefore,
	    "step-after": d3_svg_lineStepAfter,
	    basis: d3_svg_lineBasis,
	    "basis-open": d3_svg_lineBasisOpen,
	    "basis-closed": d3_svg_lineBasisClosed,
	    bundle: d3_svg_lineBundle,
	    cardinal: d3_svg_lineCardinal,
	    "cardinal-open": d3_svg_lineCardinalOpen,
	    "cardinal-closed": d3_svg_lineCardinalClosed,
	    monotone: d3_svg_lineMonotone
	  });
	  d3_svg_lineInterpolators.forEach(function(key, value) {
	    value.key = key;
	    value.closed = /-closed$/.test(key);
	  });
	  function d3_svg_lineLinear(points) {
	    return points.length > 1 ? points.join("L") : points + "Z";
	  }
	  function d3_svg_lineLinearClosed(points) {
	    return points.join("L") + "Z";
	  }
	  function d3_svg_lineStep(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
	    if (n > 1) path.push("H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepBefore(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepAfter(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
	    return path.join("");
	  }
	  function d3_svg_lineCardinalOpen(points, tension) {
	    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineCardinalClosed(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
	    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
	  }
	  function d3_svg_lineCardinal(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineHermite(points, tangents) {
	    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
	      return d3_svg_lineLinear(points);
	    }
	    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
	    if (quad) {
	      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
	      p0 = points[1];
	      pi = 2;
	    }
	    if (tangents.length > 1) {
	      t = tangents[1];
	      p = points[pi];
	      pi++;
	      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      for (var i = 2; i < tangents.length; i++, pi++) {
	        p = points[pi];
	        t = tangents[i];
	        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      }
	    }
	    if (quad) {
	      var lp = points[pi];
	      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
	    }
	    return path;
	  }
	  function d3_svg_lineCardinalTangents(points, tension) {
	    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
	    while (++i < n) {
	      p0 = p1;
	      p1 = p2;
	      p2 = points[i];
	      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineBasis(points) {
	    if (points.length < 3) return d3_svg_lineLinear(points);
	    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    points.push(points[n - 1]);
	    while (++i <= n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    points.pop();
	    path.push("L", pi);
	    return path.join("");
	  }
	  function d3_svg_lineBasisOpen(points) {
	    if (points.length < 4) return d3_svg_lineLinear(points);
	    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
	    while (++i < 3) {
	      pi = points[i];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
	    --i;
	    while (++i < n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBasisClosed(points) {
	    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
	    while (++i < 4) {
	      pi = points[i % n];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    --i;
	    while (++i < m) {
	      pi = points[i % n];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBundle(points, tension) {
	    var n = points.length - 1;
	    if (n) {
	      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
	      while (++i <= n) {
	        p = points[i];
	        t = i / n;
	        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
	        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
	      }
	    }
	    return d3_svg_lineBasis(points);
	  }
	  function d3_svg_lineDot4(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	  }
	  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
	  function d3_svg_lineBasisBezier(path, x, y) {
	    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
	  }
	  function d3_svg_lineSlope(p0, p1) {
	    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
	  }
	  function d3_svg_lineFiniteDifferences(points) {
	    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
	    while (++i < j) {
	      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
	    }
	    m[i] = d;
	    return m;
	  }
	  function d3_svg_lineMonotoneTangents(points) {
	    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
	    while (++i < j) {
	      d = d3_svg_lineSlope(points[i], points[i + 1]);
	      if (abs(d) < ε) {
	        m[i] = m[i + 1] = 0;
	      } else {
	        a = m[i] / d;
	        b = m[i + 1] / d;
	        s = a * a + b * b;
	        if (s > 9) {
	          s = d * 3 / Math.sqrt(s);
	          m[i] = s * a;
	          m[i + 1] = s * b;
	        }
	      }
	    }
	    i = -1;
	    while (++i <= j) {
	      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
	      tangents.push([ s || 0, m[i] * s || 0 ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineMonotone(points) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
	  }
	  d3.svg.line.radial = function() {
	    var line = d3_svg_line(d3_svg_lineRadial);
	    line.radius = line.x, delete line.x;
	    line.angle = line.y, delete line.y;
	    return line;
	  };
	  function d3_svg_lineRadial(points) {
	    var point, i = -1, n = points.length, r, a;
	    while (++i < n) {
	      point = points[i];
	      r = point[0];
	      a = point[1] - halfπ;
	      point[0] = r * Math.cos(a);
	      point[1] = r * Math.sin(a);
	    }
	    return points;
	  }
	  function d3_svg_area(projection) {
	    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
	    function area(data) {
	      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
	        return x;
	      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
	        return y;
	      } : d3_functor(y1), x, y;
	      function segment() {
	        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
	          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
	        } else if (points0.length) {
	          segment();
	          points0 = [];
	          points1 = [];
	        }
	      }
	      if (points0.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    area.x = function(_) {
	      if (!arguments.length) return x1;
	      x0 = x1 = _;
	      return area;
	    };
	    area.x0 = function(_) {
	      if (!arguments.length) return x0;
	      x0 = _;
	      return area;
	    };
	    area.x1 = function(_) {
	      if (!arguments.length) return x1;
	      x1 = _;
	      return area;
	    };
	    area.y = function(_) {
	      if (!arguments.length) return y1;
	      y0 = y1 = _;
	      return area;
	    };
	    area.y0 = function(_) {
	      if (!arguments.length) return y0;
	      y0 = _;
	      return area;
	    };
	    area.y1 = function(_) {
	      if (!arguments.length) return y1;
	      y1 = _;
	      return area;
	    };
	    area.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return area;
	    };
	    area.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      interpolateReverse = interpolate.reverse || interpolate;
	      L = interpolate.closed ? "M" : "L";
	      return area;
	    };
	    area.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return area;
	    };
	    return area;
	  }
	  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
	  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
	  d3.svg.area = function() {
	    return d3_svg_area(d3_identity);
	  };
	  d3.svg.area.radial = function() {
	    var area = d3_svg_area(d3_svg_lineRadial);
	    area.radius = area.x, delete area.x;
	    area.innerRadius = area.x0, delete area.x0;
	    area.outerRadius = area.x1, delete area.x1;
	    area.angle = area.y, delete area.y;
	    area.startAngle = area.y0, delete area.y0;
	    area.endAngle = area.y1, delete area.y1;
	    return area;
	  };
	  d3.svg.chord = function() {
	    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
	    function chord(d, i) {
	      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
	      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
	    }
	    function subgroup(self, f, d, i) {
	      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
	      return {
	        r: r,
	        a0: a0,
	        a1: a1,
	        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
	        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
	      };
	    }
	    function equals(a, b) {
	      return a.a0 == b.a0 && a.a1 == b.a1;
	    }
	    function arc(r, p, a) {
	      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
	    }
	    function curve(r0, p0, r1, p1) {
	      return "Q 0,0 " + p1;
	    }
	    chord.radius = function(v) {
	      if (!arguments.length) return radius;
	      radius = d3_functor(v);
	      return chord;
	    };
	    chord.source = function(v) {
	      if (!arguments.length) return source;
	      source = d3_functor(v);
	      return chord;
	    };
	    chord.target = function(v) {
	      if (!arguments.length) return target;
	      target = d3_functor(v);
	      return chord;
	    };
	    chord.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return chord;
	    };
	    chord.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return chord;
	    };
	    return chord;
	  };
	  function d3_svg_chordRadius(d) {
	    return d.radius;
	  }
	  d3.svg.diagonal = function() {
	    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
	    function diagonal(d, i) {
	      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
	        x: p0.x,
	        y: m
	      }, {
	        x: p3.x,
	        y: m
	      }, p3 ];
	      p = p.map(projection);
	      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
	    }
	    diagonal.source = function(x) {
	      if (!arguments.length) return source;
	      source = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.target = function(x) {
	      if (!arguments.length) return target;
	      target = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.projection = function(x) {
	      if (!arguments.length) return projection;
	      projection = x;
	      return diagonal;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalProjection(d) {
	    return [ d.x, d.y ];
	  }
	  d3.svg.diagonal.radial = function() {
	    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
	    diagonal.projection = function(x) {
	      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalRadialProjection(projection) {
	    return function() {
	      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
	      return [ r * Math.cos(a), r * Math.sin(a) ];
	    };
	  }
	  d3.svg.symbol = function() {
	    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
	    function symbol(d, i) {
	      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
	    }
	    symbol.type = function(x) {
	      if (!arguments.length) return type;
	      type = d3_functor(x);
	      return symbol;
	    };
	    symbol.size = function(x) {
	      if (!arguments.length) return size;
	      size = d3_functor(x);
	      return symbol;
	    };
	    return symbol;
	  };
	  function d3_svg_symbolSize() {
	    return 64;
	  }
	  function d3_svg_symbolType() {
	    return "circle";
	  }
	  function d3_svg_symbolCircle(size) {
	    var r = Math.sqrt(size / π);
	    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
	  }
	  var d3_svg_symbols = d3.map({
	    circle: d3_svg_symbolCircle,
	    cross: function(size) {
	      var r = Math.sqrt(size / 5) / 2;
	      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
	    },
	    diamond: function(size) {
	      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
	      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
	    },
	    square: function(size) {
	      var r = Math.sqrt(size) / 2;
	      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
	    },
	    "triangle-down": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
	    },
	    "triangle-up": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
	    }
	  });
	  d3.svg.symbolTypes = d3_svg_symbols.keys();
	  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
	  d3_selectionPrototype.transition = function(name) {
	    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
	      time: Date.now(),
	      ease: d3_ease_cubicInOut,
	      delay: 0,
	      duration: 250
	    };
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_selectionPrototype.interrupt = function(name) {
	    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
	  };
	  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
	  function d3_selection_interruptNS(ns) {
	    return function() {
	      var lock, activeId, active;
	      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
	        active.timer.c = null;
	        active.timer.t = NaN;
	        if (--lock.count) delete lock[activeId]; else delete this[ns];
	        lock.active += .5;
	        active.event && active.event.interrupt.call(this, this.__data__, active.index);
	      }
	    };
	  }
	  function d3_transition(groups, ns, id) {
	    d3_subclass(groups, d3_transitionPrototype);
	    groups.namespace = ns;
	    groups.id = id;
	    return groups;
	  }
	  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
	  d3_transitionPrototype.call = d3_selectionPrototype.call;
	  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
	  d3_transitionPrototype.node = d3_selectionPrototype.node;
	  d3_transitionPrototype.size = d3_selectionPrototype.size;
	  d3.transition = function(selection, name) {
	    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
	  };
	  d3.transition.prototype = d3_transitionPrototype;
	  d3_transitionPrototype.select = function(selector) {
	    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
	          if ("__data__" in node) subnode.__data__ = node.__data__;
	          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
	          subgroup.push(subnode);
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.selectAll = function(selector) {
	    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          transition = node[ns][id];
	          subnodes = selector.call(node, node.__data__, i, j);
	          subgroups.push(subgroup = []);
	          for (var k = -1, o = subnodes.length; ++k < o; ) {
	            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
	            subgroup.push(subnode);
	          }
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_transition(subgroups, this.namespace, this.id);
	  };
	  d3_transitionPrototype.tween = function(name, tween) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
	    return d3_selection_each(this, tween == null ? function(node) {
	      node[ns][id].tween.remove(name);
	    } : function(node) {
	      node[ns][id].tween.set(name, tween);
	    });
	  };
	  function d3_transition_tween(groups, name, value, tween) {
	    var id = groups.id, ns = groups.namespace;
	    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
	    } : (value = tween(value), function(node) {
	      node[ns][id].tween.set(name, value);
	    }));
	  }
	  d3_transitionPrototype.attr = function(nameNS, value) {
	    if (arguments.length < 2) {
	      for (value in nameNS) this.attr(value, nameNS[value]);
	      return this;
	    }
	    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrTween(b) {
	      return b == null ? attrNull : (b += "", function() {
	        var a = this.getAttribute(name), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttribute(name, i(t));
	        });
	      });
	    }
	    function attrTweenNS(b) {
	      return b == null ? attrNullNS : (b += "", function() {
	        var a = this.getAttributeNS(name.space, name.local), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttributeNS(name.space, name.local, i(t));
	        });
	      });
	    }
	    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.attrTween = function(nameNS, tween) {
	    var name = d3.ns.qualify(nameNS);
	    function attrTween(d, i) {
	      var f = tween.call(this, d, i, this.getAttribute(name));
	      return f && function(t) {
	        this.setAttribute(name, f(t));
	      };
	    }
	    function attrTweenNS(d, i) {
	      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
	      return f && function(t) {
	        this.setAttributeNS(name.space, name.local, f(t));
	      };
	    }
	    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.style(priority, name[priority], value);
	        return this;
	      }
	      priority = "";
	    }
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleString(b) {
	      return b == null ? styleNull : (b += "", function() {
	        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
	        return a !== b && (i = d3_interpolate(a, b), function(t) {
	          this.style.setProperty(name, i(t), priority);
	        });
	      });
	    }
	    return d3_transition_tween(this, "style." + name, value, styleString);
	  };
	  d3_transitionPrototype.styleTween = function(name, tween, priority) {
	    if (arguments.length < 3) priority = "";
	    function styleTween(d, i) {
	      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
	      return f && function(t) {
	        this.style.setProperty(name, f(t), priority);
	      };
	    }
	    return this.tween("style." + name, styleTween);
	  };
	  d3_transitionPrototype.text = function(value) {
	    return d3_transition_tween(this, "text", value, d3_transition_text);
	  };
	  function d3_transition_text(b) {
	    if (b == null) b = "";
	    return function() {
	      this.textContent = b;
	    };
	  }
	  d3_transitionPrototype.remove = function() {
	    var ns = this.namespace;
	    return this.each("end.transition", function() {
	      var p;
	      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
	    });
	  };
	  d3_transitionPrototype.ease = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].ease;
	    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
	    return d3_selection_each(this, function(node) {
	      node[ns][id].ease = value;
	    });
	  };
	  d3_transitionPrototype.delay = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].delay;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].delay = +value.call(node, node.__data__, i, j);
	    } : (value = +value, function(node) {
	      node[ns][id].delay = value;
	    }));
	  };
	  d3_transitionPrototype.duration = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].duration;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
	    } : (value = Math.max(1, value), function(node) {
	      node[ns][id].duration = value;
	    }));
	  };
	  d3_transitionPrototype.each = function(type, listener) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 2) {
	      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
	      try {
	        d3_transitionInheritId = id;
	        d3_selection_each(this, function(node, i, j) {
	          d3_transitionInherit = node[ns][id];
	          type.call(node, node.__data__, i, j);
	        });
	      } finally {
	        d3_transitionInherit = inherit;
	        d3_transitionInheritId = inheritId;
	      }
	    } else {
	      d3_selection_each(this, function(node) {
	        var transition = node[ns][id];
	        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
	      });
	    }
	    return this;
	  };
	  d3_transitionPrototype.transition = function() {
	    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if (node = group[i]) {
	          transition = node[ns][id0];
	          d3_transitionNode(node, i, ns, id1, {
	            time: transition.time,
	            ease: transition.ease,
	            delay: transition.delay + transition.duration,
	            duration: transition.duration
	          });
	        }
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id1);
	  };
	  function d3_transitionNamespace(name) {
	    return name == null ? "__transition__" : "__transition_" + name + "__";
	  }
	  function d3_transitionNode(node, i, ns, id, inherit) {
	    var lock = node[ns] || (node[ns] = {
	      active: 0,
	      count: 0
	    }), transition = lock[id], time, timer, duration, ease, tweens;
	    function schedule(elapsed) {
	      var delay = transition.delay;
	      timer.t = delay + time;
	      if (delay <= elapsed) return start(elapsed - delay);
	      timer.c = start;
	    }
	    function start(elapsed) {
	      var activeId = lock.active, active = lock[activeId];
	      if (active) {
	        active.timer.c = null;
	        active.timer.t = NaN;
	        --lock.count;
	        delete lock[activeId];
	        active.event && active.event.interrupt.call(node, node.__data__, active.index);
	      }
	      for (var cancelId in lock) {
	        if (+cancelId < id) {
	          var cancel = lock[cancelId];
	          cancel.timer.c = null;
	          cancel.timer.t = NaN;
	          --lock.count;
	          delete lock[cancelId];
	        }
	      }
	      timer.c = tick;
	      d3_timer(function() {
	        if (timer.c && tick(elapsed || 1)) {
	          timer.c = null;
	          timer.t = NaN;
	        }
	        return 1;
	      }, 0, time);
	      lock.active = id;
	      transition.event && transition.event.start.call(node, node.__data__, i);
	      tweens = [];
	      transition.tween.forEach(function(key, value) {
	        if (value = value.call(node, node.__data__, i)) {
	          tweens.push(value);
	        }
	      });
	      ease = transition.ease;
	      duration = transition.duration;
	    }
	    function tick(elapsed) {
	      var t = elapsed / duration, e = ease(t), n = tweens.length;
	      while (n > 0) {
	        tweens[--n].call(node, e);
	      }
	      if (t >= 1) {
	        transition.event && transition.event.end.call(node, node.__data__, i);
	        if (--lock.count) delete lock[id]; else delete node[ns];
	        return 1;
	      }
	    }
	    if (!transition) {
	      time = inherit.time;
	      timer = d3_timer(schedule, 0, time);
	      transition = lock[id] = {
	        tween: new d3_Map(),
	        time: time,
	        timer: timer,
	        delay: inherit.delay,
	        duration: inherit.duration,
	        ease: inherit.ease,
	        index: i
	      };
	      inherit = null;
	      ++lock.count;
	    }
	  }
	  d3.svg.axis = function() {
	    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
	    function axis(g) {
	      g.each(function() {
	        var g = d3.select(this);
	        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
	        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
	        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
	        d3.transition(path));
	        tickEnter.append("line");
	        tickEnter.append("text");
	        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
	        if (orient === "bottom" || orient === "top") {
	          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
	          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
	          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
	        } else {
	          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
	          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
	          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
	        }
	        lineEnter.attr(y2, sign * innerTickSize);
	        textEnter.attr(y1, sign * tickSpacing);
	        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
	        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
	        if (scale1.rangeBand) {
	          var x = scale1, dx = x.rangeBand() / 2;
	          scale0 = scale1 = function(d) {
	            return x(d) + dx;
	          };
	        } else if (scale0.rangeBand) {
	          scale0 = scale1;
	        } else {
	          tickExit.call(tickTransform, scale1, scale0);
	        }
	        tickEnter.call(tickTransform, scale0, scale1);
	        tickUpdate.call(tickTransform, scale1, scale1);
	      });
	    }
	    axis.scale = function(x) {
	      if (!arguments.length) return scale;
	      scale = x;
	      return axis;
	    };
	    axis.orient = function(x) {
	      if (!arguments.length) return orient;
	      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
	      return axis;
	    };
	    axis.ticks = function() {
	      if (!arguments.length) return tickArguments_;
	      tickArguments_ = d3_array(arguments);
	      return axis;
	    };
	    axis.tickValues = function(x) {
	      if (!arguments.length) return tickValues;
	      tickValues = x;
	      return axis;
	    };
	    axis.tickFormat = function(x) {
	      if (!arguments.length) return tickFormat_;
	      tickFormat_ = x;
	      return axis;
	    };
	    axis.tickSize = function(x) {
	      var n = arguments.length;
	      if (!n) return innerTickSize;
	      innerTickSize = +x;
	      outerTickSize = +arguments[n - 1];
	      return axis;
	    };
	    axis.innerTickSize = function(x) {
	      if (!arguments.length) return innerTickSize;
	      innerTickSize = +x;
	      return axis;
	    };
	    axis.outerTickSize = function(x) {
	      if (!arguments.length) return outerTickSize;
	      outerTickSize = +x;
	      return axis;
	    };
	    axis.tickPadding = function(x) {
	      if (!arguments.length) return tickPadding;
	      tickPadding = +x;
	      return axis;
	    };
	    axis.tickSubdivide = function() {
	      return arguments.length && axis;
	    };
	    return axis;
	  };
	  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
	    top: 1,
	    right: 1,
	    bottom: 1,
	    left: 1
	  };
	  function d3_svg_axisX(selection, x0, x1) {
	    selection.attr("transform", function(d) {
	      var v0 = x0(d);
	      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
	    });
	  }
	  function d3_svg_axisY(selection, y0, y1) {
	    selection.attr("transform", function(d) {
	      var v0 = y0(d);
	      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
	    });
	  }
	  d3.svg.brush = function() {
	    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
	    function brush(g) {
	      g.each(function() {
	        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
	        var background = g.selectAll(".background").data([ 0 ]);
	        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
	        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
	        var resize = g.selectAll(".resize").data(resizes, d3_identity);
	        resize.exit().remove();
	        resize.enter().append("g").attr("class", function(d) {
	          return "resize " + d;
	        }).style("cursor", function(d) {
	          return d3_svg_brushCursor[d];
	        }).append("rect").attr("x", function(d) {
	          return /[ew]$/.test(d) ? -3 : null;
	        }).attr("y", function(d) {
	          return /^[ns]/.test(d) ? -3 : null;
	        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
	        resize.style("display", brush.empty() ? "none" : null);
	        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
	        if (x) {
	          range = d3_scaleRange(x);
	          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
	          redrawX(gUpdate);
	        }
	        if (y) {
	          range = d3_scaleRange(y);
	          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
	          redrawY(gUpdate);
	        }
	        redraw(gUpdate);
	      });
	    }
	    brush.event = function(g) {
	      g.each(function() {
	        var event_ = event.of(this, arguments), extent1 = {
	          x: xExtent,
	          y: yExtent,
	          i: xExtentDomain,
	          j: yExtentDomain
	        }, extent0 = this.__chart__ || extent1;
	        this.__chart__ = extent1;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.brush", function() {
	            xExtentDomain = extent0.i;
	            yExtentDomain = extent0.j;
	            xExtent = extent0.x;
	            yExtent = extent0.y;
	            event_({
	              type: "brushstart"
	            });
	          }).tween("brush:brush", function() {
	            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
	            xExtentDomain = yExtentDomain = null;
	            return function(t) {
	              xExtent = extent1.x = xi(t);
	              yExtent = extent1.y = yi(t);
	              event_({
	                type: "brush",
	                mode: "resize"
	              });
	            };
	          }).each("end.brush", function() {
	            xExtentDomain = extent1.i;
	            yExtentDomain = extent1.j;
	            event_({
	              type: "brush",
	              mode: "resize"
	            });
	            event_({
	              type: "brushend"
	            });
	          });
	        } else {
	          event_({
	            type: "brushstart"
	          });
	          event_({
	            type: "brush",
	            mode: "resize"
	          });
	          event_({
	            type: "brushend"
	          });
	        }
	      });
	    };
	    function redraw(g) {
	      g.selectAll(".resize").attr("transform", function(d) {
	        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
	      });
	    }
	    function redrawX(g) {
	      g.select(".extent").attr("x", xExtent[0]);
	      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
	    }
	    function redrawY(g) {
	      g.select(".extent").attr("y", yExtent[0]);
	      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
	    }
	    function brushstart() {
	      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
	      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
	      if (d3.event.changedTouches) {
	        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
	      } else {
	        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
	      }
	      g.interrupt().selectAll("*").interrupt();
	      if (dragging) {
	        origin[0] = xExtent[0] - origin[0];
	        origin[1] = yExtent[0] - origin[1];
	      } else if (resizing) {
	        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
	        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
	        origin[0] = xExtent[ex];
	        origin[1] = yExtent[ey];
	      } else if (d3.event.altKey) center = origin.slice();
	      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
	      d3.select("body").style("cursor", eventTarget.style("cursor"));
	      event_({
	        type: "brushstart"
	      });
	      brushmove();
	      function keydown() {
	        if (d3.event.keyCode == 32) {
	          if (!dragging) {
	            center = null;
	            origin[0] -= xExtent[1];
	            origin[1] -= yExtent[1];
	            dragging = 2;
	          }
	          d3_eventPreventDefault();
	        }
	      }
	      function keyup() {
	        if (d3.event.keyCode == 32 && dragging == 2) {
	          origin[0] += xExtent[1];
	          origin[1] += yExtent[1];
	          dragging = 0;
	          d3_eventPreventDefault();
	        }
	      }
	      function brushmove() {
	        var point = d3.mouse(target), moved = false;
	        if (offset) {
	          point[0] += offset[0];
	          point[1] += offset[1];
	        }
	        if (!dragging) {
	          if (d3.event.altKey) {
	            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
	            origin[0] = xExtent[+(point[0] < center[0])];
	            origin[1] = yExtent[+(point[1] < center[1])];
	          } else center = null;
	        }
	        if (resizingX && move1(point, x, 0)) {
	          redrawX(g);
	          moved = true;
	        }
	        if (resizingY && move1(point, y, 1)) {
	          redrawY(g);
	          moved = true;
	        }
	        if (moved) {
	          redraw(g);
	          event_({
	            type: "brush",
	            mode: dragging ? "move" : "resize"
	          });
	        }
	      }
	      function move1(point, scale, i) {
	        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
	        if (dragging) {
	          r0 -= position;
	          r1 -= size + position;
	        }
	        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
	        if (dragging) {
	          max = (min += position) + size;
	        } else {
	          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
	          if (position < min) {
	            max = min;
	            min = position;
	          } else {
	            max = position;
	          }
	        }
	        if (extent[0] != min || extent[1] != max) {
	          if (i) yExtentDomain = null; else xExtentDomain = null;
	          extent[0] = min;
	          extent[1] = max;
	          return true;
	        }
	      }
	      function brushend() {
	        brushmove();
	        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
	        d3.select("body").style("cursor", null);
	        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
	        dragRestore();
	        event_({
	          type: "brushend"
	        });
	      }
	    }
	    brush.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.clamp = function(z) {
	      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
	      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
	      return brush;
	    };
	    brush.extent = function(z) {
	      var x0, x1, y0, y1, t;
	      if (!arguments.length) {
	        if (x) {
	          if (xExtentDomain) {
	            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
	          } else {
	            x0 = xExtent[0], x1 = xExtent[1];
	            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
	            if (x1 < x0) t = x0, x0 = x1, x1 = t;
	          }
	        }
	        if (y) {
	          if (yExtentDomain) {
	            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
	          } else {
	            y0 = yExtent[0], y1 = yExtent[1];
	            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
	            if (y1 < y0) t = y0, y0 = y1, y1 = t;
	          }
	        }
	        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
	      }
	      if (x) {
	        x0 = z[0], x1 = z[1];
	        if (y) x0 = x0[0], x1 = x1[0];
	        xExtentDomain = [ x0, x1 ];
	        if (x.invert) x0 = x(x0), x1 = x(x1);
	        if (x1 < x0) t = x0, x0 = x1, x1 = t;
	        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
	      }
	      if (y) {
	        y0 = z[0], y1 = z[1];
	        if (x) y0 = y0[1], y1 = y1[1];
	        yExtentDomain = [ y0, y1 ];
	        if (y.invert) y0 = y(y0), y1 = y(y1);
	        if (y1 < y0) t = y0, y0 = y1, y1 = t;
	        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
	      }
	      return brush;
	    };
	    brush.clear = function() {
	      if (!brush.empty()) {
	        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
	        xExtentDomain = yExtentDomain = null;
	      }
	      return brush;
	    };
	    brush.empty = function() {
	      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
	    };
	    return d3.rebind(brush, event, "on");
	  };
	  var d3_svg_brushCursor = {
	    n: "ns-resize",
	    e: "ew-resize",
	    s: "ns-resize",
	    w: "ew-resize",
	    nw: "nwse-resize",
	    ne: "nesw-resize",
	    se: "nwse-resize",
	    sw: "nesw-resize"
	  };
	  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
	  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
	  var d3_time_formatUtc = d3_time_format.utc;
	  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
	  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
	  function d3_time_formatIsoNative(date) {
	    return date.toISOString();
	  }
	  d3_time_formatIsoNative.parse = function(string) {
	    var date = new Date(string);
	    return isNaN(date) ? null : date;
	  };
	  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
	  d3_time.second = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 1e3) * 1e3);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
	  }, function(date) {
	    return date.getSeconds();
	  });
	  d3_time.seconds = d3_time.second.range;
	  d3_time.seconds.utc = d3_time.second.utc.range;
	  d3_time.minute = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 6e4) * 6e4);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
	  }, function(date) {
	    return date.getMinutes();
	  });
	  d3_time.minutes = d3_time.minute.range;
	  d3_time.minutes.utc = d3_time.minute.utc.range;
	  d3_time.hour = d3_time_interval(function(date) {
	    var timezone = date.getTimezoneOffset() / 60;
	    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
	  }, function(date) {
	    return date.getHours();
	  });
	  d3_time.hours = d3_time.hour.range;
	  d3_time.hours.utc = d3_time.hour.utc.range;
	  d3_time.month = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setDate(1);
	    return date;
	  }, function(date, offset) {
	    date.setMonth(date.getMonth() + offset);
	  }, function(date) {
	    return date.getMonth();
	  });
	  d3_time.months = d3_time.month.range;
	  d3_time.months.utc = d3_time.month.utc.range;
	  function d3_time_scale(linear, methods, format) {
	    function scale(x) {
	      return linear(x);
	    }
	    scale.invert = function(x) {
	      return d3_time_scaleDate(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
	      linear.domain(x);
	      return scale;
	    };
	    function tickMethod(extent, count) {
	      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
	      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
	        return d / 31536e6;
	      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
	    }
	    scale.nice = function(interval, skip) {
	      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
	      if (method) interval = method[0], skip = method[1];
	      function skipped(date) {
	        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
	      }
	      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
	        floor: function(date) {
	          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
	          return date;
	        },
	        ceil: function(date) {
	          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
	          return date;
	        }
	      } : interval));
	    };
	    scale.ticks = function(interval, skip) {
	      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
	        range: interval
	      }, skip ];
	      if (method) interval = method[0], skip = method[1];
	      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
	    };
	    scale.tickFormat = function() {
	      return format;
	    };
	    scale.copy = function() {
	      return d3_time_scale(linear.copy(), methods, format);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_time_scaleDate(t) {
	    return new Date(t);
	  }
	  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
	  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
	  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
	    return d.getMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getHours();
	  } ], [ "%a %d", function(d) {
	    return d.getDay() && d.getDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getMonth();
	  } ], [ "%Y", d3_true ] ]);
	  var d3_time_scaleMilliseconds = {
	    range: function(start, stop, step) {
	      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
	    },
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  d3_time_scaleLocalMethods.year = d3_time.year;
	  d3_time.scale = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
	  };
	  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
	    return [ m[0].utc, m[1] ];
	  });
	  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
	    return d.getUTCMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getUTCSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getUTCMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getUTCHours();
	  } ], [ "%a %d", function(d) {
	    return d.getUTCDay() && d.getUTCDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getUTCDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getUTCMonth();
	  } ], [ "%Y", d3_true ] ]);
	  d3_time_scaleUtcMethods.year = d3_time.year.utc;
	  d3_time.scale.utc = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
	  };
	  d3.text = d3_xhrType(function(request) {
	    return request.responseText;
	  });
	  d3.json = function(url, callback) {
	    return d3_xhr(url, "application/json", d3_json, callback);
	  };
	  function d3_json(request) {
	    return JSON.parse(request.responseText);
	  }
	  d3.html = function(url, callback) {
	    return d3_xhr(url, "text/html", d3_html, callback);
	  };
	  function d3_html(request) {
	    var range = d3_document.createRange();
	    range.selectNode(d3_document.body);
	    return range.createContextualFragment(request.responseText);
	  }
	  d3.xml = d3_xhrType(function(request) {
	    return request.responseXML;
	  });
	  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
	}();

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(11);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]_[local]_[hash:base64:5]!./../../node_modules/postcss-loader/index.js!./ParallelCoordinates.mcss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]_[local]_[hash:base64:5]!./../../node_modules/postcss-loader/index.js!./ParallelCoordinates.mcss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports


	// module
	exports.push([module.id, ".ParallelCoordinates_hidden_2JlhD {\n  display: none;\n}\n\n.ParallelCoordinates_selectionBars_n1pl- {\n  stroke: white;\n  stroke-width: 2;\n  fill: rgb(105, 195, 255);\n}\n\n.ParallelCoordinates_controlItem_1uD5e {\n  cursor: pointer;\n}\n\n.ParallelCoordinates_axisControlElements_hlaHe {\n  cursor: pointer;\n  pointer-events: all;\n}\n\n.ParallelCoordinates_upsideDown_1wqdU polygon.top {\n  stroke: rgb(151, 151, 151);\n  fill: rgb(216, 216, 216);\n}\n\n.ParallelCoordinates_upsideDown_1wqdU polygon.bottom {\n  stroke: rgb(151, 151, 151);\n  fill: black;\n}\n\n.ParallelCoordinates_rightsideUp_34HID polygon.bottom {\n  stroke: rgb(151, 151, 151);\n  fill: rgb(216, 216, 216);\n}\n\n.ParallelCoordinates_rightsideUp_34HID polygon.top {\n  stroke: rgb(151, 151, 151);\n  fill: black;\n}\n\n.ParallelCoordinates_axisAnnotationIndicators_2Y_Ih {\n  fill: none;\n  stroke-width: 2;\n  stroke: rgb(105, 195, 255);\n  display: none;\n}\n\n.ParallelCoordinates_axisAnnotated_2dK7n {\n  display: block;\n}\n\n.ParallelCoordinates_axisLabels_fuqQI {\n  font-family: \"Optima\", \"Linux Biolinum\", \"URW Classico\", sans;\n  font-size: 12px;\n  fill: black;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n\n.ParallelCoordinates_axisTicks_21fua {\n  font-family: \"Optima\", \"Linux Biolinum\", \"URW Classico\", sans;\n  font-size: 9px;\n  fill: black;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n}\n\n.ParallelCoordinates_annotatedAxisText_3j3K9 {\n  font-size: 13px;\n  fill: rgb(105, 195, 255);\n  pointer-events: all;\n  cursor: pointer;\n}\n\n.ParallelCoordinates_axisLines_yrjlm {\n  fill: grey;\n}\n\n.ParallelCoordinates_parallelCoordsOverlay_1wwZR {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 3;\n}\n\n.ParallelCoordinates_parallelCoordsOverlay_1wwZR polygon {\n  stroke: #979797;\n  fill: #D8D8D8;\n}\n\n.ParallelCoordinates_axisControlsGroupContainer_2IBOx {\n  stroke: none;\n  stroke-width: 1;\n  fill: none;\n  fill-rule: evenodd;\n}\n\n.ParallelCoordinates_hoverBinIndicator_3cjFF {\n  fill: blue;\n  position: relative;\n}\n\n.ParallelCoordinates_parallelCoordsOverlay_1wwZR rect.left-rect:hover ~ polygon.left {\n  stroke: black;\n  fill: darkgray;\n}\n\n.ParallelCoordinates_parallelCoordsOverlay_1wwZR rect.right-rect:hover ~ polygon.right {\n  stroke: black;\n  fill: darkgray;\n}\n\n.ParallelCoordinates_parallelCoordsOverlay_1wwZR rect.center-rect:hover ~ polygon.top {\n  stroke: black;\n  fill: darkgray;\n}\n\n.ParallelCoordinates_parallelCoordsOverlay_1wwZR rect.center-rect:hover ~ polygon.bottom {\n  stroke: black;\n  fill: darkgray;\n}\n\nspan.pc-placeholder-title, span.pc-placeholder-info {\n    font-family: \"Optima\", \"Linux Biolinum\", \"URW Classico\", sans;\n    text-align: center;\n    -webkit-user-select: none;\n       -moz-user-select: none;\n        -ms-user-select: none;\n            user-select: none;\n}\n\ndiv.parallel-coords-placeholder span.pc-placeholder-title {\n    font-size: 45px;\n}\n\ndiv.parallel-coords-placeholder {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 30%;\n}\n\ndiv.pc-placeholder-row {\n  text-align: center;\n}\n\n.ParallelCoordinates_parallelCoordsOverlay_1wwZR g.axis-controls-group polygon {\n  pointer-events: none;\n}\n\nuse.ParallelCoordinates_colorToFill_Fq87K * {\n  fill: currentColor;\n}\n\nuse.ParallelCoordinates_blackStroke_jJWHa * {\n  stroke: black;\n}\n", ""]);

	// exports
	exports.locals = {
		"hidden": "ParallelCoordinates_hidden_2JlhD",
		"selectionBars": "ParallelCoordinates_selectionBars_n1pl-",
		"controlItem": "ParallelCoordinates_controlItem_1uD5e",
		"axisControlElements": "ParallelCoordinates_axisControlElements_hlaHe",
		"upsideDown": "ParallelCoordinates_upsideDown_1wqdU",
		"rightsideUp": "ParallelCoordinates_rightsideUp_34HID",
		"axisAnnotationIndicators": "ParallelCoordinates_axisAnnotationIndicators_2Y_Ih",
		"axisAnnotated": "ParallelCoordinates_axisAnnotated_2dK7n",
		"axisLabels": "ParallelCoordinates_axisLabels_fuqQI",
		"axisTicks": "ParallelCoordinates_axisTicks_21fua",
		"annotatedAxisText": "ParallelCoordinates_annotatedAxisText_3j3K9",
		"axisLines": "ParallelCoordinates_axisLines_yrjlm",
		"parallelCoordsOverlay": "ParallelCoordinates_parallelCoordsOverlay_1wwZR",
		"axisControlsGroupContainer": "ParallelCoordinates_axisControlsGroupContainer_2IBOx",
		"hoverBinIndicator": "ParallelCoordinates_hoverBinIndicator_3cjFF",
		"colorToFill": "ParallelCoordinates_colorToFill_Fq87K",
		"blackStroke": "ParallelCoordinates_blackStroke_jJWHa"
	};

/***/ },
/* 12 */
/***/ function(module, exports) {

	module.exports = "<g class=\"axis-controls-group-container\" width=\"108\" height=\"50\" viewBox=\"0 0 108 50\">\n  <g class=\"axis-controls-group\">\n    <rect class=\"center-rect\" x=\"28\" y=\"1\" width=\"52\" height=\"48\"></rect>\n    <rect class=\"right-rect\" x=\"82\" y=\"1\" width=\"25\" height=\"48\"></rect>\n    <rect class=\"left-rect\" x=\"1\" y=\"1\" width=\"25\" height=\"48\"></rect>\n    <polygon class=\"top\" points=\"54 1 78 23 30 23 \"></polygon>\n    <polygon class=\"right\" transform=\"translate(94.000000, 25.000000) rotate(-270.000000) translate(-94.000000, -25.000000) \" points=\"94 14 118 36 70 36 \"></polygon>\n    <polygon class=\"left\" transform=\"translate(14.000000, 25.000000) scale(-1, 1) rotate(-270.000000) translate(-14.000000, -25.000000) \" points=\"14 14 38 36 -10 36 \"></polygon>\n    <polygon class=\"bottom\" transform=\"translate(54.000000, 38.000000) scale(1, -1) translate(-54.000000, -38.000000) \" points=\"54 27 78 49 30 49 \"></polygon>\n  </g>\n</g>\n";

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "dd2b12fdad175453c8a7633ffa7e600e.png";

/***/ },
/* 14 */
/***/ function(module, exports) {

	module.exports = "<div class=\"parallel-coords-placeholder\">\n  <div class=\"pc-placeholder-row\">\n    <span class=\"pc-placeholder-title\">Parallel Coordinates</span>\n  </div>\n  <div class=\"pc-placeholder-row\">\n    <img class=\"pc-placeholder-image\"/>\n  </div>\n  <div class=\"pc-placeholder-row\">\n    <span class=\"pc-placeholder-info\">Please select two or more variables</span>\n  </div>\n</div>\n";

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _ = __webpack_require__(5);

	var _Axis = __webpack_require__(16);

	var _Axis2 = _interopRequireDefault(_Axis);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// ----------------------------------------------------------------------------

	var AxesManager = function () {
	  function AxesManager() {
	    _classCallCheck(this, AxesManager);

	    this.axes = [];
	    this.listeners = [];
	    this.axisListChangeListeners = [];
	  }

	  _createClass(AxesManager, [{
	    key: 'clearAxes',
	    value: function clearAxes() {
	      if (this.axes.length) {
	        this.axes = [];
	        this.triggerAxisListChange();
	      }
	    }
	  }, {
	    key: 'updateAxes',
	    value: function updateAxes(axisList) {
	      var _this = this;

	      if (this.axes.length === 0) {
	        axisList.forEach(function (entry) {
	          _this.addAxis(new _Axis2.default(entry.name, entry.range));
	        });
	      } else {
	        (function () {
	          var targetList = [];
	          var toAdd = [];

	          // index axes
	          var nameToAxisMap = {};
	          _this.axes.forEach(function (axis) {
	            nameToAxisMap[axis.name] = axis;
	          });

	          axisList.forEach(function (entry) {
	            targetList.push(entry.name);
	            if (!nameToAxisMap[entry.name]) {
	              toAdd.push(new _Axis2.default(entry.name, entry.range));
	            }
	          });

	          // Remove unwanted axis while keeping the previous order
	          var previousSize = _this.axes.length;
	          _this.axes = _this.axes.filter(function (axis) {
	            return targetList.indexOf(axis.name) !== -1;
	          }).concat(toAdd);
	          if (toAdd.length || _this.axes.length !== previousSize) {
	            _this.triggerAxisListChange();
	          }
	        })();
	      }
	      // Update index
	      this.axes.forEach(function (item, idx) {
	        item.idx = idx;
	      });
	    }
	  }, {
	    key: 'addAxis',
	    value: function addAxis(axis) {
	      axis.idx = this.axes.length;
	      this.axes.push(axis);
	      this.triggerAxisListChange();
	    }
	  }, {
	    key: 'getAxis',
	    value: function getAxis(index) {
	      return this.axes[index];
	    }
	  }, {
	    key: 'getAxisByName',
	    value: function getAxisByName(name) {
	      return this.axes.filter(function (axis) {
	        return axis.name === name;
	      })[0];
	    }
	  }, {
	    key: 'canRender',
	    value: function canRender() {
	      return this.axes.length > 1;
	    }
	  }, {
	    key: 'getNumberOf2DHistogram',
	    value: function getNumberOf2DHistogram() {
	      return this.axes.length - 1;
	    }
	  }, {
	    key: 'getNumberOfAxes',
	    value: function getNumberOfAxes() {
	      return this.axes.length;
	    }
	  }, {
	    key: 'getAxesNames',
	    value: function getAxesNames() {
	      return this.axes.map(function (axis) {
	        return axis.name;
	      });
	    }
	  }, {
	    key: 'getAxesPairs',
	    value: function getAxesPairs() {
	      var axesPairs = [];
	      for (var i = 1; i < this.axes.length; i++) {
	        axesPairs.push([this.axes[i - 1].name, this.axes[i].name]);
	      }
	      return axesPairs;
	    }
	  }, {
	    key: 'resetSelections',
	    value: function resetSelections() {
	      var selections = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      this.clearSelection(true);

	      // index axes
	      var nameToAxisMap = {};
	      this.axes.forEach(function (axis) {
	        nameToAxisMap[axis.name] = axis;
	      });

	      // Update selections
	      Object.keys(selections).forEach(function (axisName) {
	        nameToAxisMap[axisName].selections = selections[axisName];
	      });
	      this.triggerSelectionChange();
	    }
	  }, {
	    key: 'addSelection',
	    value: function addSelection(axisIdx, start, end) {
	      this.axes[axisIdx].addSelection(start < end ? start : end, end < start ? start : end);
	      this.triggerSelectionChange();
	    }
	  }, {
	    key: 'updateSelection',
	    value: function updateSelection(axisIdx, selectionIdx, start, end) {
	      this.axes[axisIdx].updateSelection(selectionIdx, start < end ? start : end, end < start ? start : end);
	      this.triggerSelectionChange();
	    }
	  }, {
	    key: 'clearSelection',
	    value: function clearSelection(axisIdx) {
	      this.axes[axisIdx].clearSelection();
	      this.triggerSelectionChange();
	    }
	  }, {
	    key: 'getAxisCenter',
	    value: function getAxisCenter(index, width) {
	      return index * width / (this.axes.length - 1);
	    }
	  }, {
	    key: 'toggleOrientation',
	    value: function toggleOrientation(index) {
	      this.axes[index].toggleOrientation();
	    }
	  }, {
	    key: 'swapAxes',
	    value: function swapAxes(aIdx, bIdx) {
	      if (!this.axes[aIdx] || !this.axes[bIdx]) {
	        return;
	      }
	      var a = this.axes[aIdx];
	      var b = this.axes[bIdx];
	      this.axes[aIdx] = b;
	      this.axes[bIdx] = a;
	      a.idx = bIdx;
	      b.idx = aIdx;
	      this.triggerAxisListChange();
	    }
	  }, {
	    key: 'hasSelection',
	    value: function hasSelection() {
	      return this.axes.filter(function (axis) {
	        return axis.hasSelection();
	      }).length > 0;
	    }
	  }, {
	    key: 'clearAllSelections',
	    value: function clearAllSelections(silence) {
	      this.axes.forEach(function (axis) {
	        return axis.clearSelection();
	      });
	      if (!silence) {
	        this.triggerSelectionChange();
	      }
	    }
	  }, {
	    key: 'onSelectionChange',
	    value: function onSelectionChange(callback) {
	      var _this2 = this;

	      var listenerId = this.listeners.length;
	      var unsubscribe = function unsubscribe() {
	        _this2.listeners[listenerId] = null;
	      };
	      this.listeners.push(callback);
	      return { unsubscribe: unsubscribe };
	    }
	  }, {
	    key: 'triggerSelectionChange',
	    value: function triggerSelectionChange() {
	      var _this3 = this;

	      setImmediate(function () {
	        var selection = {};
	        if (_this3.hasSelection) {
	          selection.type = 'range';
	          selection.ranges = {};
	          _this3.axes.forEach(function (axis) {
	            if (axis.hasSelection()) {
	              selection.ranges[axis.name] = [].concat(axis.selections);
	            }
	          });
	        } else {
	          selection.type = 'empty';
	        }

	        // Notify listeners
	        _this3.listeners.forEach(function (listener) {
	          if (listener) {
	            listener(selection);
	          }
	        });
	      });
	    }
	  }, {
	    key: 'onAxisListChange',
	    value: function onAxisListChange(callback) {
	      var _this4 = this;

	      var listenerId = this.axisListChangeListeners.length;
	      var unsubscribe = function unsubscribe() {
	        _this4.axisListChangeListeners[listenerId] = null;
	      };
	      this.axisListChangeListeners.push(callback);
	      return { unsubscribe: unsubscribe };
	    }
	  }, {
	    key: 'triggerAxisListChange',
	    value: function triggerAxisListChange() {
	      var _this5 = this;

	      setImmediate(function () {
	        var selection = {};
	        if (_this5.hasSelection) {
	          selection.type = 'range';
	          selection.ranges = {};
	          _this5.axes.forEach(function (axis) {
	            if (axis.hasSelection()) {
	              selection.ranges[axis.name] = [].concat(axis.selections);
	            }
	          });
	        } else {
	          selection.type = 'empty';
	        }

	        // Notify listeners
	        _this5.axisListChangeListeners.forEach(function (listener) {
	          if (listener) {
	            listener(selection);
	          }
	        });
	      });
	    }
	  }, {
	    key: 'getPredicates',
	    value: function getPredicates() {
	      var count = this.axes.length;
	      var predicates = [];
	      while (count--) {
	        var axisPredicates = this.axis[count].getPredicates();
	        if (axisPredicates) {
	          predicates.push('&&');
	          predicates.push(axisPredicates);
	        }
	      }
	      predicates[0] = { type: 'L&' };
	      // Flip array to have the proper order
	      return predicates.reverse();
	    }
	  }, {
	    key: 'getSelections',
	    value: function getSelections() {
	      var selections = {};
	      this.axes.forEach(function (axis) {
	        if (axis.hasSelection()) {
	          selections[axis.name] = [].concat(axis.selections);
	        }
	      });
	      return selections;
	    }
	  }, {
	    key: 'extractSelections',
	    value: function extractSelections(model) {
	      var _this6 = this;

	      var selections = [];
	      if (this.hasSelection()) {
	        this.axes.forEach(function (axis, index) {
	          var screenX = _this6.getAxisCenter(index, model.drawableArea.width) + model.borderOffsetLeft;
	          axis.selections.forEach(function (selection, selectionIndex) {
	            selections.push({
	              index: index,
	              selectionIndex: selectionIndex,
	              screenX: screenX,
	              screenRangeY: [(0, _.dataToScreen)(model, selection[0], axis), (0, _.dataToScreen)(model, selection[1], axis)]
	            });
	          });
	        });
	      }
	      return selections;
	    }
	  }, {
	    key: 'extractAxesControl',
	    value: function extractAxesControl(model) {
	      var _this7 = this;

	      var controlsDataModel = [];
	      this.axes.forEach(function (axis, index) {
	        controlsDataModel.push({
	          orient: !axis.isUpsideDown(),
	          centerX: _this7.getAxisCenter(index, model.drawableArea.width) + model.borderOffsetLeft,
	          centerY: model.canvasArea.height - model.borderOffsetBottom + 30 });
	      });

	      // Tag first/last axis
	      controlsDataModel[0].pos = -1;
	      controlsDataModel[controlsDataModel.length - 1].pos = 1;

	      return controlsDataModel;
	    }
	  }, {
	    key: 'extractLabels',
	    value: function extractLabels(model) {
	      var _this8 = this;

	      var labelModel = [];

	      this.axes.forEach(function (axis, index) {
	        labelModel.push({
	          name: axis.name,
	          centerX: _this8.getAxisCenter(index, model.drawableArea.width) + model.borderOffsetLeft,
	          annotated: axis.hasSelection(),
	          align: 'middle'
	        });
	      });

	      // Tag first/last axis
	      labelModel[0].align = 'start';
	      labelModel[labelModel.length - 1].align = 'end';

	      return labelModel;
	    }
	  }, {
	    key: 'extractAxisTicks',
	    value: function extractAxisTicks(model) {
	      var _this9 = this;

	      var tickModel = [];

	      this.axes.forEach(function (axis, index) {
	        tickModel.push({
	          value: !axis.upsideDown ? axis.range[1] : axis.range[0],
	          xpos: _this9.getAxisCenter(index, model.drawableArea.width) + model.borderOffsetLeft,
	          ypos: model.borderOffsetTop - 4,
	          align: 'middle'
	        });
	        tickModel.push({
	          value: !axis.upsideDown ? axis.range[0] : axis.range[1],
	          xpos: _this9.getAxisCenter(index, model.drawableArea.width) + model.borderOffsetLeft,
	          ypos: model.borderOffsetTop + model.drawableArea.height + 13,
	          align: 'middle'
	        });
	      });

	      // Make adjustments to ticks for first and last axes
	      tickModel[0].align = 'start';
	      tickModel[1].align = 'start';
	      tickModel[0].xpos -= model.axisWidth / 2;
	      tickModel[1].xpos -= model.axisWidth / 2;

	      tickModel[this.axes.length * 2 - 1].align = 'end';
	      tickModel[this.axes.length * 2 - 2].align = 'end';
	      tickModel[this.axes.length * 2 - 1].xpos += model.axisWidth / 2;
	      tickModel[this.axes.length * 2 - 2].xpos += model.axisWidth / 2;

	      return tickModel;
	    }
	  }, {
	    key: 'extractAxesCenters',
	    value: function extractAxesCenters(model) {
	      var _this10 = this;

	      var axesCenters = [];
	      this.axes.forEach(function (axis, index) {
	        axesCenters.push(_this10.getAxisCenter(index, model.drawableArea.width) + model.borderOffsetLeft);
	      });
	      return axesCenters;
	    }
	  }]);

	  return AxesManager;
	}();

	exports.default = AxesManager;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).setImmediate))

/***/ },
/* 16 */
/***/ function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var to5clause = function to5clause(axis, range) {
	  return [range[0], '<=', axis.name, '<=', range[1], { type: '5C' }];
	};

	var Axis = function () {
	  function Axis(name) {
	    var range = arguments.length <= 1 || arguments[1] === undefined ? [0, 1] : arguments[1];

	    _classCallCheck(this, Axis);

	    this.name = name;
	    this.range = range;
	    this.upsideDown = false;
	    this.selections = [];
	  }

	  _createClass(Axis, [{
	    key: 'toggleOrientation',
	    value: function toggleOrientation() {
	      this.upsideDown = !this.upsideDown;
	    }
	  }, {
	    key: 'isUpsideDown',
	    value: function isUpsideDown() {
	      return this.upsideDown;
	    }
	  }, {
	    key: 'hasSelection',
	    value: function hasSelection() {
	      return this.selections.length > 0;
	    }
	  }, {
	    key: 'getPredicates',
	    value: function getPredicates() {
	      switch (this.selections.length) {
	        case 0:
	          return null;
	        case 1:
	          return to5clause(this, this.selections[0]);
	        default:
	          {
	            var count = this.selections.length;
	            var predicates = [{ type: 'L|' }];
	            while (count--) {
	              predicates.push(to5clause(this, this.selections[count]));
	              if (count) {
	                predicates.push('||');
	              }
	            }
	            // Flip array to have the proper order
	            return predicates.reverse();
	          }
	      }
	    }
	  }, {
	    key: 'updateSelection',
	    value: function updateSelection(selectionIndex, start, end) {
	      var entry = this.selections[selectionIndex] = [start, end];

	      if (start < this.range[0]) {
	        entry[0] = this.range[0];
	      }

	      if (end > this.range[1]) {
	        entry[1] = this.range[1];
	      }

	      // FIXME trigger notification
	    }
	  }, {
	    key: 'addSelection',
	    value: function addSelection(start, end) {
	      var entry = [start < this.range[0] ? this.range[0] : start, end < this.range[1] ? end : this.range[1]];
	      this.selections.push(entry);
	    }
	  }, {
	    key: 'clearSelection',
	    value: function clearSelection() {
	      this.selections = [];
	    }
	  }]);

	  return Axis;
	}();

	exports.default = Axis;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.newInstance = undefined;
	exports.extend = extend;

	var _CompositeClosureHelper = __webpack_require__(6);

	var _CompositeClosureHelper2 = _interopRequireDefault(_CompositeClosureHelper);

	var _d = __webpack_require__(9);

	var _d2 = _interopRequireDefault(_d);

	var _FieldSelector = __webpack_require__(18);

	var _FieldSelector2 = _interopRequireDefault(_FieldSelector);

	var _template = __webpack_require__(27);

	var _template2 = _interopRequireDefault(_template);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// ----------------------------------------------------------------------------
	// Global
	// ----------------------------------------------------------------------------

	// ----------------------------------------------------------------------------
	// Field Selector
	// ----------------------------------------------------------------------------

	function fieldSelector(publicAPI, model) {
	  // private variables
	  var hideField = {
	    minMax: false,
	    hist: false,
	    minMaxWidth: 0,
	    histWidth: 0
	  };

	  // public API
	  publicAPI.resize = function () {
	    publicAPI.render();
	  };

	  publicAPI.setContainer = function (el) {
	    if (model.container) {
	      _d2.default.select(model.container).select('div.fieldSelector').remove();
	    }

	    model.container = el;

	    if (el) {
	      _d2.default.select(model.container).style('overflow-y', 'auto').style('overflow-x', 'hidden');
	      _d2.default.select(model.container).html(_template2.default);
	      model.fieldShowHistogram = model.fieldShowHistogram && model.provider.isA('Histogram1DProvider');
	      // append headers for histogram columns
	      if (model.fieldShowHistogram) {
	        var header = _d2.default.select(model.container).select('thead').select('tr');
	        header.append('th').text('Min').classed(_FieldSelector2.default.jsHistMin, true);
	        header.append('th').text('Histogram').classed(_FieldSelector2.default.jsSparkline, true);
	        header.append('th').text('Max').classed(_FieldSelector2.default.jsHistMax, true);
	      }
	      publicAPI.render();
	    }
	  };

	  publicAPI.render = function () {
	    var legendSize = 15;

	    // Apply style
	    _d2.default.select(model.container).select('thead').classed(_FieldSelector2.default.thead, true);
	    _d2.default.select(model.container).select('tbody').classed(_FieldSelector2.default.tbody, true);
	    _d2.default.select(model.container).select('th.mode').on('click', function (d) {
	      model.displayUnselected = !model.displayUnselected;
	      publicAPI.render();
	    }).select('i')
	    // apply class - 'false' should come first to not remove common base class.
	    .classed(!model.displayUnselected ? _FieldSelector2.default.allFieldsIcon : _FieldSelector2.default.selectedFieldsIcon, false).classed(model.displayUnselected ? _FieldSelector2.default.allFieldsIcon : _FieldSelector2.default.selectedFieldsIcon, true);

	    var data = model.displayUnselected ? model.provider.getFieldNames() : model.provider.getActiveFieldNames();
	    // Update header label
	    _d2.default.select(model.container).select('th.label').text(model.displayUnselected ? 'All Variables (' + data.length + ')' : 'Selected Variables (' + data.length + ')').on('click', function (d) {
	      model.displayUnselected = !model.displayUnselected;
	      publicAPI.render();
	    });

	    // test for too-long rows
	    var hideMore = model.container.scrollWidth > model.container.clientWidth;
	    if (hideMore) {
	      if (!hideField.minMax) {
	        hideField.minMax = true;
	        hideField.minMaxWidth = model.container.scrollWidth;
	        // if we hide min/max, we may also need to hide hist, so trigger another resize
	        setTimeout(publicAPI.resize, 0);
	      } else if (!hideField.hist) {
	        hideField.hist = true;
	        hideField.histWidth = model.container.scrollWidth;
	      }
	    } else if (hideField.minMax) {
	      // if we've hidden something, see if we can re-show it.
	      if (hideField.hist) {
	        if (model.container.scrollWidth - hideField.histWidth > 0) {
	          hideField.hist = false;
	          hideField.histWidth = 0;
	          // if we show hist, we may also need to show min/max, so trigger another resize
	          setTimeout(publicAPI.resize, 0);
	        }
	      } else if (hideField.minMax) {
	        if (model.container.scrollWidth - hideField.minMaxWidth > 0) {
	          hideField.minMax = false;
	          hideField.minMaxWidth = 0;
	        }
	      }
	    }
	    var header = _d2.default.select(model.container).select('thead').select('tr');
	    header.selectAll('.' + _FieldSelector2.default.jsHistMin).style('display', hideField.minMax ? 'none' : null);
	    header.selectAll('.' + _FieldSelector2.default.jsSparkline).style('display', hideField.hist ? 'none' : null);
	    header.selectAll('.' + _FieldSelector2.default.jsHistMax).style('display', hideField.minMax ? 'none' : null);

	    // Handle variables
	    var variablesContainer = _d2.default.select(model.container).select('tbody.fields').selectAll('tr').data(data);

	    variablesContainer.enter().append('tr');
	    variablesContainer.exit().remove();

	    // Apply on each data item
	    function renderField(fieldName, index) {
	      var field = model.provider.getField(fieldName);
	      var fieldContainer = _d2.default.select(this);
	      var legendCell = fieldContainer.select('.' + _FieldSelector2.default.jsLegend);
	      var fieldCell = fieldContainer.select('.' + _FieldSelector2.default.jsFieldName);

	      // Apply style to row (selected/unselected)
	      fieldContainer.classed(!field.active ? _FieldSelector2.default.selectedRow : _FieldSelector2.default.unselectedRow, false).classed(field.active ? _FieldSelector2.default.selectedRow : _FieldSelector2.default.unselectedRow, true).on('click', function (name) {
	        model.provider.toggleFieldSelection(name);
	      });

	      // Create missing DOM element if any
	      if (legendCell.empty()) {
	        legendCell = fieldContainer.append('td').classed(_FieldSelector2.default.legend, true);

	        fieldCell = fieldContainer.append('td').classed(_FieldSelector2.default.fieldName, true);
	      }

	      // Apply legend
	      if (model.provider.isA('LegendProvider')) {
	        var _model$provider$getLe = model.provider.getLegend(fieldName);

	        var color = _model$provider$getLe.color;
	        var shape = _model$provider$getLe.shape;

	        legendCell.html('<svg class=\'' + _FieldSelector2.default.legendSvg + '\' width=\'' + legendSize + '\' height=\'' + legendSize + '\'\n                  fill=\'' + color + '\' stroke=\'black\'><use xlink:href=\'' + shape + '\'/></svg>');
	      } else {
	        legendCell.html('<i></i>').select('i').classed(!field.active ? _FieldSelector2.default.selectedRow : _FieldSelector2.default.unselectedRow, false).classed(field.active ? _FieldSelector2.default.selectedRow : _FieldSelector2.default.unselectedRow, true);
	      }

	      // Apply field name
	      fieldCell.text(fieldName);

	      if (model.fieldShowHistogram) {
	        var minCell = fieldContainer.select('.' + _FieldSelector2.default.jsHistMin);
	        var histCell = fieldContainer.select('.' + _FieldSelector2.default.jsSparkline);
	        var maxCell = fieldContainer.select('.' + _FieldSelector2.default.jsHistMax);

	        if (histCell.empty()) {
	          minCell = fieldContainer.append('td').classed(_FieldSelector2.default.jsHistMin, true);
	          histCell = fieldContainer.append('td').classed(_FieldSelector2.default.sparkline, true);
	          maxCell = fieldContainer.append('td').classed(_FieldSelector2.default.jsHistMax, true);
	          histCell.append('svg').classed(_FieldSelector2.default.sparklineSvg, true).attr('width', model.fieldHistWidth).attr('height', model.fieldHistHeight);
	        }

	        // make sure our data is ready. If not, render will be called when loaded.
	        if (model.provider.loadHistogram1D(fieldName)) {
	          var hobj = model.provider.getHistogram1D(fieldName);
	          if (hobj !== null) {
	            histCell.style('display', hideField.hist ? 'none' : null);
	            // only do work if histogram is displayed.
	            if (!hideField.hist) {
	              (function () {
	                var cmax = 1.0 * _d2.default.max(hobj.counts);
	                var hsize = hobj.counts.length;
	                var hdata = histCell.select('svg').selectAll('.' + _FieldSelector2.default.jsHistRect).data(hobj.counts);

	                hdata.enter().append('rect');
	                // changes apply to both enter and update data join:
	                hdata.classed(_FieldSelector2.default.histRect, true).attr('pname', fieldName).attr('y', function (d) {
	                  return model.fieldHistHeight * (1.0 - d / cmax);
	                }).attr('x', function (d, i) {
	                  return model.fieldHistWidth / hsize * i;
	                }).attr('height', function (d) {
	                  return model.fieldHistHeight * d / cmax;
	                }).attr('width', model.fieldHistWidth / hsize);

	                hdata.exit().remove();
	              })();
	            }

	            var formatter = _d2.default.format('.3s');
	            minCell.text(formatter(hobj.min)).style('display', hideField.minMax ? 'none' : null);
	            maxCell.text(formatter(hobj.max)).style('display', hideField.minMax ? 'none' : null);
	          }
	        }
	      }
	    }

	    // Render all fields
	    variablesContainer.each(renderField);
	  };

	  // Make sure default values get applied
	  publicAPI.setContainer(model.container);

	  model.subscriptions.push({ unsubscribe: publicAPI.setContainer });
	  model.subscriptions.push(model.provider.onFieldChange(publicAPI.render));
	  if (model.fieldShowHistogram) {
	    // event from Histogram Provider
	    model.subscriptions.push(model.provider.onHistogram1DReady(publicAPI.render));
	  }
	}

	// ----------------------------------------------------------------------------
	// Object factory
	// ----------------------------------------------------------------------------

	var DEFAULT_VALUES = {
	  container: null,
	  provider: null,
	  displayUnselected: true,
	  fieldShowHistogram: true,
	  fieldHistWidth: 120,
	  fieldHistHeight: 15
	};

	// ----------------------------------------------------------------------------

	function extend(publicAPI, model) {
	  var initialValues = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  Object.assign(model, DEFAULT_VALUES, initialValues);

	  _CompositeClosureHelper2.default.destroy(publicAPI, model);
	  _CompositeClosureHelper2.default.isA(publicAPI, model, 'VizComponent');
	  _CompositeClosureHelper2.default.get(publicAPI, model, ['provider', 'container', 'fieldShowHistogram']);
	  _CompositeClosureHelper2.default.set(publicAPI, model, ['fieldShowHistogram']);

	  fieldSelector(publicAPI, model);
	}

	// ----------------------------------------------------------------------------

	var newInstance = exports.newInstance = _CompositeClosureHelper2.default.newInstance(extend);

	// ----------------------------------------------------------------------------

	exports.default = { newInstance: newInstance, extend: extend };

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag

	// load the styles
	var content = __webpack_require__(19);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(4)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]_[local]_[hash:base64:5]!./../../node_modules/postcss-loader/index.js!./FieldSelector.mcss", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]_[local]_[hash:base64:5]!./../../node_modules/postcss-loader/index.js!./FieldSelector.mcss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports
	exports.i(__webpack_require__(20), undefined);

	// module
	exports.push([module.id, "/*empty styles allow for d3 selection in javascript*/\n.FieldSelector_jsFieldName_1QN_H,\n.FieldSelector_jsHistMax_sb-L8,\n.FieldSelector_jsHistMin_1Cf9q,\n.FieldSelector_jsHistRect_27Pen,\n.FieldSelector_jsLegend_2QXvQ,\n.FieldSelector_jsSparkline_2Vxgk {\n\n}\n\n.FieldSelector_icon_2Y8cG {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  cursor: pointer;\n}\n\n.FieldSelector_selectedFieldsIcon_1jfaz {\n}\n\n.FieldSelector_allFieldsIcon_2DXP5 {\n}\n\n.FieldSelector_legend_1amq_ {\n  text-align: center;\n  padding: 5px;\n}\n.FieldSelector_legendSvg_1OrnU {\n  vertical-align: middle;\n}\n\n.FieldSelector_fieldName_3FImR {\n  width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.FieldSelector_row_3cxiD {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  cursor: pointer;\n}\n\n.FieldSelector_unselectedRow_1Y5Dk {\n  opacity: 0.5;\n}\n\n.FieldSelector_selectedRow_31J6g {\n  opacity: 1;\n}\n\n.FieldSelector_row_3cxiD:hover {\n  background-color: #ccd;\n}\n\n.FieldSelector_thead_1Yf4t {\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  cursor: pointer;\n  border-bottom: solid 2px #aaa;\n}\n\n.FieldSelector_tbody_XjkGZ {\n}\n\n.FieldSelector_sparkline_3ZOf0 {\n  padding: 2px;\n}\n\n.FieldSelector_sparklineSvg_38FC2 {\n  vertical-align: middle;\n}\n\n.FieldSelector_histRect_1D8Az {\n  fill: #999;\n  stroke: #999;\n  stroke-width: 0.25px;\n}\n", ""]);

	// exports
	exports.locals = {
		"jsFieldName": "FieldSelector_jsFieldName_1QN_H",
		"jsHistMax": "FieldSelector_jsHistMax_sb-L8",
		"jsHistMin": "FieldSelector_jsHistMin_1Cf9q",
		"jsHistRect": "FieldSelector_jsHistRect_27Pen",
		"jsLegend": "FieldSelector_jsLegend_2QXvQ",
		"jsSparkline": "FieldSelector_jsSparkline_2Vxgk",
		"icon": "FieldSelector_icon_2Y8cG " + __webpack_require__(20).locals["fa"] + " " + __webpack_require__(20).locals["fa-fw"] + "",
		"selectedFieldsIcon": "FieldSelector_selectedFieldsIcon_1jfaz FieldSelector_icon_2Y8cG " + __webpack_require__(20).locals["fa"] + " " + __webpack_require__(20).locals["fa-fw"] + " " + __webpack_require__(20).locals["fa-check-square-o"] + "",
		"allFieldsIcon": "FieldSelector_allFieldsIcon_2DXP5 FieldSelector_icon_2Y8cG " + __webpack_require__(20).locals["fa"] + " " + __webpack_require__(20).locals["fa-fw"] + " " + __webpack_require__(20).locals["fa-square-o"] + "",
		"legend": "FieldSelector_legend_1amq_ FieldSelector_jsLegend_2QXvQ",
		"legendSvg": "FieldSelector_legendSvg_1OrnU",
		"fieldName": "FieldSelector_fieldName_3FImR FieldSelector_jsFieldName_1QN_H",
		"row": "FieldSelector_row_3cxiD",
		"unselectedRow": "FieldSelector_unselectedRow_1Y5Dk FieldSelector_row_3cxiD",
		"selectedRow": "FieldSelector_selectedRow_31J6g FieldSelector_row_3cxiD",
		"thead": "FieldSelector_thead_1Yf4t",
		"tbody": "FieldSelector_tbody_XjkGZ",
		"sparkline": "FieldSelector_sparkline_3ZOf0 FieldSelector_jsSparkline_2Vxgk",
		"sparklineSvg": "FieldSelector_sparklineSvg_38FC2",
		"histRect": "FieldSelector_histRect_1D8Az FieldSelector_jsHistRect_27Pen"
	};

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(3)();
	// imports


	// module
	exports.push([module.id, "/*!\n *  Font Awesome 4.5.0 by @davegandy - http://fontawesome.io - @fontawesome\n *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\n */\n/* FONT PATH\n * -------------------------- */\n@font-face {\n  font-family: 'FontAwesome';\n  src: url(" + __webpack_require__(21) + ");\n  src: url(" + __webpack_require__(22) + "?#iefix&v=4.5.0) format('embedded-opentype'), url(" + __webpack_require__(23) + ") format('woff2'), url(" + __webpack_require__(24) + ") format('woff'), url(" + __webpack_require__(25) + ") format('truetype'), url(" + __webpack_require__(26) + "#fontawesomeregular) format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n.font-awesome_fa_hnWyg {\n  display: inline-block;\n  font: normal normal normal 14px/1 FontAwesome;\n  font-size: inherit;\n  text-rendering: auto;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n/* makes the font 33% larger relative to the icon container */\n.font-awesome_fa-lg_2C19L {\n  font-size: 1.33333333em;\n  line-height: 0.75em;\n  vertical-align: -15%;\n}\n.font-awesome_fa-2x_2o5Fl {\n  font-size: 2em;\n}\n.font-awesome_fa-3x_30YuM {\n  font-size: 3em;\n}\n.font-awesome_fa-4x_lsxgd {\n  font-size: 4em;\n}\n.font-awesome_fa-5x_3EQB- {\n  font-size: 5em;\n}\n.font-awesome_fa-fw_3u_fM {\n  width: 1.28571429em;\n  text-align: center;\n}\n.font-awesome_fa-ul_1fwNv {\n  padding-left: 0;\n  margin-left: 2.14285714em;\n  list-style-type: none;\n}\n.font-awesome_fa-ul_1fwNv > li {\n  position: relative;\n}\n.font-awesome_fa-li_1j-Sx {\n  position: absolute;\n  left: -2.14285714em;\n  width: 2.14285714em;\n  top: 0.14285714em;\n  text-align: center;\n}\n.font-awesome_fa-li_1j-Sx.font-awesome_fa-lg_2C19L {\n  left: -1.85714286em;\n}\n.font-awesome_fa-border_3xl6W {\n  padding: .2em .25em .15em;\n  border: solid 0.08em #eeeeee;\n  border-radius: .1em;\n}\n.font-awesome_fa-pull-left_3PF22 {\n  float: left;\n}\n.font-awesome_fa-pull-right_2PdTO {\n  float: right;\n}\n.font-awesome_fa_hnWyg.font-awesome_fa-pull-left_3PF22 {\n  margin-right: .3em;\n}\n.font-awesome_fa_hnWyg.font-awesome_fa-pull-right_2PdTO {\n  margin-left: .3em;\n}\n/* Deprecated as of 4.4.0 */\n.font-awesome_pull-right_3NC9- {\n  float: right;\n}\n.font-awesome_pull-left_3HkP_ {\n  float: left;\n}\n.font-awesome_fa_hnWyg.font-awesome_pull-left_3HkP_ {\n  margin-right: .3em;\n}\n.font-awesome_fa_hnWyg.font-awesome_pull-right_3NC9- {\n  margin-left: .3em;\n}\n.font-awesome_fa-spin_3OhVo {\n  animation: font-awesome_fa-spin_3OhVo 2s infinite linear;\n}\n.font-awesome_fa-pulse_3Tr3D {\n  animation: font-awesome_fa-spin_3OhVo 1s infinite steps(8);\n}\n@keyframes font-awesome_fa-spin_3OhVo {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(359deg);\n  }\n}\n.font-awesome_fa-rotate-90_4fPqv {\n  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1);\n  transform: rotate(90deg);\n}\n.font-awesome_fa-rotate-180_1__19 {\n  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2);\n  transform: rotate(180deg);\n}\n.font-awesome_fa-rotate-270_1gDyc {\n  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3);\n  transform: rotate(270deg);\n}\n.font-awesome_fa-flip-horizontal_3or2m {\n  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1);\n  transform: scale(-1, 1);\n}\n.font-awesome_fa-flip-vertical_38eKG {\n  filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1);\n  transform: scale(1, -1);\n}\n:root .font-awesome_fa-rotate-90_4fPqv,\n:root .font-awesome_fa-rotate-180_1__19,\n:root .font-awesome_fa-rotate-270_1gDyc,\n:root .font-awesome_fa-flip-horizontal_3or2m,\n:root .font-awesome_fa-flip-vertical_38eKG {\n  -webkit-filter: none;\n          filter: none;\n}\n.font-awesome_fa-stack_2X6xB {\n  position: relative;\n  display: inline-block;\n  width: 2em;\n  height: 2em;\n  line-height: 2em;\n  vertical-align: middle;\n}\n.font-awesome_fa-stack-1x_hGmX_,\n.font-awesome_fa-stack-2x_2ziDh {\n  position: absolute;\n  left: 0;\n  width: 100%;\n  text-align: center;\n}\n.font-awesome_fa-stack-1x_hGmX_ {\n  line-height: inherit;\n}\n.font-awesome_fa-stack-2x_2ziDh {\n  font-size: 2em;\n}\n.font-awesome_fa-inverse_3DhFk {\n  color: #ffffff;\n}\n/* Font Awesome uses the Unicode Private Use Area (PUA) to ensure screen\n   readers do not read off random characters that represent icons */\n.font-awesome_fa-glass_29DBz:before {\n  content: \"\\F000\";\n}\n.font-awesome_fa-music_1pRnY:before {\n  content: \"\\F001\";\n}\n.font-awesome_fa-search_Fzb5Y:before {\n  content: \"\\F002\";\n}\n.font-awesome_fa-envelope-o_16g79:before {\n  content: \"\\F003\";\n}\n.font-awesome_fa-heart_2iEcF:before {\n  content: \"\\F004\";\n}\n.font-awesome_fa-star_1xzZ_:before {\n  content: \"\\F005\";\n}\n.font-awesome_fa-star-o_v93q1:before {\n  content: \"\\F006\";\n}\n.font-awesome_fa-user_wGZz4:before {\n  content: \"\\F007\";\n}\n.font-awesome_fa-film_Hq9Bo:before {\n  content: \"\\F008\";\n}\n.font-awesome_fa-th-large_1REIm:before {\n  content: \"\\F009\";\n}\n.font-awesome_fa-th_1OqlB:before {\n  content: \"\\F00A\";\n}\n.font-awesome_fa-th-list_16oxS:before {\n  content: \"\\F00B\";\n}\n.font-awesome_fa-check_3Cmpq:before {\n  content: \"\\F00C\";\n}\n.font-awesome_fa-remove_1QlJA:before,\n.font-awesome_fa-close_3gvJ7:before,\n.font-awesome_fa-times_2seNE:before {\n  content: \"\\F00D\";\n}\n.font-awesome_fa-search-plus_3Iwqw:before {\n  content: \"\\F00E\";\n}\n.font-awesome_fa-search-minus_3TjT6:before {\n  content: \"\\F010\";\n}\n.font-awesome_fa-power-off_kdRAL:before {\n  content: \"\\F011\";\n}\n.font-awesome_fa-signal_FQkm5:before {\n  content: \"\\F012\";\n}\n.font-awesome_fa-gear_x99mJ:before,\n.font-awesome_fa-cog_2WUHh:before {\n  content: \"\\F013\";\n}\n.font-awesome_fa-trash-o_Mtuw8:before {\n  content: \"\\F014\";\n}\n.font-awesome_fa-home_3jbd1:before {\n  content: \"\\F015\";\n}\n.font-awesome_fa-file-o_2VlUn:before {\n  content: \"\\F016\";\n}\n.font-awesome_fa-clock-o_p41Lb:before {\n  content: \"\\F017\";\n}\n.font-awesome_fa-road_Vvk-z:before {\n  content: \"\\F018\";\n}\n.font-awesome_fa-download_2CzOG:before {\n  content: \"\\F019\";\n}\n.font-awesome_fa-arrow-circle-o-down_3AAJ_:before {\n  content: \"\\F01A\";\n}\n.font-awesome_fa-arrow-circle-o-up_6t4NA:before {\n  content: \"\\F01B\";\n}\n.font-awesome_fa-inbox_3vfe0:before {\n  content: \"\\F01C\";\n}\n.font-awesome_fa-play-circle-o_1drCV:before {\n  content: \"\\F01D\";\n}\n.font-awesome_fa-rotate-right_1kmO6:before,\n.font-awesome_fa-repeat_2wiiK:before {\n  content: \"\\F01E\";\n}\n.font-awesome_fa-refresh_2xE2F:before {\n  content: \"\\F021\";\n}\n.font-awesome_fa-list-alt_1rYtg:before {\n  content: \"\\F022\";\n}\n.font-awesome_fa-lock_1BAqC:before {\n  content: \"\\F023\";\n}\n.font-awesome_fa-flag_rQ09O:before {\n  content: \"\\F024\";\n}\n.font-awesome_fa-headphones_32xBu:before {\n  content: \"\\F025\";\n}\n.font-awesome_fa-volume-off_3g6NI:before {\n  content: \"\\F026\";\n}\n.font-awesome_fa-volume-down_VMmA0:before {\n  content: \"\\F027\";\n}\n.font-awesome_fa-volume-up_i8OHh:before {\n  content: \"\\F028\";\n}\n.font-awesome_fa-qrcode_1UGo-:before {\n  content: \"\\F029\";\n}\n.font-awesome_fa-barcode_3epli:before {\n  content: \"\\F02A\";\n}\n.font-awesome_fa-tag_1hEGw:before {\n  content: \"\\F02B\";\n}\n.font-awesome_fa-tags_1-9SA:before {\n  content: \"\\F02C\";\n}\n.font-awesome_fa-book_1Yak0:before {\n  content: \"\\F02D\";\n}\n.font-awesome_fa-bookmark_2sCxc:before {\n  content: \"\\F02E\";\n}\n.font-awesome_fa-print_mbIe_:before {\n  content: \"\\F02F\";\n}\n.font-awesome_fa-camera_3FGGW:before {\n  content: \"\\F030\";\n}\n.font-awesome_fa-font_3ehIR:before {\n  content: \"\\F031\";\n}\n.font-awesome_fa-bold_3j91b:before {\n  content: \"\\F032\";\n}\n.font-awesome_fa-italic_3YjJx:before {\n  content: \"\\F033\";\n}\n.font-awesome_fa-text-height_3S8H9:before {\n  content: \"\\F034\";\n}\n.font-awesome_fa-text-width_3XV4e:before {\n  content: \"\\F035\";\n}\n.font-awesome_fa-align-left_3iZJB:before {\n  content: \"\\F036\";\n}\n.font-awesome_fa-align-center_uispF:before {\n  content: \"\\F037\";\n}\n.font-awesome_fa-align-right_16-u0:before {\n  content: \"\\F038\";\n}\n.font-awesome_fa-align-justify_3NbUN:before {\n  content: \"\\F039\";\n}\n.font-awesome_fa-list_3BYao:before {\n  content: \"\\F03A\";\n}\n.font-awesome_fa-dedent_pVwPZ:before,\n.font-awesome_fa-outdent_3dyGV:before {\n  content: \"\\F03B\";\n}\n.font-awesome_fa-indent_3qtEP:before {\n  content: \"\\F03C\";\n}\n.font-awesome_fa-video-camera_2JUMf:before {\n  content: \"\\F03D\";\n}\n.font-awesome_fa-photo_3L583:before,\n.font-awesome_fa-image_1CT_9:before,\n.font-awesome_fa-picture-o_2rR2z:before {\n  content: \"\\F03E\";\n}\n.font-awesome_fa-pencil_3ISe0:before {\n  content: \"\\F040\";\n}\n.font-awesome_fa-map-marker__ZkXj:before {\n  content: \"\\F041\";\n}\n.font-awesome_fa-adjust_30VsR:before {\n  content: \"\\F042\";\n}\n.font-awesome_fa-tint_3d2oA:before {\n  content: \"\\F043\";\n}\n.font-awesome_fa-edit_3-svS:before,\n.font-awesome_fa-pencil-square-o_1bt6e:before {\n  content: \"\\F044\";\n}\n.font-awesome_fa-share-square-o_IoAQM:before {\n  content: \"\\F045\";\n}\n.font-awesome_fa-check-square-o_3-198:before {\n  content: \"\\F046\";\n}\n.font-awesome_fa-arrows_3DD0F:before {\n  content: \"\\F047\";\n}\n.font-awesome_fa-step-backward_gRmyl:before {\n  content: \"\\F048\";\n}\n.font-awesome_fa-fast-backward_1tdiL:before {\n  content: \"\\F049\";\n}\n.font-awesome_fa-backward_27eFX:before {\n  content: \"\\F04A\";\n}\n.font-awesome_fa-play_1QfD7:before {\n  content: \"\\F04B\";\n}\n.font-awesome_fa-pause_2-K_r:before {\n  content: \"\\F04C\";\n}\n.font-awesome_fa-stop_3326j:before {\n  content: \"\\F04D\";\n}\n.font-awesome_fa-forward_QL2Is:before {\n  content: \"\\F04E\";\n}\n.font-awesome_fa-fast-forward_3z2xy:before {\n  content: \"\\F050\";\n}\n.font-awesome_fa-step-forward_3CkwZ:before {\n  content: \"\\F051\";\n}\n.font-awesome_fa-eject_2P_cK:before {\n  content: \"\\F052\";\n}\n.font-awesome_fa-chevron-left_2TrVu:before {\n  content: \"\\F053\";\n}\n.font-awesome_fa-chevron-right_2FC0Z:before {\n  content: \"\\F054\";\n}\n.font-awesome_fa-plus-circle_1gW5a:before {\n  content: \"\\F055\";\n}\n.font-awesome_fa-minus-circle_24f2I:before {\n  content: \"\\F056\";\n}\n.font-awesome_fa-times-circle_15GGs:before {\n  content: \"\\F057\";\n}\n.font-awesome_fa-check-circle_3d-zD:before {\n  content: \"\\F058\";\n}\n.font-awesome_fa-question-circle_2LkeW:before {\n  content: \"\\F059\";\n}\n.font-awesome_fa-info-circle_7D0Nk:before {\n  content: \"\\F05A\";\n}\n.font-awesome_fa-crosshairs_2ipvZ:before {\n  content: \"\\F05B\";\n}\n.font-awesome_fa-times-circle-o_7E1ty:before {\n  content: \"\\F05C\";\n}\n.font-awesome_fa-check-circle-o_2-WqW:before {\n  content: \"\\F05D\";\n}\n.font-awesome_fa-ban_3N6-L:before {\n  content: \"\\F05E\";\n}\n.font-awesome_fa-arrow-left_12ikd:before {\n  content: \"\\F060\";\n}\n.font-awesome_fa-arrow-right_3cLsX:before {\n  content: \"\\F061\";\n}\n.font-awesome_fa-arrow-up_3EjJ4:before {\n  content: \"\\F062\";\n}\n.font-awesome_fa-arrow-down_19pUt:before {\n  content: \"\\F063\";\n}\n.font-awesome_fa-mail-forward_pm8qu:before,\n.font-awesome_fa-share_1UqmT:before {\n  content: \"\\F064\";\n}\n.font-awesome_fa-expand_3cLMR:before {\n  content: \"\\F065\";\n}\n.font-awesome_fa-compress_2eA8C:before {\n  content: \"\\F066\";\n}\n.font-awesome_fa-plus_6J6Jo:before {\n  content: \"\\F067\";\n}\n.font-awesome_fa-minus_30TYM:before {\n  content: \"\\F068\";\n}\n.font-awesome_fa-asterisk_1it1m:before {\n  content: \"\\F069\";\n}\n.font-awesome_fa-exclamation-circle_2SFzV:before {\n  content: \"\\F06A\";\n}\n.font-awesome_fa-gift_2XuBW:before {\n  content: \"\\F06B\";\n}\n.font-awesome_fa-leaf_3t_ZT:before {\n  content: \"\\F06C\";\n}\n.font-awesome_fa-fire_2F3aN:before {\n  content: \"\\F06D\";\n}\n.font-awesome_fa-eye_ZQ8Fy:before {\n  content: \"\\F06E\";\n}\n.font-awesome_fa-eye-slash_3OOyY:before {\n  content: \"\\F070\";\n}\n.font-awesome_fa-warning_3iTUa:before,\n.font-awesome_fa-exclamation-triangle_CSnqP:before {\n  content: \"\\F071\";\n}\n.font-awesome_fa-plane_zzEWn:before {\n  content: \"\\F072\";\n}\n.font-awesome_fa-calendar_Hiai7:before {\n  content: \"\\F073\";\n}\n.font-awesome_fa-random_3fK7H:before {\n  content: \"\\F074\";\n}\n.font-awesome_fa-comment_zpSZ8:before {\n  content: \"\\F075\";\n}\n.font-awesome_fa-magnet_lHFlc:before {\n  content: \"\\F076\";\n}\n.font-awesome_fa-chevron-up_3xOHT:before {\n  content: \"\\F077\";\n}\n.font-awesome_fa-chevron-down_1kr8E:before {\n  content: \"\\F078\";\n}\n.font-awesome_fa-retweet_39_p3:before {\n  content: \"\\F079\";\n}\n.font-awesome_fa-shopping-cart_3e9Os:before {\n  content: \"\\F07A\";\n}\n.font-awesome_fa-folder_3EYxP:before {\n  content: \"\\F07B\";\n}\n.font-awesome_fa-folder-open_3F1Iv:before {\n  content: \"\\F07C\";\n}\n.font-awesome_fa-arrows-v_1QSAw:before {\n  content: \"\\F07D\";\n}\n.font-awesome_fa-arrows-h_3ZZHF:before {\n  content: \"\\F07E\";\n}\n.font-awesome_fa-bar-chart-o_1L01W:before,\n.font-awesome_fa-bar-chart_2yCqc:before {\n  content: \"\\F080\";\n}\n.font-awesome_fa-twitter-square_Vanpe:before {\n  content: \"\\F081\";\n}\n.font-awesome_fa-facebook-square_1QV1U:before {\n  content: \"\\F082\";\n}\n.font-awesome_fa-camera-retro_37Cam:before {\n  content: \"\\F083\";\n}\n.font-awesome_fa-key_REK4V:before {\n  content: \"\\F084\";\n}\n.font-awesome_fa-gears_3uUBl:before,\n.font-awesome_fa-cogs_1SJEQ:before {\n  content: \"\\F085\";\n}\n.font-awesome_fa-comments_1eUBa:before {\n  content: \"\\F086\";\n}\n.font-awesome_fa-thumbs-o-up_1zzMp:before {\n  content: \"\\F087\";\n}\n.font-awesome_fa-thumbs-o-down_2zDaK:before {\n  content: \"\\F088\";\n}\n.font-awesome_fa-star-half_1kyP2:before {\n  content: \"\\F089\";\n}\n.font-awesome_fa-heart-o_2rtBI:before {\n  content: \"\\F08A\";\n}\n.font-awesome_fa-sign-out_3tANt:before {\n  content: \"\\F08B\";\n}\n.font-awesome_fa-linkedin-square_2f8Wh:before {\n  content: \"\\F08C\";\n}\n.font-awesome_fa-thumb-tack_1jvRA:before {\n  content: \"\\F08D\";\n}\n.font-awesome_fa-external-link_2QefG:before {\n  content: \"\\F08E\";\n}\n.font-awesome_fa-sign-in_NND3s:before {\n  content: \"\\F090\";\n}\n.font-awesome_fa-trophy_1sZVt:before {\n  content: \"\\F091\";\n}\n.font-awesome_fa-github-square_3p9Xr:before {\n  content: \"\\F092\";\n}\n.font-awesome_fa-upload_1kXB8:before {\n  content: \"\\F093\";\n}\n.font-awesome_fa-lemon-o_3pHwE:before {\n  content: \"\\F094\";\n}\n.font-awesome_fa-phone_3zGw7:before {\n  content: \"\\F095\";\n}\n.font-awesome_fa-square-o_2QIHX:before {\n  content: \"\\F096\";\n}\n.font-awesome_fa-bookmark-o_24X_j:before {\n  content: \"\\F097\";\n}\n.font-awesome_fa-phone-square_VnqGI:before {\n  content: \"\\F098\";\n}\n.font-awesome_fa-twitter_12GH_:before {\n  content: \"\\F099\";\n}\n.font-awesome_fa-facebook-f_2RU60:before,\n.font-awesome_fa-facebook_1JuFT:before {\n  content: \"\\F09A\";\n}\n.font-awesome_fa-github_uIFGl:before {\n  content: \"\\F09B\";\n}\n.font-awesome_fa-unlock_3o3xn:before {\n  content: \"\\F09C\";\n}\n.font-awesome_fa-credit-card_1yRq7:before {\n  content: \"\\F09D\";\n}\n.font-awesome_fa-feed_3vx3g:before,\n.font-awesome_fa-rss_3qmaL:before {\n  content: \"\\F09E\";\n}\n.font-awesome_fa-hdd-o_1-oSX:before {\n  content: \"\\F0A0\";\n}\n.font-awesome_fa-bullhorn_3dj3e:before {\n  content: \"\\F0A1\";\n}\n.font-awesome_fa-bell_2z-Se:before {\n  content: \"\\F0F3\";\n}\n.font-awesome_fa-certificate_2m_WA:before {\n  content: \"\\F0A3\";\n}\n.font-awesome_fa-hand-o-right_12X8H:before {\n  content: \"\\F0A4\";\n}\n.font-awesome_fa-hand-o-left_3ilyw:before {\n  content: \"\\F0A5\";\n}\n.font-awesome_fa-hand-o-up_1dk80:before {\n  content: \"\\F0A6\";\n}\n.font-awesome_fa-hand-o-down_2K6g3:before {\n  content: \"\\F0A7\";\n}\n.font-awesome_fa-arrow-circle-left_2rcrX:before {\n  content: \"\\F0A8\";\n}\n.font-awesome_fa-arrow-circle-right_3zqgF:before {\n  content: \"\\F0A9\";\n}\n.font-awesome_fa-arrow-circle-up_2pOH2:before {\n  content: \"\\F0AA\";\n}\n.font-awesome_fa-arrow-circle-down_2xcyd:before {\n  content: \"\\F0AB\";\n}\n.font-awesome_fa-globe_3890w:before {\n  content: \"\\F0AC\";\n}\n.font-awesome_fa-wrench_3BVJx:before {\n  content: \"\\F0AD\";\n}\n.font-awesome_fa-tasks_2xaal:before {\n  content: \"\\F0AE\";\n}\n.font-awesome_fa-filter_2Wrnx:before {\n  content: \"\\F0B0\";\n}\n.font-awesome_fa-briefcase_xoYe6:before {\n  content: \"\\F0B1\";\n}\n.font-awesome_fa-arrows-alt_1GZf0:before {\n  content: \"\\F0B2\";\n}\n.font-awesome_fa-group_3RqP9:before,\n.font-awesome_fa-users_9e5mO:before {\n  content: \"\\F0C0\";\n}\n.font-awesome_fa-chain_2sLkY:before,\n.font-awesome_fa-link_2jwCA:before {\n  content: \"\\F0C1\";\n}\n.font-awesome_fa-cloud_1jb6d:before {\n  content: \"\\F0C2\";\n}\n.font-awesome_fa-flask_2OV9p:before {\n  content: \"\\F0C3\";\n}\n.font-awesome_fa-cut_r06nj:before,\n.font-awesome_fa-scissors_3Hu82:before {\n  content: \"\\F0C4\";\n}\n.font-awesome_fa-copy_1mQAm:before,\n.font-awesome_fa-files-o_2teqR:before {\n  content: \"\\F0C5\";\n}\n.font-awesome_fa-paperclip_3_REy:before {\n  content: \"\\F0C6\";\n}\n.font-awesome_fa-save_3-5_V:before,\n.font-awesome_fa-floppy-o_1OSX5:before {\n  content: \"\\F0C7\";\n}\n.font-awesome_fa-square_2pAQU:before {\n  content: \"\\F0C8\";\n}\n.font-awesome_fa-navicon_1SgYS:before,\n.font-awesome_fa-reorder_YSCJ2:before,\n.font-awesome_fa-bars_1OwG2:before {\n  content: \"\\F0C9\";\n}\n.font-awesome_fa-list-ul_C-a3S:before {\n  content: \"\\F0CA\";\n}\n.font-awesome_fa-list-ol_3jYHW:before {\n  content: \"\\F0CB\";\n}\n.font-awesome_fa-strikethrough_2EIQE:before {\n  content: \"\\F0CC\";\n}\n.font-awesome_fa-underline_2YOvi:before {\n  content: \"\\F0CD\";\n}\n.font-awesome_fa-table_E3XPW:before {\n  content: \"\\F0CE\";\n}\n.font-awesome_fa-magic_yvu1E:before {\n  content: \"\\F0D0\";\n}\n.font-awesome_fa-truck_Q5Pmq:before {\n  content: \"\\F0D1\";\n}\n.font-awesome_fa-pinterest_3qfGd:before {\n  content: \"\\F0D2\";\n}\n.font-awesome_fa-pinterest-square_2xOGm:before {\n  content: \"\\F0D3\";\n}\n.font-awesome_fa-google-plus-square_3Z_95:before {\n  content: \"\\F0D4\";\n}\n.font-awesome_fa-google-plus_2wNdx:before {\n  content: \"\\F0D5\";\n}\n.font-awesome_fa-money_16Hk4:before {\n  content: \"\\F0D6\";\n}\n.font-awesome_fa-caret-down_1IJJK:before {\n  content: \"\\F0D7\";\n}\n.font-awesome_fa-caret-up_1rwhG:before {\n  content: \"\\F0D8\";\n}\n.font-awesome_fa-caret-left_1bvu-:before {\n  content: \"\\F0D9\";\n}\n.font-awesome_fa-caret-right_RLtgW:before {\n  content: \"\\F0DA\";\n}\n.font-awesome_fa-columns_33IZP:before {\n  content: \"\\F0DB\";\n}\n.font-awesome_fa-unsorted_2xPjX:before,\n.font-awesome_fa-sort_2wrsA:before {\n  content: \"\\F0DC\";\n}\n.font-awesome_fa-sort-down_2-roM:before,\n.font-awesome_fa-sort-desc_8jmrC:before {\n  content: \"\\F0DD\";\n}\n.font-awesome_fa-sort-up_1yfwG:before,\n.font-awesome_fa-sort-asc_hWcYe:before {\n  content: \"\\F0DE\";\n}\n.font-awesome_fa-envelope_3Zw5Y:before {\n  content: \"\\F0E0\";\n}\n.font-awesome_fa-linkedin_26dMe:before {\n  content: \"\\F0E1\";\n}\n.font-awesome_fa-rotate-left_aBA3H:before,\n.font-awesome_fa-undo_HTtPj:before {\n  content: \"\\F0E2\";\n}\n.font-awesome_fa-legal_13NBi:before,\n.font-awesome_fa-gavel_oCDQf:before {\n  content: \"\\F0E3\";\n}\n.font-awesome_fa-dashboard_mBkza:before,\n.font-awesome_fa-tachometer_2vVTC:before {\n  content: \"\\F0E4\";\n}\n.font-awesome_fa-comment-o_3cn6-:before {\n  content: \"\\F0E5\";\n}\n.font-awesome_fa-comments-o_25TFE:before {\n  content: \"\\F0E6\";\n}\n.font-awesome_fa-flash_2Rwk6:before,\n.font-awesome_fa-bolt_20mOm:before {\n  content: \"\\F0E7\";\n}\n.font-awesome_fa-sitemap_mjZ6x:before {\n  content: \"\\F0E8\";\n}\n.font-awesome_fa-umbrella_yPU48:before {\n  content: \"\\F0E9\";\n}\n.font-awesome_fa-paste_2NikE:before,\n.font-awesome_fa-clipboard_1vdJf:before {\n  content: \"\\F0EA\";\n}\n.font-awesome_fa-lightbulb-o_dEIll:before {\n  content: \"\\F0EB\";\n}\n.font-awesome_fa-exchange_wkTCO:before {\n  content: \"\\F0EC\";\n}\n.font-awesome_fa-cloud-download_sodD2:before {\n  content: \"\\F0ED\";\n}\n.font-awesome_fa-cloud-upload_20ucA:before {\n  content: \"\\F0EE\";\n}\n.font-awesome_fa-user-md_OssdZ:before {\n  content: \"\\F0F0\";\n}\n.font-awesome_fa-stethoscope_H06UV:before {\n  content: \"\\F0F1\";\n}\n.font-awesome_fa-suitcase_3XJb4:before {\n  content: \"\\F0F2\";\n}\n.font-awesome_fa-bell-o_lYaWL:before {\n  content: \"\\F0A2\";\n}\n.font-awesome_fa-coffee_nagqP:before {\n  content: \"\\F0F4\";\n}\n.font-awesome_fa-cutlery_2p30f:before {\n  content: \"\\F0F5\";\n}\n.font-awesome_fa-file-text-o_bh3Lg:before {\n  content: \"\\F0F6\";\n}\n.font-awesome_fa-building-o_LC3Xo:before {\n  content: \"\\F0F7\";\n}\n.font-awesome_fa-hospital-o_3Ohdg:before {\n  content: \"\\F0F8\";\n}\n.font-awesome_fa-ambulance_tS8Ul:before {\n  content: \"\\F0F9\";\n}\n.font-awesome_fa-medkit_FpC5h:before {\n  content: \"\\F0FA\";\n}\n.font-awesome_fa-fighter-jet_Duwiy:before {\n  content: \"\\F0FB\";\n}\n.font-awesome_fa-beer_2lJmW:before {\n  content: \"\\F0FC\";\n}\n.font-awesome_fa-h-square_PVHIr:before {\n  content: \"\\F0FD\";\n}\n.font-awesome_fa-plus-square_2wXvV:before {\n  content: \"\\F0FE\";\n}\n.font-awesome_fa-angle-double-left_3TZ9n:before {\n  content: \"\\F100\";\n}\n.font-awesome_fa-angle-double-right_yLu-W:before {\n  content: \"\\F101\";\n}\n.font-awesome_fa-angle-double-up_EwtO9:before {\n  content: \"\\F102\";\n}\n.font-awesome_fa-angle-double-down_1ccsi:before {\n  content: \"\\F103\";\n}\n.font-awesome_fa-angle-left_3i6_G:before {\n  content: \"\\F104\";\n}\n.font-awesome_fa-angle-right_1BJdz:before {\n  content: \"\\F105\";\n}\n.font-awesome_fa-angle-up_1EmSm:before {\n  content: \"\\F106\";\n}\n.font-awesome_fa-angle-down_2oYaE:before {\n  content: \"\\F107\";\n}\n.font-awesome_fa-desktop_29cDo:before {\n  content: \"\\F108\";\n}\n.font-awesome_fa-laptop_3kb7h:before {\n  content: \"\\F109\";\n}\n.font-awesome_fa-tablet_NLfj4:before {\n  content: \"\\F10A\";\n}\n.font-awesome_fa-mobile-phone_3pP0B:before,\n.font-awesome_fa-mobile_34bB2:before {\n  content: \"\\F10B\";\n}\n.font-awesome_fa-circle-o_30KjV:before {\n  content: \"\\F10C\";\n}\n.font-awesome_fa-quote-left_3-Fjs:before {\n  content: \"\\F10D\";\n}\n.font-awesome_fa-quote-right_k5eai:before {\n  content: \"\\F10E\";\n}\n.font-awesome_fa-spinner_201mr:before {\n  content: \"\\F110\";\n}\n.font-awesome_fa-circle_2SHTA:before {\n  content: \"\\F111\";\n}\n.font-awesome_fa-mail-reply_3xqwq:before,\n.font-awesome_fa-reply_Lun03:before {\n  content: \"\\F112\";\n}\n.font-awesome_fa-github-alt_uuWT9:before {\n  content: \"\\F113\";\n}\n.font-awesome_fa-folder-o_1sPym:before {\n  content: \"\\F114\";\n}\n.font-awesome_fa-folder-open-o_1ONV2:before {\n  content: \"\\F115\";\n}\n.font-awesome_fa-smile-o_3tWZn:before {\n  content: \"\\F118\";\n}\n.font-awesome_fa-frown-o_1nWrW:before {\n  content: \"\\F119\";\n}\n.font-awesome_fa-meh-o_18ZN3:before {\n  content: \"\\F11A\";\n}\n.font-awesome_fa-gamepad_2lTad:before {\n  content: \"\\F11B\";\n}\n.font-awesome_fa-keyboard-o_27MBO:before {\n  content: \"\\F11C\";\n}\n.font-awesome_fa-flag-o_2J7Pw:before {\n  content: \"\\F11D\";\n}\n.font-awesome_fa-flag-checkered_gbQB4:before {\n  content: \"\\F11E\";\n}\n.font-awesome_fa-terminal_1VsIW:before {\n  content: \"\\F120\";\n}\n.font-awesome_fa-code_1e7tP:before {\n  content: \"\\F121\";\n}\n.font-awesome_fa-mail-reply-all_1IFHD:before,\n.font-awesome_fa-reply-all_3bCnq:before {\n  content: \"\\F122\";\n}\n.font-awesome_fa-star-half-empty_19jhm:before,\n.font-awesome_fa-star-half-full_1ezZD:before,\n.font-awesome_fa-star-half-o_3D00w:before {\n  content: \"\\F123\";\n}\n.font-awesome_fa-location-arrow_3VXkt:before {\n  content: \"\\F124\";\n}\n.font-awesome_fa-crop_2TZFT:before {\n  content: \"\\F125\";\n}\n.font-awesome_fa-code-fork_paoZV:before {\n  content: \"\\F126\";\n}\n.font-awesome_fa-unlink_26p_I:before,\n.font-awesome_fa-chain-broken_Hn22e:before {\n  content: \"\\F127\";\n}\n.font-awesome_fa-question_2ZbkT:before {\n  content: \"\\F128\";\n}\n.font-awesome_fa-info_1ilMz:before {\n  content: \"\\F129\";\n}\n.font-awesome_fa-exclamation_3fuWs:before {\n  content: \"\\F12A\";\n}\n.font-awesome_fa-superscript_1RYhR:before {\n  content: \"\\F12B\";\n}\n.font-awesome_fa-subscript_JVyc0:before {\n  content: \"\\F12C\";\n}\n.font-awesome_fa-eraser_2rBMH:before {\n  content: \"\\F12D\";\n}\n.font-awesome_fa-puzzle-piece_2IFdL:before {\n  content: \"\\F12E\";\n}\n.font-awesome_fa-microphone_3nXcS:before {\n  content: \"\\F130\";\n}\n.font-awesome_fa-microphone-slash_Z_xRW:before {\n  content: \"\\F131\";\n}\n.font-awesome_fa-shield_XMAKw:before {\n  content: \"\\F132\";\n}\n.font-awesome_fa-calendar-o_kj_dX:before {\n  content: \"\\F133\";\n}\n.font-awesome_fa-fire-extinguisher_3fi33:before {\n  content: \"\\F134\";\n}\n.font-awesome_fa-rocket_XlX-B:before {\n  content: \"\\F135\";\n}\n.font-awesome_fa-maxcdn_1xLil:before {\n  content: \"\\F136\";\n}\n.font-awesome_fa-chevron-circle-left_1_MOL:before {\n  content: \"\\F137\";\n}\n.font-awesome_fa-chevron-circle-right__6T2M:before {\n  content: \"\\F138\";\n}\n.font-awesome_fa-chevron-circle-up_1vjkl:before {\n  content: \"\\F139\";\n}\n.font-awesome_fa-chevron-circle-down_2q9gj:before {\n  content: \"\\F13A\";\n}\n.font-awesome_fa-html5_3172h:before {\n  content: \"\\F13B\";\n}\n.font-awesome_fa-css3_3hpVz:before {\n  content: \"\\F13C\";\n}\n.font-awesome_fa-anchor_3ADZJ:before {\n  content: \"\\F13D\";\n}\n.font-awesome_fa-unlock-alt_2Wq4F:before {\n  content: \"\\F13E\";\n}\n.font-awesome_fa-bullseye_1MZIB:before {\n  content: \"\\F140\";\n}\n.font-awesome_fa-ellipsis-h_202RW:before {\n  content: \"\\F141\";\n}\n.font-awesome_fa-ellipsis-v_1upHT:before {\n  content: \"\\F142\";\n}\n.font-awesome_fa-rss-square_5GYE_:before {\n  content: \"\\F143\";\n}\n.font-awesome_fa-play-circle_UAxMZ:before {\n  content: \"\\F144\";\n}\n.font-awesome_fa-ticket_1F5lC:before {\n  content: \"\\F145\";\n}\n.font-awesome_fa-minus-square_h2HVc:before {\n  content: \"\\F146\";\n}\n.font-awesome_fa-minus-square-o_YIqSV:before {\n  content: \"\\F147\";\n}\n.font-awesome_fa-level-up_1xIeO:before {\n  content: \"\\F148\";\n}\n.font-awesome_fa-level-down_2edBx:before {\n  content: \"\\F149\";\n}\n.font-awesome_fa-check-square_1CG8J:before {\n  content: \"\\F14A\";\n}\n.font-awesome_fa-pencil-square_1xSld:before {\n  content: \"\\F14B\";\n}\n.font-awesome_fa-external-link-square_3Wmxg:before {\n  content: \"\\F14C\";\n}\n.font-awesome_fa-share-square_26LdW:before {\n  content: \"\\F14D\";\n}\n.font-awesome_fa-compass_1OOV1:before {\n  content: \"\\F14E\";\n}\n.font-awesome_fa-toggle-down_3Snwz:before,\n.font-awesome_fa-caret-square-o-down_UQ4-n:before {\n  content: \"\\F150\";\n}\n.font-awesome_fa-toggle-up_fbKFG:before,\n.font-awesome_fa-caret-square-o-up_-HvQn:before {\n  content: \"\\F151\";\n}\n.font-awesome_fa-toggle-right_3HIQx:before,\n.font-awesome_fa-caret-square-o-right_2vUW_:before {\n  content: \"\\F152\";\n}\n.font-awesome_fa-euro_2xoFh:before,\n.font-awesome_fa-eur_n5HBL:before {\n  content: \"\\F153\";\n}\n.font-awesome_fa-gbp_3qdgg:before {\n  content: \"\\F154\";\n}\n.font-awesome_fa-dollar_1h10_:before,\n.font-awesome_fa-usd_1hyJh:before {\n  content: \"\\F155\";\n}\n.font-awesome_fa-rupee_3C7tP:before,\n.font-awesome_fa-inr_2WkYV:before {\n  content: \"\\F156\";\n}\n.font-awesome_fa-cny_3Xo-t:before,\n.font-awesome_fa-rmb_2fLKc:before,\n.font-awesome_fa-yen_EiyBf:before,\n.font-awesome_fa-jpy_35sB-:before {\n  content: \"\\F157\";\n}\n.font-awesome_fa-ruble_2a47N:before,\n.font-awesome_fa-rouble_1UMZw:before,\n.font-awesome_fa-rub_2Mrww:before {\n  content: \"\\F158\";\n}\n.font-awesome_fa-won_269J2:before,\n.font-awesome_fa-krw_fkiqf:before {\n  content: \"\\F159\";\n}\n.font-awesome_fa-bitcoin_2YfZJ:before,\n.font-awesome_fa-btc_fmXx6:before {\n  content: \"\\F15A\";\n}\n.font-awesome_fa-file_1XL7O:before {\n  content: \"\\F15B\";\n}\n.font-awesome_fa-file-text_211gP:before {\n  content: \"\\F15C\";\n}\n.font-awesome_fa-sort-alpha-asc_2kkSn:before {\n  content: \"\\F15D\";\n}\n.font-awesome_fa-sort-alpha-desc_GMg7L:before {\n  content: \"\\F15E\";\n}\n.font-awesome_fa-sort-amount-asc_1eilc:before {\n  content: \"\\F160\";\n}\n.font-awesome_fa-sort-amount-desc_3nJO9:before {\n  content: \"\\F161\";\n}\n.font-awesome_fa-sort-numeric-asc_2uPFQ:before {\n  content: \"\\F162\";\n}\n.font-awesome_fa-sort-numeric-desc_39gI9:before {\n  content: \"\\F163\";\n}\n.font-awesome_fa-thumbs-up_hpR6m:before {\n  content: \"\\F164\";\n}\n.font-awesome_fa-thumbs-down_1t43Y:before {\n  content: \"\\F165\";\n}\n.font-awesome_fa-youtube-square_2BoKy:before {\n  content: \"\\F166\";\n}\n.font-awesome_fa-youtube_2IcQW:before {\n  content: \"\\F167\";\n}\n.font-awesome_fa-xing_1saB5:before {\n  content: \"\\F168\";\n}\n.font-awesome_fa-xing-square_1eaD0:before {\n  content: \"\\F169\";\n}\n.font-awesome_fa-youtube-play_1YDEq:before {\n  content: \"\\F16A\";\n}\n.font-awesome_fa-dropbox_1QS8k:before {\n  content: \"\\F16B\";\n}\n.font-awesome_fa-stack-overflow_1M_6a:before {\n  content: \"\\F16C\";\n}\n.font-awesome_fa-instagram_Y4xAF:before {\n  content: \"\\F16D\";\n}\n.font-awesome_fa-flickr_27VkD:before {\n  content: \"\\F16E\";\n}\n.font-awesome_fa-adn_3ZNLb:before {\n  content: \"\\F170\";\n}\n.font-awesome_fa-bitbucket_2zNIA:before {\n  content: \"\\F171\";\n}\n.font-awesome_fa-bitbucket-square_3diMl:before {\n  content: \"\\F172\";\n}\n.font-awesome_fa-tumblr_2DPM8:before {\n  content: \"\\F173\";\n}\n.font-awesome_fa-tumblr-square_1D52j:before {\n  content: \"\\F174\";\n}\n.font-awesome_fa-long-arrow-down_3R3Bh:before {\n  content: \"\\F175\";\n}\n.font-awesome_fa-long-arrow-up_3Ui_T:before {\n  content: \"\\F176\";\n}\n.font-awesome_fa-long-arrow-left_rZrhO:before {\n  content: \"\\F177\";\n}\n.font-awesome_fa-long-arrow-right_1Q4ei:before {\n  content: \"\\F178\";\n}\n.font-awesome_fa-apple_7wR3k:before {\n  content: \"\\F179\";\n}\n.font-awesome_fa-windows_3KsI6:before {\n  content: \"\\F17A\";\n}\n.font-awesome_fa-android_36PDL:before {\n  content: \"\\F17B\";\n}\n.font-awesome_fa-linux_34ym5:before {\n  content: \"\\F17C\";\n}\n.font-awesome_fa-dribbble_x9uIT:before {\n  content: \"\\F17D\";\n}\n.font-awesome_fa-skype_Ea6zH:before {\n  content: \"\\F17E\";\n}\n.font-awesome_fa-foursquare_1n-_X:before {\n  content: \"\\F180\";\n}\n.font-awesome_fa-trello_1f6-H:before {\n  content: \"\\F181\";\n}\n.font-awesome_fa-female_8UbaS:before {\n  content: \"\\F182\";\n}\n.font-awesome_fa-male_3fIAX:before {\n  content: \"\\F183\";\n}\n.font-awesome_fa-gittip_1P70a:before,\n.font-awesome_fa-gratipay_30toI:before {\n  content: \"\\F184\";\n}\n.font-awesome_fa-sun-o_31446:before {\n  content: \"\\F185\";\n}\n.font-awesome_fa-moon-o_2n75c:before {\n  content: \"\\F186\";\n}\n.font-awesome_fa-archive_G8JpR:before {\n  content: \"\\F187\";\n}\n.font-awesome_fa-bug_3QlfQ:before {\n  content: \"\\F188\";\n}\n.font-awesome_fa-vk_uXEy4:before {\n  content: \"\\F189\";\n}\n.font-awesome_fa-weibo_2-NA2:before {\n  content: \"\\F18A\";\n}\n.font-awesome_fa-renren_33jrU:before {\n  content: \"\\F18B\";\n}\n.font-awesome_fa-pagelines_tMlzC:before {\n  content: \"\\F18C\";\n}\n.font-awesome_fa-stack-exchange_cY2TP:before {\n  content: \"\\F18D\";\n}\n.font-awesome_fa-arrow-circle-o-right_3haGk:before {\n  content: \"\\F18E\";\n}\n.font-awesome_fa-arrow-circle-o-left_1k4pd:before {\n  content: \"\\F190\";\n}\n.font-awesome_fa-toggle-left_2vhEF:before,\n.font-awesome_fa-caret-square-o-left_3pFCM:before {\n  content: \"\\F191\";\n}\n.font-awesome_fa-dot-circle-o_17nxr:before {\n  content: \"\\F192\";\n}\n.font-awesome_fa-wheelchair_3WaA-:before {\n  content: \"\\F193\";\n}\n.font-awesome_fa-vimeo-square_GF6Wl:before {\n  content: \"\\F194\";\n}\n.font-awesome_fa-turkish-lira_2tQgt:before,\n.font-awesome_fa-try_2mqvx:before {\n  content: \"\\F195\";\n}\n.font-awesome_fa-plus-square-o_3CCN8:before {\n  content: \"\\F196\";\n}\n.font-awesome_fa-space-shuttle_1sPfI:before {\n  content: \"\\F197\";\n}\n.font-awesome_fa-slack_2x_9I:before {\n  content: \"\\F198\";\n}\n.font-awesome_fa-envelope-square_1RnoR:before {\n  content: \"\\F199\";\n}\n.font-awesome_fa-wordpress_2mlfy:before {\n  content: \"\\F19A\";\n}\n.font-awesome_fa-openid_2N0O4:before {\n  content: \"\\F19B\";\n}\n.font-awesome_fa-institution_tJnfB:before,\n.font-awesome_fa-bank_WmxIq:before,\n.font-awesome_fa-university_V4Twh:before {\n  content: \"\\F19C\";\n}\n.font-awesome_fa-mortar-board_5HxIc:before,\n.font-awesome_fa-graduation-cap_2oENr:before {\n  content: \"\\F19D\";\n}\n.font-awesome_fa-yahoo_QGfiL:before {\n  content: \"\\F19E\";\n}\n.font-awesome_fa-google_2aajj:before {\n  content: \"\\F1A0\";\n}\n.font-awesome_fa-reddit_2sNgE:before {\n  content: \"\\F1A1\";\n}\n.font-awesome_fa-reddit-square_29tDM:before {\n  content: \"\\F1A2\";\n}\n.font-awesome_fa-stumbleupon-circle_2GjkO:before {\n  content: \"\\F1A3\";\n}\n.font-awesome_fa-stumbleupon_LQD2_:before {\n  content: \"\\F1A4\";\n}\n.font-awesome_fa-delicious_yUQRj:before {\n  content: \"\\F1A5\";\n}\n.font-awesome_fa-digg_2pzXU:before {\n  content: \"\\F1A6\";\n}\n.font-awesome_fa-pied-piper_3A59t:before {\n  content: \"\\F1A7\";\n}\n.font-awesome_fa-pied-piper-alt_DhiQX:before {\n  content: \"\\F1A8\";\n}\n.font-awesome_fa-drupal_27RJX:before {\n  content: \"\\F1A9\";\n}\n.font-awesome_fa-joomla_SVESO:before {\n  content: \"\\F1AA\";\n}\n.font-awesome_fa-language_2AN5K:before {\n  content: \"\\F1AB\";\n}\n.font-awesome_fa-fax_16wn2:before {\n  content: \"\\F1AC\";\n}\n.font-awesome_fa-building_3_FfX:before {\n  content: \"\\F1AD\";\n}\n.font-awesome_fa-child_IYme9:before {\n  content: \"\\F1AE\";\n}\n.font-awesome_fa-paw_3rRWV:before {\n  content: \"\\F1B0\";\n}\n.font-awesome_fa-spoon_yGnjU:before {\n  content: \"\\F1B1\";\n}\n.font-awesome_fa-cube_36eWV:before {\n  content: \"\\F1B2\";\n}\n.font-awesome_fa-cubes_2pStW:before {\n  content: \"\\F1B3\";\n}\n.font-awesome_fa-behance_2tsBG:before {\n  content: \"\\F1B4\";\n}\n.font-awesome_fa-behance-square_3Dg58:before {\n  content: \"\\F1B5\";\n}\n.font-awesome_fa-steam_2Kj_T:before {\n  content: \"\\F1B6\";\n}\n.font-awesome_fa-steam-square_30fZy:before {\n  content: \"\\F1B7\";\n}\n.font-awesome_fa-recycle_2pec3:before {\n  content: \"\\F1B8\";\n}\n.font-awesome_fa-automobile_32KVm:before,\n.font-awesome_fa-car_2qCRr:before {\n  content: \"\\F1B9\";\n}\n.font-awesome_fa-cab_3lZGc:before,\n.font-awesome_fa-taxi_1F0Od:before {\n  content: \"\\F1BA\";\n}\n.font-awesome_fa-tree_2WVzm:before {\n  content: \"\\F1BB\";\n}\n.font-awesome_fa-spotify_1Sn08:before {\n  content: \"\\F1BC\";\n}\n.font-awesome_fa-deviantart_20N8j:before {\n  content: \"\\F1BD\";\n}\n.font-awesome_fa-soundcloud_1NiQb:before {\n  content: \"\\F1BE\";\n}\n.font-awesome_fa-database_aKxNe:before {\n  content: \"\\F1C0\";\n}\n.font-awesome_fa-file-pdf-o_1s8Iv:before {\n  content: \"\\F1C1\";\n}\n.font-awesome_fa-file-word-o_2gOH-:before {\n  content: \"\\F1C2\";\n}\n.font-awesome_fa-file-excel-o_3UNnS:before {\n  content: \"\\F1C3\";\n}\n.font-awesome_fa-file-powerpoint-o_Q5Zu2:before {\n  content: \"\\F1C4\";\n}\n.font-awesome_fa-file-photo-o_1H-bw:before,\n.font-awesome_fa-file-picture-o_39MJp:before,\n.font-awesome_fa-file-image-o_zM_3R:before {\n  content: \"\\F1C5\";\n}\n.font-awesome_fa-file-zip-o_e1fVq:before,\n.font-awesome_fa-file-archive-o_22xK3:before {\n  content: \"\\F1C6\";\n}\n.font-awesome_fa-file-sound-o_1Y_s4:before,\n.font-awesome_fa-file-audio-o_2-pOB:before {\n  content: \"\\F1C7\";\n}\n.font-awesome_fa-file-movie-o_2PEC0:before,\n.font-awesome_fa-file-video-o_36Qti:before {\n  content: \"\\F1C8\";\n}\n.font-awesome_fa-file-code-o_1RuRL:before {\n  content: \"\\F1C9\";\n}\n.font-awesome_fa-vine_vgume:before {\n  content: \"\\F1CA\";\n}\n.font-awesome_fa-codepen_1NJXz:before {\n  content: \"\\F1CB\";\n}\n.font-awesome_fa-jsfiddle_o_7_l:before {\n  content: \"\\F1CC\";\n}\n.font-awesome_fa-life-bouy_2V_XP:before,\n.font-awesome_fa-life-buoy_1lfIE:before,\n.font-awesome_fa-life-saver_2KZXR:before,\n.font-awesome_fa-support_1N-pk:before,\n.font-awesome_fa-life-ring_2musv:before {\n  content: \"\\F1CD\";\n}\n.font-awesome_fa-circle-o-notch_270Xp:before {\n  content: \"\\F1CE\";\n}\n.font-awesome_fa-ra_3dhKx:before,\n.font-awesome_fa-rebel_2xMsz:before {\n  content: \"\\F1D0\";\n}\n.font-awesome_fa-ge_qbcWz:before,\n.font-awesome_fa-empire_3CYCf:before {\n  content: \"\\F1D1\";\n}\n.font-awesome_fa-git-square_AIT5s:before {\n  content: \"\\F1D2\";\n}\n.font-awesome_fa-git_36zEF:before {\n  content: \"\\F1D3\";\n}\n.font-awesome_fa-y-combinator-square_1hf0W:before,\n.font-awesome_fa-yc-square_WOsgP:before,\n.font-awesome_fa-hacker-news_3WGhY:before {\n  content: \"\\F1D4\";\n}\n.font-awesome_fa-tencent-weibo_25lOY:before {\n  content: \"\\F1D5\";\n}\n.font-awesome_fa-qq_3cCR0:before {\n  content: \"\\F1D6\";\n}\n.font-awesome_fa-wechat_3ravb:before,\n.font-awesome_fa-weixin_2TB91:before {\n  content: \"\\F1D7\";\n}\n.font-awesome_fa-send_1DchU:before,\n.font-awesome_fa-paper-plane_1wIQ_:before {\n  content: \"\\F1D8\";\n}\n.font-awesome_fa-send-o_3JTZP:before,\n.font-awesome_fa-paper-plane-o_1jqnS:before {\n  content: \"\\F1D9\";\n}\n.font-awesome_fa-history_dFmFV:before {\n  content: \"\\F1DA\";\n}\n.font-awesome_fa-circle-thin_gPYOH:before {\n  content: \"\\F1DB\";\n}\n.font-awesome_fa-header_4p7Jk:before {\n  content: \"\\F1DC\";\n}\n.font-awesome_fa-paragraph_1OHxb:before {\n  content: \"\\F1DD\";\n}\n.font-awesome_fa-sliders_3C2rT:before {\n  content: \"\\F1DE\";\n}\n.font-awesome_fa-share-alt_2mGv8:before {\n  content: \"\\F1E0\";\n}\n.font-awesome_fa-share-alt-square_1EGNx:before {\n  content: \"\\F1E1\";\n}\n.font-awesome_fa-bomb_Fud4G:before {\n  content: \"\\F1E2\";\n}\n.font-awesome_fa-soccer-ball-o_flWxm:before,\n.font-awesome_fa-futbol-o_3ynzb:before {\n  content: \"\\F1E3\";\n}\n.font-awesome_fa-tty_YjVy2:before {\n  content: \"\\F1E4\";\n}\n.font-awesome_fa-binoculars_g0ft_:before {\n  content: \"\\F1E5\";\n}\n.font-awesome_fa-plug_39jkp:before {\n  content: \"\\F1E6\";\n}\n.font-awesome_fa-slideshare_2M6J2:before {\n  content: \"\\F1E7\";\n}\n.font-awesome_fa-twitch_15OqF:before {\n  content: \"\\F1E8\";\n}\n.font-awesome_fa-yelp_2lItp:before {\n  content: \"\\F1E9\";\n}\n.font-awesome_fa-newspaper-o_6R2hq:before {\n  content: \"\\F1EA\";\n}\n.font-awesome_fa-wifi_3HiNk:before {\n  content: \"\\F1EB\";\n}\n.font-awesome_fa-calculator_3jgwb:before {\n  content: \"\\F1EC\";\n}\n.font-awesome_fa-paypal_wq3li:before {\n  content: \"\\F1ED\";\n}\n.font-awesome_fa-google-wallet_25T9N:before {\n  content: \"\\F1EE\";\n}\n.font-awesome_fa-cc-visa_3dKqJ:before {\n  content: \"\\F1F0\";\n}\n.font-awesome_fa-cc-mastercard_1tFrQ:before {\n  content: \"\\F1F1\";\n}\n.font-awesome_fa-cc-discover_zI26e:before {\n  content: \"\\F1F2\";\n}\n.font-awesome_fa-cc-amex_-2Umy:before {\n  content: \"\\F1F3\";\n}\n.font-awesome_fa-cc-paypal_1_FSM:before {\n  content: \"\\F1F4\";\n}\n.font-awesome_fa-cc-stripe_2UDg2:before {\n  content: \"\\F1F5\";\n}\n.font-awesome_fa-bell-slash_3Ib9i:before {\n  content: \"\\F1F6\";\n}\n.font-awesome_fa-bell-slash-o_3ksnm:before {\n  content: \"\\F1F7\";\n}\n.font-awesome_fa-trash_3JBuo:before {\n  content: \"\\F1F8\";\n}\n.font-awesome_fa-copyright_1hITT:before {\n  content: \"\\F1F9\";\n}\n.font-awesome_fa-at_f4Ch1:before {\n  content: \"\\F1FA\";\n}\n.font-awesome_fa-eyedropper_3FcO7:before {\n  content: \"\\F1FB\";\n}\n.font-awesome_fa-paint-brush_1pD7A:before {\n  content: \"\\F1FC\";\n}\n.font-awesome_fa-birthday-cake_3po72:before {\n  content: \"\\F1FD\";\n}\n.font-awesome_fa-area-chart_3lnd7:before {\n  content: \"\\F1FE\";\n}\n.font-awesome_fa-pie-chart_33WHw:before {\n  content: \"\\F200\";\n}\n.font-awesome_fa-line-chart_30mvo:before {\n  content: \"\\F201\";\n}\n.font-awesome_fa-lastfm_PtiUx:before {\n  content: \"\\F202\";\n}\n.font-awesome_fa-lastfm-square_MYtJW:before {\n  content: \"\\F203\";\n}\n.font-awesome_fa-toggle-off_37j_t:before {\n  content: \"\\F204\";\n}\n.font-awesome_fa-toggle-on_ewbXL:before {\n  content: \"\\F205\";\n}\n.font-awesome_fa-bicycle_1NM2E:before {\n  content: \"\\F206\";\n}\n.font-awesome_fa-bus_3SgQl:before {\n  content: \"\\F207\";\n}\n.font-awesome_fa-ioxhost_2FHLb:before {\n  content: \"\\F208\";\n}\n.font-awesome_fa-angellist_3mWIU:before {\n  content: \"\\F209\";\n}\n.font-awesome_fa-cc_2gDjr:before {\n  content: \"\\F20A\";\n}\n.font-awesome_fa-shekel_32Xbx:before,\n.font-awesome_fa-sheqel_r9gc9:before,\n.font-awesome_fa-ils_2rphi:before {\n  content: \"\\F20B\";\n}\n.font-awesome_fa-meanpath_1bP8s:before {\n  content: \"\\F20C\";\n}\n.font-awesome_fa-buysellads_1EZ84:before {\n  content: \"\\F20D\";\n}\n.font-awesome_fa-connectdevelop_lFfNs:before {\n  content: \"\\F20E\";\n}\n.font-awesome_fa-dashcube_3TPe8:before {\n  content: \"\\F210\";\n}\n.font-awesome_fa-forumbee_2aFHV:before {\n  content: \"\\F211\";\n}\n.font-awesome_fa-leanpub_1O2QB:before {\n  content: \"\\F212\";\n}\n.font-awesome_fa-sellsy_2-Jzm:before {\n  content: \"\\F213\";\n}\n.font-awesome_fa-shirtsinbulk_1R30o:before {\n  content: \"\\F214\";\n}\n.font-awesome_fa-simplybuilt_SwF0E:before {\n  content: \"\\F215\";\n}\n.font-awesome_fa-skyatlas_A7cMa:before {\n  content: \"\\F216\";\n}\n.font-awesome_fa-cart-plus_3yJKe:before {\n  content: \"\\F217\";\n}\n.font-awesome_fa-cart-arrow-down_2JrEM:before {\n  content: \"\\F218\";\n}\n.font-awesome_fa-diamond_rt3b9:before {\n  content: \"\\F219\";\n}\n.font-awesome_fa-ship_2OfXG:before {\n  content: \"\\F21A\";\n}\n.font-awesome_fa-user-secret_1Yk8o:before {\n  content: \"\\F21B\";\n}\n.font-awesome_fa-motorcycle_3hzEC:before {\n  content: \"\\F21C\";\n}\n.font-awesome_fa-street-view_1GICB:before {\n  content: \"\\F21D\";\n}\n.font-awesome_fa-heartbeat_1jUmO:before {\n  content: \"\\F21E\";\n}\n.font-awesome_fa-venus_156Bm:before {\n  content: \"\\F221\";\n}\n.font-awesome_fa-mars_goj_J:before {\n  content: \"\\F222\";\n}\n.font-awesome_fa-mercury_3xn4l:before {\n  content: \"\\F223\";\n}\n.font-awesome_fa-intersex_7AU6q:before,\n.font-awesome_fa-transgender_1vmGU:before {\n  content: \"\\F224\";\n}\n.font-awesome_fa-transgender-alt_3mFjr:before {\n  content: \"\\F225\";\n}\n.font-awesome_fa-venus-double_1EhXf:before {\n  content: \"\\F226\";\n}\n.font-awesome_fa-mars-double_23qjT:before {\n  content: \"\\F227\";\n}\n.font-awesome_fa-venus-mars_2juhA:before {\n  content: \"\\F228\";\n}\n.font-awesome_fa-mars-stroke_3j02v:before {\n  content: \"\\F229\";\n}\n.font-awesome_fa-mars-stroke-v_21zWw:before {\n  content: \"\\F22A\";\n}\n.font-awesome_fa-mars-stroke-h_NAEPy:before {\n  content: \"\\F22B\";\n}\n.font-awesome_fa-neuter_15DlS:before {\n  content: \"\\F22C\";\n}\n.font-awesome_fa-genderless_t5AI_:before {\n  content: \"\\F22D\";\n}\n.font-awesome_fa-facebook-official_jfxWm:before {\n  content: \"\\F230\";\n}\n.font-awesome_fa-pinterest-p_3dWB3:before {\n  content: \"\\F231\";\n}\n.font-awesome_fa-whatsapp_J02DP:before {\n  content: \"\\F232\";\n}\n.font-awesome_fa-server_3u1Oo:before {\n  content: \"\\F233\";\n}\n.font-awesome_fa-user-plus_1lnbu:before {\n  content: \"\\F234\";\n}\n.font-awesome_fa-user-times_B6k3E:before {\n  content: \"\\F235\";\n}\n.font-awesome_fa-hotel_twAEq:before,\n.font-awesome_fa-bed_3zxC7:before {\n  content: \"\\F236\";\n}\n.font-awesome_fa-viacoin_1p3ob:before {\n  content: \"\\F237\";\n}\n.font-awesome_fa-train_2YY80:before {\n  content: \"\\F238\";\n}\n.font-awesome_fa-subway_3aQJs:before {\n  content: \"\\F239\";\n}\n.font-awesome_fa-medium_1H4Gf:before {\n  content: \"\\F23A\";\n}\n.font-awesome_fa-yc_3pFuR:before,\n.font-awesome_fa-y-combinator_1u0iT:before {\n  content: \"\\F23B\";\n}\n.font-awesome_fa-optin-monster_3CZ47:before {\n  content: \"\\F23C\";\n}\n.font-awesome_fa-opencart_2eRe1:before {\n  content: \"\\F23D\";\n}\n.font-awesome_fa-expeditedssl_2WngL:before {\n  content: \"\\F23E\";\n}\n.font-awesome_fa-battery-4_RSyHm:before,\n.font-awesome_fa-battery-full_28an4:before {\n  content: \"\\F240\";\n}\n.font-awesome_fa-battery-3_1SZoR:before,\n.font-awesome_fa-battery-three-quarters_3HGut:before {\n  content: \"\\F241\";\n}\n.font-awesome_fa-battery-2_2q0gH:before,\n.font-awesome_fa-battery-half_ADDBG:before {\n  content: \"\\F242\";\n}\n.font-awesome_fa-battery-1_3RoGP:before,\n.font-awesome_fa-battery-quarter_2xLnr:before {\n  content: \"\\F243\";\n}\n.font-awesome_fa-battery-0_pGakD:before,\n.font-awesome_fa-battery-empty_2TxG4:before {\n  content: \"\\F244\";\n}\n.font-awesome_fa-mouse-pointer_24qyQ:before {\n  content: \"\\F245\";\n}\n.font-awesome_fa-i-cursor_b-XNs:before {\n  content: \"\\F246\";\n}\n.font-awesome_fa-object-group_f82ev:before {\n  content: \"\\F247\";\n}\n.font-awesome_fa-object-ungroup_1mxgT:before {\n  content: \"\\F248\";\n}\n.font-awesome_fa-sticky-note_2ygYS:before {\n  content: \"\\F249\";\n}\n.font-awesome_fa-sticky-note-o_uHPRL:before {\n  content: \"\\F24A\";\n}\n.font-awesome_fa-cc-jcb_mcB5F:before {\n  content: \"\\F24B\";\n}\n.font-awesome_fa-cc-diners-club_2SEIp:before {\n  content: \"\\F24C\";\n}\n.font-awesome_fa-clone_1dqxB:before {\n  content: \"\\F24D\";\n}\n.font-awesome_fa-balance-scale_1TLPZ:before {\n  content: \"\\F24E\";\n}\n.font-awesome_fa-hourglass-o_1SNFw:before {\n  content: \"\\F250\";\n}\n.font-awesome_fa-hourglass-1_2aI9h:before,\n.font-awesome_fa-hourglass-start_3wtcf:before {\n  content: \"\\F251\";\n}\n.font-awesome_fa-hourglass-2_3duyo:before,\n.font-awesome_fa-hourglass-half_VHRaz:before {\n  content: \"\\F252\";\n}\n.font-awesome_fa-hourglass-3_1CRzM:before,\n.font-awesome_fa-hourglass-end_2Z9_h:before {\n  content: \"\\F253\";\n}\n.font-awesome_fa-hourglass_1cFtL:before {\n  content: \"\\F254\";\n}\n.font-awesome_fa-hand-grab-o_b25vk:before,\n.font-awesome_fa-hand-rock-o_112vq:before {\n  content: \"\\F255\";\n}\n.font-awesome_fa-hand-stop-o_RTFxN:before,\n.font-awesome_fa-hand-paper-o_QsN35:before {\n  content: \"\\F256\";\n}\n.font-awesome_fa-hand-scissors-o_NJKCd:before {\n  content: \"\\F257\";\n}\n.font-awesome_fa-hand-lizard-o_2Mt2X:before {\n  content: \"\\F258\";\n}\n.font-awesome_fa-hand-spock-o_2zhLy:before {\n  content: \"\\F259\";\n}\n.font-awesome_fa-hand-pointer-o_1-1J6:before {\n  content: \"\\F25A\";\n}\n.font-awesome_fa-hand-peace-o_2pDbl:before {\n  content: \"\\F25B\";\n}\n.font-awesome_fa-trademark_2YmAL:before {\n  content: \"\\F25C\";\n}\n.font-awesome_fa-registered_2PIjk:before {\n  content: \"\\F25D\";\n}\n.font-awesome_fa-creative-commons_3yzOj:before {\n  content: \"\\F25E\";\n}\n.font-awesome_fa-gg_1jxwW:before {\n  content: \"\\F260\";\n}\n.font-awesome_fa-gg-circle_-Bm1G:before {\n  content: \"\\F261\";\n}\n.font-awesome_fa-tripadvisor_1Kn8E:before {\n  content: \"\\F262\";\n}\n.font-awesome_fa-odnoklassniki_lrIeV:before {\n  content: \"\\F263\";\n}\n.font-awesome_fa-odnoklassniki-square_b-bSU:before {\n  content: \"\\F264\";\n}\n.font-awesome_fa-get-pocket_1zZQJ:before {\n  content: \"\\F265\";\n}\n.font-awesome_fa-wikipedia-w_1Cdpe:before {\n  content: \"\\F266\";\n}\n.font-awesome_fa-safari_3TQrJ:before {\n  content: \"\\F267\";\n}\n.font-awesome_fa-chrome_-dxJj:before {\n  content: \"\\F268\";\n}\n.font-awesome_fa-firefox_2InFw:before {\n  content: \"\\F269\";\n}\n.font-awesome_fa-opera_UBUEN:before {\n  content: \"\\F26A\";\n}\n.font-awesome_fa-internet-explorer_1nFTU:before {\n  content: \"\\F26B\";\n}\n.font-awesome_fa-tv_3cVCb:before,\n.font-awesome_fa-television_1oye_:before {\n  content: \"\\F26C\";\n}\n.font-awesome_fa-contao_1Raai:before {\n  content: \"\\F26D\";\n}\n.font-awesome_fa-500px_1QfNu:before {\n  content: \"\\F26E\";\n}\n.font-awesome_fa-amazon_2KhH9:before {\n  content: \"\\F270\";\n}\n.font-awesome_fa-calendar-plus-o_2EO18:before {\n  content: \"\\F271\";\n}\n.font-awesome_fa-calendar-minus-o_2A9gw:before {\n  content: \"\\F272\";\n}\n.font-awesome_fa-calendar-times-o_3a887:before {\n  content: \"\\F273\";\n}\n.font-awesome_fa-calendar-check-o_1bEdE:before {\n  content: \"\\F274\";\n}\n.font-awesome_fa-industry_5-sxe:before {\n  content: \"\\F275\";\n}\n.font-awesome_fa-map-pin_-DkdU:before {\n  content: \"\\F276\";\n}\n.font-awesome_fa-map-signs_2S38y:before {\n  content: \"\\F277\";\n}\n.font-awesome_fa-map-o_21xVI:before {\n  content: \"\\F278\";\n}\n.font-awesome_fa-map_KoElW:before {\n  content: \"\\F279\";\n}\n.font-awesome_fa-commenting_3crfp:before {\n  content: \"\\F27A\";\n}\n.font-awesome_fa-commenting-o_3vPy2:before {\n  content: \"\\F27B\";\n}\n.font-awesome_fa-houzz_3uMPg:before {\n  content: \"\\F27C\";\n}\n.font-awesome_fa-vimeo_BCAw2:before {\n  content: \"\\F27D\";\n}\n.font-awesome_fa-black-tie_36KSS:before {\n  content: \"\\F27E\";\n}\n.font-awesome_fa-fonticons_1iLaa:before {\n  content: \"\\F280\";\n}\n.font-awesome_fa-reddit-alien_8M0ZA:before {\n  content: \"\\F281\";\n}\n.font-awesome_fa-edge_SKxLn:before {\n  content: \"\\F282\";\n}\n.font-awesome_fa-credit-card-alt_3K4Hb:before {\n  content: \"\\F283\";\n}\n.font-awesome_fa-codiepie_3exdZ:before {\n  content: \"\\F284\";\n}\n.font-awesome_fa-modx_VNOMM:before {\n  content: \"\\F285\";\n}\n.font-awesome_fa-fort-awesome_cOs8o:before {\n  content: \"\\F286\";\n}\n.font-awesome_fa-usb_1Zb-H:before {\n  content: \"\\F287\";\n}\n.font-awesome_fa-product-hunt_3zOPt:before {\n  content: \"\\F288\";\n}\n.font-awesome_fa-mixcloud_7qwu5:before {\n  content: \"\\F289\";\n}\n.font-awesome_fa-scribd_2eBei:before {\n  content: \"\\F28A\";\n}\n.font-awesome_fa-pause-circle_3q_lF:before {\n  content: \"\\F28B\";\n}\n.font-awesome_fa-pause-circle-o_3G2_g:before {\n  content: \"\\F28C\";\n}\n.font-awesome_fa-stop-circle_Fuwsc:before {\n  content: \"\\F28D\";\n}\n.font-awesome_fa-stop-circle-o_3d-BX:before {\n  content: \"\\F28E\";\n}\n.font-awesome_fa-shopping-bag_2WDzp:before {\n  content: \"\\F290\";\n}\n.font-awesome_fa-shopping-basket_r0TVD:before {\n  content: \"\\F291\";\n}\n.font-awesome_fa-hashtag_29Ewd:before {\n  content: \"\\F292\";\n}\n.font-awesome_fa-bluetooth_2jUgH:before {\n  content: \"\\F293\";\n}\n.font-awesome_fa-bluetooth-b_3uxZ5:before {\n  content: \"\\F294\";\n}\n.font-awesome_fa-percent_2z_PP:before {\n  content: \"\\F295\";\n}\n", ""]);

	// exports
	exports.locals = {
		"fa": "font-awesome_fa_hnWyg",
		"fa-lg": "font-awesome_fa-lg_2C19L",
		"fa-2x": "font-awesome_fa-2x_2o5Fl",
		"fa-3x": "font-awesome_fa-3x_30YuM",
		"fa-4x": "font-awesome_fa-4x_lsxgd",
		"fa-5x": "font-awesome_fa-5x_3EQB-",
		"fa-fw": "font-awesome_fa-fw_3u_fM",
		"fa-ul": "font-awesome_fa-ul_1fwNv",
		"fa-li": "font-awesome_fa-li_1j-Sx",
		"fa-border": "font-awesome_fa-border_3xl6W",
		"fa-pull-left": "font-awesome_fa-pull-left_3PF22",
		"fa-pull-right": "font-awesome_fa-pull-right_2PdTO",
		"pull-right": "font-awesome_pull-right_3NC9-",
		"pull-left": "font-awesome_pull-left_3HkP_",
		"fa-spin": "font-awesome_fa-spin_3OhVo",
		"fa-pulse": "font-awesome_fa-pulse_3Tr3D",
		"fa-rotate-90": "font-awesome_fa-rotate-90_4fPqv",
		"fa-rotate-180": "font-awesome_fa-rotate-180_1__19",
		"fa-rotate-270": "font-awesome_fa-rotate-270_1gDyc",
		"fa-flip-horizontal": "font-awesome_fa-flip-horizontal_3or2m",
		"fa-flip-vertical": "font-awesome_fa-flip-vertical_38eKG",
		"fa-stack": "font-awesome_fa-stack_2X6xB",
		"fa-stack-1x": "font-awesome_fa-stack-1x_hGmX_",
		"fa-stack-2x": "font-awesome_fa-stack-2x_2ziDh",
		"fa-inverse": "font-awesome_fa-inverse_3DhFk",
		"fa-glass": "font-awesome_fa-glass_29DBz",
		"fa-music": "font-awesome_fa-music_1pRnY",
		"fa-search": "font-awesome_fa-search_Fzb5Y",
		"fa-envelope-o": "font-awesome_fa-envelope-o_16g79",
		"fa-heart": "font-awesome_fa-heart_2iEcF",
		"fa-star": "font-awesome_fa-star_1xzZ_",
		"fa-star-o": "font-awesome_fa-star-o_v93q1",
		"fa-user": "font-awesome_fa-user_wGZz4",
		"fa-film": "font-awesome_fa-film_Hq9Bo",
		"fa-th-large": "font-awesome_fa-th-large_1REIm",
		"fa-th": "font-awesome_fa-th_1OqlB",
		"fa-th-list": "font-awesome_fa-th-list_16oxS",
		"fa-check": "font-awesome_fa-check_3Cmpq",
		"fa-remove": "font-awesome_fa-remove_1QlJA",
		"fa-close": "font-awesome_fa-close_3gvJ7",
		"fa-times": "font-awesome_fa-times_2seNE",
		"fa-search-plus": "font-awesome_fa-search-plus_3Iwqw",
		"fa-search-minus": "font-awesome_fa-search-minus_3TjT6",
		"fa-power-off": "font-awesome_fa-power-off_kdRAL",
		"fa-signal": "font-awesome_fa-signal_FQkm5",
		"fa-gear": "font-awesome_fa-gear_x99mJ",
		"fa-cog": "font-awesome_fa-cog_2WUHh",
		"fa-trash-o": "font-awesome_fa-trash-o_Mtuw8",
		"fa-home": "font-awesome_fa-home_3jbd1",
		"fa-file-o": "font-awesome_fa-file-o_2VlUn",
		"fa-clock-o": "font-awesome_fa-clock-o_p41Lb",
		"fa-road": "font-awesome_fa-road_Vvk-z",
		"fa-download": "font-awesome_fa-download_2CzOG",
		"fa-arrow-circle-o-down": "font-awesome_fa-arrow-circle-o-down_3AAJ_",
		"fa-arrow-circle-o-up": "font-awesome_fa-arrow-circle-o-up_6t4NA",
		"fa-inbox": "font-awesome_fa-inbox_3vfe0",
		"fa-play-circle-o": "font-awesome_fa-play-circle-o_1drCV",
		"fa-rotate-right": "font-awesome_fa-rotate-right_1kmO6",
		"fa-repeat": "font-awesome_fa-repeat_2wiiK",
		"fa-refresh": "font-awesome_fa-refresh_2xE2F",
		"fa-list-alt": "font-awesome_fa-list-alt_1rYtg",
		"fa-lock": "font-awesome_fa-lock_1BAqC",
		"fa-flag": "font-awesome_fa-flag_rQ09O",
		"fa-headphones": "font-awesome_fa-headphones_32xBu",
		"fa-volume-off": "font-awesome_fa-volume-off_3g6NI",
		"fa-volume-down": "font-awesome_fa-volume-down_VMmA0",
		"fa-volume-up": "font-awesome_fa-volume-up_i8OHh",
		"fa-qrcode": "font-awesome_fa-qrcode_1UGo-",
		"fa-barcode": "font-awesome_fa-barcode_3epli",
		"fa-tag": "font-awesome_fa-tag_1hEGw",
		"fa-tags": "font-awesome_fa-tags_1-9SA",
		"fa-book": "font-awesome_fa-book_1Yak0",
		"fa-bookmark": "font-awesome_fa-bookmark_2sCxc",
		"fa-print": "font-awesome_fa-print_mbIe_",
		"fa-camera": "font-awesome_fa-camera_3FGGW",
		"fa-font": "font-awesome_fa-font_3ehIR",
		"fa-bold": "font-awesome_fa-bold_3j91b",
		"fa-italic": "font-awesome_fa-italic_3YjJx",
		"fa-text-height": "font-awesome_fa-text-height_3S8H9",
		"fa-text-width": "font-awesome_fa-text-width_3XV4e",
		"fa-align-left": "font-awesome_fa-align-left_3iZJB",
		"fa-align-center": "font-awesome_fa-align-center_uispF",
		"fa-align-right": "font-awesome_fa-align-right_16-u0",
		"fa-align-justify": "font-awesome_fa-align-justify_3NbUN",
		"fa-list": "font-awesome_fa-list_3BYao",
		"fa-dedent": "font-awesome_fa-dedent_pVwPZ",
		"fa-outdent": "font-awesome_fa-outdent_3dyGV",
		"fa-indent": "font-awesome_fa-indent_3qtEP",
		"fa-video-camera": "font-awesome_fa-video-camera_2JUMf",
		"fa-photo": "font-awesome_fa-photo_3L583",
		"fa-image": "font-awesome_fa-image_1CT_9",
		"fa-picture-o": "font-awesome_fa-picture-o_2rR2z",
		"fa-pencil": "font-awesome_fa-pencil_3ISe0",
		"fa-map-marker": "font-awesome_fa-map-marker__ZkXj",
		"fa-adjust": "font-awesome_fa-adjust_30VsR",
		"fa-tint": "font-awesome_fa-tint_3d2oA",
		"fa-edit": "font-awesome_fa-edit_3-svS",
		"fa-pencil-square-o": "font-awesome_fa-pencil-square-o_1bt6e",
		"fa-share-square-o": "font-awesome_fa-share-square-o_IoAQM",
		"fa-check-square-o": "font-awesome_fa-check-square-o_3-198",
		"fa-arrows": "font-awesome_fa-arrows_3DD0F",
		"fa-step-backward": "font-awesome_fa-step-backward_gRmyl",
		"fa-fast-backward": "font-awesome_fa-fast-backward_1tdiL",
		"fa-backward": "font-awesome_fa-backward_27eFX",
		"fa-play": "font-awesome_fa-play_1QfD7",
		"fa-pause": "font-awesome_fa-pause_2-K_r",
		"fa-stop": "font-awesome_fa-stop_3326j",
		"fa-forward": "font-awesome_fa-forward_QL2Is",
		"fa-fast-forward": "font-awesome_fa-fast-forward_3z2xy",
		"fa-step-forward": "font-awesome_fa-step-forward_3CkwZ",
		"fa-eject": "font-awesome_fa-eject_2P_cK",
		"fa-chevron-left": "font-awesome_fa-chevron-left_2TrVu",
		"fa-chevron-right": "font-awesome_fa-chevron-right_2FC0Z",
		"fa-plus-circle": "font-awesome_fa-plus-circle_1gW5a",
		"fa-minus-circle": "font-awesome_fa-minus-circle_24f2I",
		"fa-times-circle": "font-awesome_fa-times-circle_15GGs",
		"fa-check-circle": "font-awesome_fa-check-circle_3d-zD",
		"fa-question-circle": "font-awesome_fa-question-circle_2LkeW",
		"fa-info-circle": "font-awesome_fa-info-circle_7D0Nk",
		"fa-crosshairs": "font-awesome_fa-crosshairs_2ipvZ",
		"fa-times-circle-o": "font-awesome_fa-times-circle-o_7E1ty",
		"fa-check-circle-o": "font-awesome_fa-check-circle-o_2-WqW",
		"fa-ban": "font-awesome_fa-ban_3N6-L",
		"fa-arrow-left": "font-awesome_fa-arrow-left_12ikd",
		"fa-arrow-right": "font-awesome_fa-arrow-right_3cLsX",
		"fa-arrow-up": "font-awesome_fa-arrow-up_3EjJ4",
		"fa-arrow-down": "font-awesome_fa-arrow-down_19pUt",
		"fa-mail-forward": "font-awesome_fa-mail-forward_pm8qu",
		"fa-share": "font-awesome_fa-share_1UqmT",
		"fa-expand": "font-awesome_fa-expand_3cLMR",
		"fa-compress": "font-awesome_fa-compress_2eA8C",
		"fa-plus": "font-awesome_fa-plus_6J6Jo",
		"fa-minus": "font-awesome_fa-minus_30TYM",
		"fa-asterisk": "font-awesome_fa-asterisk_1it1m",
		"fa-exclamation-circle": "font-awesome_fa-exclamation-circle_2SFzV",
		"fa-gift": "font-awesome_fa-gift_2XuBW",
		"fa-leaf": "font-awesome_fa-leaf_3t_ZT",
		"fa-fire": "font-awesome_fa-fire_2F3aN",
		"fa-eye": "font-awesome_fa-eye_ZQ8Fy",
		"fa-eye-slash": "font-awesome_fa-eye-slash_3OOyY",
		"fa-warning": "font-awesome_fa-warning_3iTUa",
		"fa-exclamation-triangle": "font-awesome_fa-exclamation-triangle_CSnqP",
		"fa-plane": "font-awesome_fa-plane_zzEWn",
		"fa-calendar": "font-awesome_fa-calendar_Hiai7",
		"fa-random": "font-awesome_fa-random_3fK7H",
		"fa-comment": "font-awesome_fa-comment_zpSZ8",
		"fa-magnet": "font-awesome_fa-magnet_lHFlc",
		"fa-chevron-up": "font-awesome_fa-chevron-up_3xOHT",
		"fa-chevron-down": "font-awesome_fa-chevron-down_1kr8E",
		"fa-retweet": "font-awesome_fa-retweet_39_p3",
		"fa-shopping-cart": "font-awesome_fa-shopping-cart_3e9Os",
		"fa-folder": "font-awesome_fa-folder_3EYxP",
		"fa-folder-open": "font-awesome_fa-folder-open_3F1Iv",
		"fa-arrows-v": "font-awesome_fa-arrows-v_1QSAw",
		"fa-arrows-h": "font-awesome_fa-arrows-h_3ZZHF",
		"fa-bar-chart-o": "font-awesome_fa-bar-chart-o_1L01W",
		"fa-bar-chart": "font-awesome_fa-bar-chart_2yCqc",
		"fa-twitter-square": "font-awesome_fa-twitter-square_Vanpe",
		"fa-facebook-square": "font-awesome_fa-facebook-square_1QV1U",
		"fa-camera-retro": "font-awesome_fa-camera-retro_37Cam",
		"fa-key": "font-awesome_fa-key_REK4V",
		"fa-gears": "font-awesome_fa-gears_3uUBl",
		"fa-cogs": "font-awesome_fa-cogs_1SJEQ",
		"fa-comments": "font-awesome_fa-comments_1eUBa",
		"fa-thumbs-o-up": "font-awesome_fa-thumbs-o-up_1zzMp",
		"fa-thumbs-o-down": "font-awesome_fa-thumbs-o-down_2zDaK",
		"fa-star-half": "font-awesome_fa-star-half_1kyP2",
		"fa-heart-o": "font-awesome_fa-heart-o_2rtBI",
		"fa-sign-out": "font-awesome_fa-sign-out_3tANt",
		"fa-linkedin-square": "font-awesome_fa-linkedin-square_2f8Wh",
		"fa-thumb-tack": "font-awesome_fa-thumb-tack_1jvRA",
		"fa-external-link": "font-awesome_fa-external-link_2QefG",
		"fa-sign-in": "font-awesome_fa-sign-in_NND3s",
		"fa-trophy": "font-awesome_fa-trophy_1sZVt",
		"fa-github-square": "font-awesome_fa-github-square_3p9Xr",
		"fa-upload": "font-awesome_fa-upload_1kXB8",
		"fa-lemon-o": "font-awesome_fa-lemon-o_3pHwE",
		"fa-phone": "font-awesome_fa-phone_3zGw7",
		"fa-square-o": "font-awesome_fa-square-o_2QIHX",
		"fa-bookmark-o": "font-awesome_fa-bookmark-o_24X_j",
		"fa-phone-square": "font-awesome_fa-phone-square_VnqGI",
		"fa-twitter": "font-awesome_fa-twitter_12GH_",
		"fa-facebook-f": "font-awesome_fa-facebook-f_2RU60",
		"fa-facebook": "font-awesome_fa-facebook_1JuFT",
		"fa-github": "font-awesome_fa-github_uIFGl",
		"fa-unlock": "font-awesome_fa-unlock_3o3xn",
		"fa-credit-card": "font-awesome_fa-credit-card_1yRq7",
		"fa-feed": "font-awesome_fa-feed_3vx3g",
		"fa-rss": "font-awesome_fa-rss_3qmaL",
		"fa-hdd-o": "font-awesome_fa-hdd-o_1-oSX",
		"fa-bullhorn": "font-awesome_fa-bullhorn_3dj3e",
		"fa-bell": "font-awesome_fa-bell_2z-Se",
		"fa-certificate": "font-awesome_fa-certificate_2m_WA",
		"fa-hand-o-right": "font-awesome_fa-hand-o-right_12X8H",
		"fa-hand-o-left": "font-awesome_fa-hand-o-left_3ilyw",
		"fa-hand-o-up": "font-awesome_fa-hand-o-up_1dk80",
		"fa-hand-o-down": "font-awesome_fa-hand-o-down_2K6g3",
		"fa-arrow-circle-left": "font-awesome_fa-arrow-circle-left_2rcrX",
		"fa-arrow-circle-right": "font-awesome_fa-arrow-circle-right_3zqgF",
		"fa-arrow-circle-up": "font-awesome_fa-arrow-circle-up_2pOH2",
		"fa-arrow-circle-down": "font-awesome_fa-arrow-circle-down_2xcyd",
		"fa-globe": "font-awesome_fa-globe_3890w",
		"fa-wrench": "font-awesome_fa-wrench_3BVJx",
		"fa-tasks": "font-awesome_fa-tasks_2xaal",
		"fa-filter": "font-awesome_fa-filter_2Wrnx",
		"fa-briefcase": "font-awesome_fa-briefcase_xoYe6",
		"fa-arrows-alt": "font-awesome_fa-arrows-alt_1GZf0",
		"fa-group": "font-awesome_fa-group_3RqP9",
		"fa-users": "font-awesome_fa-users_9e5mO",
		"fa-chain": "font-awesome_fa-chain_2sLkY",
		"fa-link": "font-awesome_fa-link_2jwCA",
		"fa-cloud": "font-awesome_fa-cloud_1jb6d",
		"fa-flask": "font-awesome_fa-flask_2OV9p",
		"fa-cut": "font-awesome_fa-cut_r06nj",
		"fa-scissors": "font-awesome_fa-scissors_3Hu82",
		"fa-copy": "font-awesome_fa-copy_1mQAm",
		"fa-files-o": "font-awesome_fa-files-o_2teqR",
		"fa-paperclip": "font-awesome_fa-paperclip_3_REy",
		"fa-save": "font-awesome_fa-save_3-5_V",
		"fa-floppy-o": "font-awesome_fa-floppy-o_1OSX5",
		"fa-square": "font-awesome_fa-square_2pAQU",
		"fa-navicon": "font-awesome_fa-navicon_1SgYS",
		"fa-reorder": "font-awesome_fa-reorder_YSCJ2",
		"fa-bars": "font-awesome_fa-bars_1OwG2",
		"fa-list-ul": "font-awesome_fa-list-ul_C-a3S",
		"fa-list-ol": "font-awesome_fa-list-ol_3jYHW",
		"fa-strikethrough": "font-awesome_fa-strikethrough_2EIQE",
		"fa-underline": "font-awesome_fa-underline_2YOvi",
		"fa-table": "font-awesome_fa-table_E3XPW",
		"fa-magic": "font-awesome_fa-magic_yvu1E",
		"fa-truck": "font-awesome_fa-truck_Q5Pmq",
		"fa-pinterest": "font-awesome_fa-pinterest_3qfGd",
		"fa-pinterest-square": "font-awesome_fa-pinterest-square_2xOGm",
		"fa-google-plus-square": "font-awesome_fa-google-plus-square_3Z_95",
		"fa-google-plus": "font-awesome_fa-google-plus_2wNdx",
		"fa-money": "font-awesome_fa-money_16Hk4",
		"fa-caret-down": "font-awesome_fa-caret-down_1IJJK",
		"fa-caret-up": "font-awesome_fa-caret-up_1rwhG",
		"fa-caret-left": "font-awesome_fa-caret-left_1bvu-",
		"fa-caret-right": "font-awesome_fa-caret-right_RLtgW",
		"fa-columns": "font-awesome_fa-columns_33IZP",
		"fa-unsorted": "font-awesome_fa-unsorted_2xPjX",
		"fa-sort": "font-awesome_fa-sort_2wrsA",
		"fa-sort-down": "font-awesome_fa-sort-down_2-roM",
		"fa-sort-desc": "font-awesome_fa-sort-desc_8jmrC",
		"fa-sort-up": "font-awesome_fa-sort-up_1yfwG",
		"fa-sort-asc": "font-awesome_fa-sort-asc_hWcYe",
		"fa-envelope": "font-awesome_fa-envelope_3Zw5Y",
		"fa-linkedin": "font-awesome_fa-linkedin_26dMe",
		"fa-rotate-left": "font-awesome_fa-rotate-left_aBA3H",
		"fa-undo": "font-awesome_fa-undo_HTtPj",
		"fa-legal": "font-awesome_fa-legal_13NBi",
		"fa-gavel": "font-awesome_fa-gavel_oCDQf",
		"fa-dashboard": "font-awesome_fa-dashboard_mBkza",
		"fa-tachometer": "font-awesome_fa-tachometer_2vVTC",
		"fa-comment-o": "font-awesome_fa-comment-o_3cn6-",
		"fa-comments-o": "font-awesome_fa-comments-o_25TFE",
		"fa-flash": "font-awesome_fa-flash_2Rwk6",
		"fa-bolt": "font-awesome_fa-bolt_20mOm",
		"fa-sitemap": "font-awesome_fa-sitemap_mjZ6x",
		"fa-umbrella": "font-awesome_fa-umbrella_yPU48",
		"fa-paste": "font-awesome_fa-paste_2NikE",
		"fa-clipboard": "font-awesome_fa-clipboard_1vdJf",
		"fa-lightbulb-o": "font-awesome_fa-lightbulb-o_dEIll",
		"fa-exchange": "font-awesome_fa-exchange_wkTCO",
		"fa-cloud-download": "font-awesome_fa-cloud-download_sodD2",
		"fa-cloud-upload": "font-awesome_fa-cloud-upload_20ucA",
		"fa-user-md": "font-awesome_fa-user-md_OssdZ",
		"fa-stethoscope": "font-awesome_fa-stethoscope_H06UV",
		"fa-suitcase": "font-awesome_fa-suitcase_3XJb4",
		"fa-bell-o": "font-awesome_fa-bell-o_lYaWL",
		"fa-coffee": "font-awesome_fa-coffee_nagqP",
		"fa-cutlery": "font-awesome_fa-cutlery_2p30f",
		"fa-file-text-o": "font-awesome_fa-file-text-o_bh3Lg",
		"fa-building-o": "font-awesome_fa-building-o_LC3Xo",
		"fa-hospital-o": "font-awesome_fa-hospital-o_3Ohdg",
		"fa-ambulance": "font-awesome_fa-ambulance_tS8Ul",
		"fa-medkit": "font-awesome_fa-medkit_FpC5h",
		"fa-fighter-jet": "font-awesome_fa-fighter-jet_Duwiy",
		"fa-beer": "font-awesome_fa-beer_2lJmW",
		"fa-h-square": "font-awesome_fa-h-square_PVHIr",
		"fa-plus-square": "font-awesome_fa-plus-square_2wXvV",
		"fa-angle-double-left": "font-awesome_fa-angle-double-left_3TZ9n",
		"fa-angle-double-right": "font-awesome_fa-angle-double-right_yLu-W",
		"fa-angle-double-up": "font-awesome_fa-angle-double-up_EwtO9",
		"fa-angle-double-down": "font-awesome_fa-angle-double-down_1ccsi",
		"fa-angle-left": "font-awesome_fa-angle-left_3i6_G",
		"fa-angle-right": "font-awesome_fa-angle-right_1BJdz",
		"fa-angle-up": "font-awesome_fa-angle-up_1EmSm",
		"fa-angle-down": "font-awesome_fa-angle-down_2oYaE",
		"fa-desktop": "font-awesome_fa-desktop_29cDo",
		"fa-laptop": "font-awesome_fa-laptop_3kb7h",
		"fa-tablet": "font-awesome_fa-tablet_NLfj4",
		"fa-mobile-phone": "font-awesome_fa-mobile-phone_3pP0B",
		"fa-mobile": "font-awesome_fa-mobile_34bB2",
		"fa-circle-o": "font-awesome_fa-circle-o_30KjV",
		"fa-quote-left": "font-awesome_fa-quote-left_3-Fjs",
		"fa-quote-right": "font-awesome_fa-quote-right_k5eai",
		"fa-spinner": "font-awesome_fa-spinner_201mr",
		"fa-circle": "font-awesome_fa-circle_2SHTA",
		"fa-mail-reply": "font-awesome_fa-mail-reply_3xqwq",
		"fa-reply": "font-awesome_fa-reply_Lun03",
		"fa-github-alt": "font-awesome_fa-github-alt_uuWT9",
		"fa-folder-o": "font-awesome_fa-folder-o_1sPym",
		"fa-folder-open-o": "font-awesome_fa-folder-open-o_1ONV2",
		"fa-smile-o": "font-awesome_fa-smile-o_3tWZn",
		"fa-frown-o": "font-awesome_fa-frown-o_1nWrW",
		"fa-meh-o": "font-awesome_fa-meh-o_18ZN3",
		"fa-gamepad": "font-awesome_fa-gamepad_2lTad",
		"fa-keyboard-o": "font-awesome_fa-keyboard-o_27MBO",
		"fa-flag-o": "font-awesome_fa-flag-o_2J7Pw",
		"fa-flag-checkered": "font-awesome_fa-flag-checkered_gbQB4",
		"fa-terminal": "font-awesome_fa-terminal_1VsIW",
		"fa-code": "font-awesome_fa-code_1e7tP",
		"fa-mail-reply-all": "font-awesome_fa-mail-reply-all_1IFHD",
		"fa-reply-all": "font-awesome_fa-reply-all_3bCnq",
		"fa-star-half-empty": "font-awesome_fa-star-half-empty_19jhm",
		"fa-star-half-full": "font-awesome_fa-star-half-full_1ezZD",
		"fa-star-half-o": "font-awesome_fa-star-half-o_3D00w",
		"fa-location-arrow": "font-awesome_fa-location-arrow_3VXkt",
		"fa-crop": "font-awesome_fa-crop_2TZFT",
		"fa-code-fork": "font-awesome_fa-code-fork_paoZV",
		"fa-unlink": "font-awesome_fa-unlink_26p_I",
		"fa-chain-broken": "font-awesome_fa-chain-broken_Hn22e",
		"fa-question": "font-awesome_fa-question_2ZbkT",
		"fa-info": "font-awesome_fa-info_1ilMz",
		"fa-exclamation": "font-awesome_fa-exclamation_3fuWs",
		"fa-superscript": "font-awesome_fa-superscript_1RYhR",
		"fa-subscript": "font-awesome_fa-subscript_JVyc0",
		"fa-eraser": "font-awesome_fa-eraser_2rBMH",
		"fa-puzzle-piece": "font-awesome_fa-puzzle-piece_2IFdL",
		"fa-microphone": "font-awesome_fa-microphone_3nXcS",
		"fa-microphone-slash": "font-awesome_fa-microphone-slash_Z_xRW",
		"fa-shield": "font-awesome_fa-shield_XMAKw",
		"fa-calendar-o": "font-awesome_fa-calendar-o_kj_dX",
		"fa-fire-extinguisher": "font-awesome_fa-fire-extinguisher_3fi33",
		"fa-rocket": "font-awesome_fa-rocket_XlX-B",
		"fa-maxcdn": "font-awesome_fa-maxcdn_1xLil",
		"fa-chevron-circle-left": "font-awesome_fa-chevron-circle-left_1_MOL",
		"fa-chevron-circle-right": "font-awesome_fa-chevron-circle-right__6T2M",
		"fa-chevron-circle-up": "font-awesome_fa-chevron-circle-up_1vjkl",
		"fa-chevron-circle-down": "font-awesome_fa-chevron-circle-down_2q9gj",
		"fa-html5": "font-awesome_fa-html5_3172h",
		"fa-css3": "font-awesome_fa-css3_3hpVz",
		"fa-anchor": "font-awesome_fa-anchor_3ADZJ",
		"fa-unlock-alt": "font-awesome_fa-unlock-alt_2Wq4F",
		"fa-bullseye": "font-awesome_fa-bullseye_1MZIB",
		"fa-ellipsis-h": "font-awesome_fa-ellipsis-h_202RW",
		"fa-ellipsis-v": "font-awesome_fa-ellipsis-v_1upHT",
		"fa-rss-square": "font-awesome_fa-rss-square_5GYE_",
		"fa-play-circle": "font-awesome_fa-play-circle_UAxMZ",
		"fa-ticket": "font-awesome_fa-ticket_1F5lC",
		"fa-minus-square": "font-awesome_fa-minus-square_h2HVc",
		"fa-minus-square-o": "font-awesome_fa-minus-square-o_YIqSV",
		"fa-level-up": "font-awesome_fa-level-up_1xIeO",
		"fa-level-down": "font-awesome_fa-level-down_2edBx",
		"fa-check-square": "font-awesome_fa-check-square_1CG8J",
		"fa-pencil-square": "font-awesome_fa-pencil-square_1xSld",
		"fa-external-link-square": "font-awesome_fa-external-link-square_3Wmxg",
		"fa-share-square": "font-awesome_fa-share-square_26LdW",
		"fa-compass": "font-awesome_fa-compass_1OOV1",
		"fa-toggle-down": "font-awesome_fa-toggle-down_3Snwz",
		"fa-caret-square-o-down": "font-awesome_fa-caret-square-o-down_UQ4-n",
		"fa-toggle-up": "font-awesome_fa-toggle-up_fbKFG",
		"fa-caret-square-o-up": "font-awesome_fa-caret-square-o-up_-HvQn",
		"fa-toggle-right": "font-awesome_fa-toggle-right_3HIQx",
		"fa-caret-square-o-right": "font-awesome_fa-caret-square-o-right_2vUW_",
		"fa-euro": "font-awesome_fa-euro_2xoFh",
		"fa-eur": "font-awesome_fa-eur_n5HBL",
		"fa-gbp": "font-awesome_fa-gbp_3qdgg",
		"fa-dollar": "font-awesome_fa-dollar_1h10_",
		"fa-usd": "font-awesome_fa-usd_1hyJh",
		"fa-rupee": "font-awesome_fa-rupee_3C7tP",
		"fa-inr": "font-awesome_fa-inr_2WkYV",
		"fa-cny": "font-awesome_fa-cny_3Xo-t",
		"fa-rmb": "font-awesome_fa-rmb_2fLKc",
		"fa-yen": "font-awesome_fa-yen_EiyBf",
		"fa-jpy": "font-awesome_fa-jpy_35sB-",
		"fa-ruble": "font-awesome_fa-ruble_2a47N",
		"fa-rouble": "font-awesome_fa-rouble_1UMZw",
		"fa-rub": "font-awesome_fa-rub_2Mrww",
		"fa-won": "font-awesome_fa-won_269J2",
		"fa-krw": "font-awesome_fa-krw_fkiqf",
		"fa-bitcoin": "font-awesome_fa-bitcoin_2YfZJ",
		"fa-btc": "font-awesome_fa-btc_fmXx6",
		"fa-file": "font-awesome_fa-file_1XL7O",
		"fa-file-text": "font-awesome_fa-file-text_211gP",
		"fa-sort-alpha-asc": "font-awesome_fa-sort-alpha-asc_2kkSn",
		"fa-sort-alpha-desc": "font-awesome_fa-sort-alpha-desc_GMg7L",
		"fa-sort-amount-asc": "font-awesome_fa-sort-amount-asc_1eilc",
		"fa-sort-amount-desc": "font-awesome_fa-sort-amount-desc_3nJO9",
		"fa-sort-numeric-asc": "font-awesome_fa-sort-numeric-asc_2uPFQ",
		"fa-sort-numeric-desc": "font-awesome_fa-sort-numeric-desc_39gI9",
		"fa-thumbs-up": "font-awesome_fa-thumbs-up_hpR6m",
		"fa-thumbs-down": "font-awesome_fa-thumbs-down_1t43Y",
		"fa-youtube-square": "font-awesome_fa-youtube-square_2BoKy",
		"fa-youtube": "font-awesome_fa-youtube_2IcQW",
		"fa-xing": "font-awesome_fa-xing_1saB5",
		"fa-xing-square": "font-awesome_fa-xing-square_1eaD0",
		"fa-youtube-play": "font-awesome_fa-youtube-play_1YDEq",
		"fa-dropbox": "font-awesome_fa-dropbox_1QS8k",
		"fa-stack-overflow": "font-awesome_fa-stack-overflow_1M_6a",
		"fa-instagram": "font-awesome_fa-instagram_Y4xAF",
		"fa-flickr": "font-awesome_fa-flickr_27VkD",
		"fa-adn": "font-awesome_fa-adn_3ZNLb",
		"fa-bitbucket": "font-awesome_fa-bitbucket_2zNIA",
		"fa-bitbucket-square": "font-awesome_fa-bitbucket-square_3diMl",
		"fa-tumblr": "font-awesome_fa-tumblr_2DPM8",
		"fa-tumblr-square": "font-awesome_fa-tumblr-square_1D52j",
		"fa-long-arrow-down": "font-awesome_fa-long-arrow-down_3R3Bh",
		"fa-long-arrow-up": "font-awesome_fa-long-arrow-up_3Ui_T",
		"fa-long-arrow-left": "font-awesome_fa-long-arrow-left_rZrhO",
		"fa-long-arrow-right": "font-awesome_fa-long-arrow-right_1Q4ei",
		"fa-apple": "font-awesome_fa-apple_7wR3k",
		"fa-windows": "font-awesome_fa-windows_3KsI6",
		"fa-android": "font-awesome_fa-android_36PDL",
		"fa-linux": "font-awesome_fa-linux_34ym5",
		"fa-dribbble": "font-awesome_fa-dribbble_x9uIT",
		"fa-skype": "font-awesome_fa-skype_Ea6zH",
		"fa-foursquare": "font-awesome_fa-foursquare_1n-_X",
		"fa-trello": "font-awesome_fa-trello_1f6-H",
		"fa-female": "font-awesome_fa-female_8UbaS",
		"fa-male": "font-awesome_fa-male_3fIAX",
		"fa-gittip": "font-awesome_fa-gittip_1P70a",
		"fa-gratipay": "font-awesome_fa-gratipay_30toI",
		"fa-sun-o": "font-awesome_fa-sun-o_31446",
		"fa-moon-o": "font-awesome_fa-moon-o_2n75c",
		"fa-archive": "font-awesome_fa-archive_G8JpR",
		"fa-bug": "font-awesome_fa-bug_3QlfQ",
		"fa-vk": "font-awesome_fa-vk_uXEy4",
		"fa-weibo": "font-awesome_fa-weibo_2-NA2",
		"fa-renren": "font-awesome_fa-renren_33jrU",
		"fa-pagelines": "font-awesome_fa-pagelines_tMlzC",
		"fa-stack-exchange": "font-awesome_fa-stack-exchange_cY2TP",
		"fa-arrow-circle-o-right": "font-awesome_fa-arrow-circle-o-right_3haGk",
		"fa-arrow-circle-o-left": "font-awesome_fa-arrow-circle-o-left_1k4pd",
		"fa-toggle-left": "font-awesome_fa-toggle-left_2vhEF",
		"fa-caret-square-o-left": "font-awesome_fa-caret-square-o-left_3pFCM",
		"fa-dot-circle-o": "font-awesome_fa-dot-circle-o_17nxr",
		"fa-wheelchair": "font-awesome_fa-wheelchair_3WaA-",
		"fa-vimeo-square": "font-awesome_fa-vimeo-square_GF6Wl",
		"fa-turkish-lira": "font-awesome_fa-turkish-lira_2tQgt",
		"fa-try": "font-awesome_fa-try_2mqvx",
		"fa-plus-square-o": "font-awesome_fa-plus-square-o_3CCN8",
		"fa-space-shuttle": "font-awesome_fa-space-shuttle_1sPfI",
		"fa-slack": "font-awesome_fa-slack_2x_9I",
		"fa-envelope-square": "font-awesome_fa-envelope-square_1RnoR",
		"fa-wordpress": "font-awesome_fa-wordpress_2mlfy",
		"fa-openid": "font-awesome_fa-openid_2N0O4",
		"fa-institution": "font-awesome_fa-institution_tJnfB",
		"fa-bank": "font-awesome_fa-bank_WmxIq",
		"fa-university": "font-awesome_fa-university_V4Twh",
		"fa-mortar-board": "font-awesome_fa-mortar-board_5HxIc",
		"fa-graduation-cap": "font-awesome_fa-graduation-cap_2oENr",
		"fa-yahoo": "font-awesome_fa-yahoo_QGfiL",
		"fa-google": "font-awesome_fa-google_2aajj",
		"fa-reddit": "font-awesome_fa-reddit_2sNgE",
		"fa-reddit-square": "font-awesome_fa-reddit-square_29tDM",
		"fa-stumbleupon-circle": "font-awesome_fa-stumbleupon-circle_2GjkO",
		"fa-stumbleupon": "font-awesome_fa-stumbleupon_LQD2_",
		"fa-delicious": "font-awesome_fa-delicious_yUQRj",
		"fa-digg": "font-awesome_fa-digg_2pzXU",
		"fa-pied-piper": "font-awesome_fa-pied-piper_3A59t",
		"fa-pied-piper-alt": "font-awesome_fa-pied-piper-alt_DhiQX",
		"fa-drupal": "font-awesome_fa-drupal_27RJX",
		"fa-joomla": "font-awesome_fa-joomla_SVESO",
		"fa-language": "font-awesome_fa-language_2AN5K",
		"fa-fax": "font-awesome_fa-fax_16wn2",
		"fa-building": "font-awesome_fa-building_3_FfX",
		"fa-child": "font-awesome_fa-child_IYme9",
		"fa-paw": "font-awesome_fa-paw_3rRWV",
		"fa-spoon": "font-awesome_fa-spoon_yGnjU",
		"fa-cube": "font-awesome_fa-cube_36eWV",
		"fa-cubes": "font-awesome_fa-cubes_2pStW",
		"fa-behance": "font-awesome_fa-behance_2tsBG",
		"fa-behance-square": "font-awesome_fa-behance-square_3Dg58",
		"fa-steam": "font-awesome_fa-steam_2Kj_T",
		"fa-steam-square": "font-awesome_fa-steam-square_30fZy",
		"fa-recycle": "font-awesome_fa-recycle_2pec3",
		"fa-automobile": "font-awesome_fa-automobile_32KVm",
		"fa-car": "font-awesome_fa-car_2qCRr",
		"fa-cab": "font-awesome_fa-cab_3lZGc",
		"fa-taxi": "font-awesome_fa-taxi_1F0Od",
		"fa-tree": "font-awesome_fa-tree_2WVzm",
		"fa-spotify": "font-awesome_fa-spotify_1Sn08",
		"fa-deviantart": "font-awesome_fa-deviantart_20N8j",
		"fa-soundcloud": "font-awesome_fa-soundcloud_1NiQb",
		"fa-database": "font-awesome_fa-database_aKxNe",
		"fa-file-pdf-o": "font-awesome_fa-file-pdf-o_1s8Iv",
		"fa-file-word-o": "font-awesome_fa-file-word-o_2gOH-",
		"fa-file-excel-o": "font-awesome_fa-file-excel-o_3UNnS",
		"fa-file-powerpoint-o": "font-awesome_fa-file-powerpoint-o_Q5Zu2",
		"fa-file-photo-o": "font-awesome_fa-file-photo-o_1H-bw",
		"fa-file-picture-o": "font-awesome_fa-file-picture-o_39MJp",
		"fa-file-image-o": "font-awesome_fa-file-image-o_zM_3R",
		"fa-file-zip-o": "font-awesome_fa-file-zip-o_e1fVq",
		"fa-file-archive-o": "font-awesome_fa-file-archive-o_22xK3",
		"fa-file-sound-o": "font-awesome_fa-file-sound-o_1Y_s4",
		"fa-file-audio-o": "font-awesome_fa-file-audio-o_2-pOB",
		"fa-file-movie-o": "font-awesome_fa-file-movie-o_2PEC0",
		"fa-file-video-o": "font-awesome_fa-file-video-o_36Qti",
		"fa-file-code-o": "font-awesome_fa-file-code-o_1RuRL",
		"fa-vine": "font-awesome_fa-vine_vgume",
		"fa-codepen": "font-awesome_fa-codepen_1NJXz",
		"fa-jsfiddle": "font-awesome_fa-jsfiddle_o_7_l",
		"fa-life-bouy": "font-awesome_fa-life-bouy_2V_XP",
		"fa-life-buoy": "font-awesome_fa-life-buoy_1lfIE",
		"fa-life-saver": "font-awesome_fa-life-saver_2KZXR",
		"fa-support": "font-awesome_fa-support_1N-pk",
		"fa-life-ring": "font-awesome_fa-life-ring_2musv",
		"fa-circle-o-notch": "font-awesome_fa-circle-o-notch_270Xp",
		"fa-ra": "font-awesome_fa-ra_3dhKx",
		"fa-rebel": "font-awesome_fa-rebel_2xMsz",
		"fa-ge": "font-awesome_fa-ge_qbcWz",
		"fa-empire": "font-awesome_fa-empire_3CYCf",
		"fa-git-square": "font-awesome_fa-git-square_AIT5s",
		"fa-git": "font-awesome_fa-git_36zEF",
		"fa-y-combinator-square": "font-awesome_fa-y-combinator-square_1hf0W",
		"fa-yc-square": "font-awesome_fa-yc-square_WOsgP",
		"fa-hacker-news": "font-awesome_fa-hacker-news_3WGhY",
		"fa-tencent-weibo": "font-awesome_fa-tencent-weibo_25lOY",
		"fa-qq": "font-awesome_fa-qq_3cCR0",
		"fa-wechat": "font-awesome_fa-wechat_3ravb",
		"fa-weixin": "font-awesome_fa-weixin_2TB91",
		"fa-send": "font-awesome_fa-send_1DchU",
		"fa-paper-plane": "font-awesome_fa-paper-plane_1wIQ_",
		"fa-send-o": "font-awesome_fa-send-o_3JTZP",
		"fa-paper-plane-o": "font-awesome_fa-paper-plane-o_1jqnS",
		"fa-history": "font-awesome_fa-history_dFmFV",
		"fa-circle-thin": "font-awesome_fa-circle-thin_gPYOH",
		"fa-header": "font-awesome_fa-header_4p7Jk",
		"fa-paragraph": "font-awesome_fa-paragraph_1OHxb",
		"fa-sliders": "font-awesome_fa-sliders_3C2rT",
		"fa-share-alt": "font-awesome_fa-share-alt_2mGv8",
		"fa-share-alt-square": "font-awesome_fa-share-alt-square_1EGNx",
		"fa-bomb": "font-awesome_fa-bomb_Fud4G",
		"fa-soccer-ball-o": "font-awesome_fa-soccer-ball-o_flWxm",
		"fa-futbol-o": "font-awesome_fa-futbol-o_3ynzb",
		"fa-tty": "font-awesome_fa-tty_YjVy2",
		"fa-binoculars": "font-awesome_fa-binoculars_g0ft_",
		"fa-plug": "font-awesome_fa-plug_39jkp",
		"fa-slideshare": "font-awesome_fa-slideshare_2M6J2",
		"fa-twitch": "font-awesome_fa-twitch_15OqF",
		"fa-yelp": "font-awesome_fa-yelp_2lItp",
		"fa-newspaper-o": "font-awesome_fa-newspaper-o_6R2hq",
		"fa-wifi": "font-awesome_fa-wifi_3HiNk",
		"fa-calculator": "font-awesome_fa-calculator_3jgwb",
		"fa-paypal": "font-awesome_fa-paypal_wq3li",
		"fa-google-wallet": "font-awesome_fa-google-wallet_25T9N",
		"fa-cc-visa": "font-awesome_fa-cc-visa_3dKqJ",
		"fa-cc-mastercard": "font-awesome_fa-cc-mastercard_1tFrQ",
		"fa-cc-discover": "font-awesome_fa-cc-discover_zI26e",
		"fa-cc-amex": "font-awesome_fa-cc-amex_-2Umy",
		"fa-cc-paypal": "font-awesome_fa-cc-paypal_1_FSM",
		"fa-cc-stripe": "font-awesome_fa-cc-stripe_2UDg2",
		"fa-bell-slash": "font-awesome_fa-bell-slash_3Ib9i",
		"fa-bell-slash-o": "font-awesome_fa-bell-slash-o_3ksnm",
		"fa-trash": "font-awesome_fa-trash_3JBuo",
		"fa-copyright": "font-awesome_fa-copyright_1hITT",
		"fa-at": "font-awesome_fa-at_f4Ch1",
		"fa-eyedropper": "font-awesome_fa-eyedropper_3FcO7",
		"fa-paint-brush": "font-awesome_fa-paint-brush_1pD7A",
		"fa-birthday-cake": "font-awesome_fa-birthday-cake_3po72",
		"fa-area-chart": "font-awesome_fa-area-chart_3lnd7",
		"fa-pie-chart": "font-awesome_fa-pie-chart_33WHw",
		"fa-line-chart": "font-awesome_fa-line-chart_30mvo",
		"fa-lastfm": "font-awesome_fa-lastfm_PtiUx",
		"fa-lastfm-square": "font-awesome_fa-lastfm-square_MYtJW",
		"fa-toggle-off": "font-awesome_fa-toggle-off_37j_t",
		"fa-toggle-on": "font-awesome_fa-toggle-on_ewbXL",
		"fa-bicycle": "font-awesome_fa-bicycle_1NM2E",
		"fa-bus": "font-awesome_fa-bus_3SgQl",
		"fa-ioxhost": "font-awesome_fa-ioxhost_2FHLb",
		"fa-angellist": "font-awesome_fa-angellist_3mWIU",
		"fa-cc": "font-awesome_fa-cc_2gDjr",
		"fa-shekel": "font-awesome_fa-shekel_32Xbx",
		"fa-sheqel": "font-awesome_fa-sheqel_r9gc9",
		"fa-ils": "font-awesome_fa-ils_2rphi",
		"fa-meanpath": "font-awesome_fa-meanpath_1bP8s",
		"fa-buysellads": "font-awesome_fa-buysellads_1EZ84",
		"fa-connectdevelop": "font-awesome_fa-connectdevelop_lFfNs",
		"fa-dashcube": "font-awesome_fa-dashcube_3TPe8",
		"fa-forumbee": "font-awesome_fa-forumbee_2aFHV",
		"fa-leanpub": "font-awesome_fa-leanpub_1O2QB",
		"fa-sellsy": "font-awesome_fa-sellsy_2-Jzm",
		"fa-shirtsinbulk": "font-awesome_fa-shirtsinbulk_1R30o",
		"fa-simplybuilt": "font-awesome_fa-simplybuilt_SwF0E",
		"fa-skyatlas": "font-awesome_fa-skyatlas_A7cMa",
		"fa-cart-plus": "font-awesome_fa-cart-plus_3yJKe",
		"fa-cart-arrow-down": "font-awesome_fa-cart-arrow-down_2JrEM",
		"fa-diamond": "font-awesome_fa-diamond_rt3b9",
		"fa-ship": "font-awesome_fa-ship_2OfXG",
		"fa-user-secret": "font-awesome_fa-user-secret_1Yk8o",
		"fa-motorcycle": "font-awesome_fa-motorcycle_3hzEC",
		"fa-street-view": "font-awesome_fa-street-view_1GICB",
		"fa-heartbeat": "font-awesome_fa-heartbeat_1jUmO",
		"fa-venus": "font-awesome_fa-venus_156Bm",
		"fa-mars": "font-awesome_fa-mars_goj_J",
		"fa-mercury": "font-awesome_fa-mercury_3xn4l",
		"fa-intersex": "font-awesome_fa-intersex_7AU6q",
		"fa-transgender": "font-awesome_fa-transgender_1vmGU",
		"fa-transgender-alt": "font-awesome_fa-transgender-alt_3mFjr",
		"fa-venus-double": "font-awesome_fa-venus-double_1EhXf",
		"fa-mars-double": "font-awesome_fa-mars-double_23qjT",
		"fa-venus-mars": "font-awesome_fa-venus-mars_2juhA",
		"fa-mars-stroke": "font-awesome_fa-mars-stroke_3j02v",
		"fa-mars-stroke-v": "font-awesome_fa-mars-stroke-v_21zWw",
		"fa-mars-stroke-h": "font-awesome_fa-mars-stroke-h_NAEPy",
		"fa-neuter": "font-awesome_fa-neuter_15DlS",
		"fa-genderless": "font-awesome_fa-genderless_t5AI_",
		"fa-facebook-official": "font-awesome_fa-facebook-official_jfxWm",
		"fa-pinterest-p": "font-awesome_fa-pinterest-p_3dWB3",
		"fa-whatsapp": "font-awesome_fa-whatsapp_J02DP",
		"fa-server": "font-awesome_fa-server_3u1Oo",
		"fa-user-plus": "font-awesome_fa-user-plus_1lnbu",
		"fa-user-times": "font-awesome_fa-user-times_B6k3E",
		"fa-hotel": "font-awesome_fa-hotel_twAEq",
		"fa-bed": "font-awesome_fa-bed_3zxC7",
		"fa-viacoin": "font-awesome_fa-viacoin_1p3ob",
		"fa-train": "font-awesome_fa-train_2YY80",
		"fa-subway": "font-awesome_fa-subway_3aQJs",
		"fa-medium": "font-awesome_fa-medium_1H4Gf",
		"fa-yc": "font-awesome_fa-yc_3pFuR",
		"fa-y-combinator": "font-awesome_fa-y-combinator_1u0iT",
		"fa-optin-monster": "font-awesome_fa-optin-monster_3CZ47",
		"fa-opencart": "font-awesome_fa-opencart_2eRe1",
		"fa-expeditedssl": "font-awesome_fa-expeditedssl_2WngL",
		"fa-battery-4": "font-awesome_fa-battery-4_RSyHm",
		"fa-battery-full": "font-awesome_fa-battery-full_28an4",
		"fa-battery-3": "font-awesome_fa-battery-3_1SZoR",
		"fa-battery-three-quarters": "font-awesome_fa-battery-three-quarters_3HGut",
		"fa-battery-2": "font-awesome_fa-battery-2_2q0gH",
		"fa-battery-half": "font-awesome_fa-battery-half_ADDBG",
		"fa-battery-1": "font-awesome_fa-battery-1_3RoGP",
		"fa-battery-quarter": "font-awesome_fa-battery-quarter_2xLnr",
		"fa-battery-0": "font-awesome_fa-battery-0_pGakD",
		"fa-battery-empty": "font-awesome_fa-battery-empty_2TxG4",
		"fa-mouse-pointer": "font-awesome_fa-mouse-pointer_24qyQ",
		"fa-i-cursor": "font-awesome_fa-i-cursor_b-XNs",
		"fa-object-group": "font-awesome_fa-object-group_f82ev",
		"fa-object-ungroup": "font-awesome_fa-object-ungroup_1mxgT",
		"fa-sticky-note": "font-awesome_fa-sticky-note_2ygYS",
		"fa-sticky-note-o": "font-awesome_fa-sticky-note-o_uHPRL",
		"fa-cc-jcb": "font-awesome_fa-cc-jcb_mcB5F",
		"fa-cc-diners-club": "font-awesome_fa-cc-diners-club_2SEIp",
		"fa-clone": "font-awesome_fa-clone_1dqxB",
		"fa-balance-scale": "font-awesome_fa-balance-scale_1TLPZ",
		"fa-hourglass-o": "font-awesome_fa-hourglass-o_1SNFw",
		"fa-hourglass-1": "font-awesome_fa-hourglass-1_2aI9h",
		"fa-hourglass-start": "font-awesome_fa-hourglass-start_3wtcf",
		"fa-hourglass-2": "font-awesome_fa-hourglass-2_3duyo",
		"fa-hourglass-half": "font-awesome_fa-hourglass-half_VHRaz",
		"fa-hourglass-3": "font-awesome_fa-hourglass-3_1CRzM",
		"fa-hourglass-end": "font-awesome_fa-hourglass-end_2Z9_h",
		"fa-hourglass": "font-awesome_fa-hourglass_1cFtL",
		"fa-hand-grab-o": "font-awesome_fa-hand-grab-o_b25vk",
		"fa-hand-rock-o": "font-awesome_fa-hand-rock-o_112vq",
		"fa-hand-stop-o": "font-awesome_fa-hand-stop-o_RTFxN",
		"fa-hand-paper-o": "font-awesome_fa-hand-paper-o_QsN35",
		"fa-hand-scissors-o": "font-awesome_fa-hand-scissors-o_NJKCd",
		"fa-hand-lizard-o": "font-awesome_fa-hand-lizard-o_2Mt2X",
		"fa-hand-spock-o": "font-awesome_fa-hand-spock-o_2zhLy",
		"fa-hand-pointer-o": "font-awesome_fa-hand-pointer-o_1-1J6",
		"fa-hand-peace-o": "font-awesome_fa-hand-peace-o_2pDbl",
		"fa-trademark": "font-awesome_fa-trademark_2YmAL",
		"fa-registered": "font-awesome_fa-registered_2PIjk",
		"fa-creative-commons": "font-awesome_fa-creative-commons_3yzOj",
		"fa-gg": "font-awesome_fa-gg_1jxwW",
		"fa-gg-circle": "font-awesome_fa-gg-circle_-Bm1G",
		"fa-tripadvisor": "font-awesome_fa-tripadvisor_1Kn8E",
		"fa-odnoklassniki": "font-awesome_fa-odnoklassniki_lrIeV",
		"fa-odnoklassniki-square": "font-awesome_fa-odnoklassniki-square_b-bSU",
		"fa-get-pocket": "font-awesome_fa-get-pocket_1zZQJ",
		"fa-wikipedia-w": "font-awesome_fa-wikipedia-w_1Cdpe",
		"fa-safari": "font-awesome_fa-safari_3TQrJ",
		"fa-chrome": "font-awesome_fa-chrome_-dxJj",
		"fa-firefox": "font-awesome_fa-firefox_2InFw",
		"fa-opera": "font-awesome_fa-opera_UBUEN",
		"fa-internet-explorer": "font-awesome_fa-internet-explorer_1nFTU",
		"fa-tv": "font-awesome_fa-tv_3cVCb",
		"fa-television": "font-awesome_fa-television_1oye_",
		"fa-contao": "font-awesome_fa-contao_1Raai",
		"fa-500px": "font-awesome_fa-500px_1QfNu",
		"fa-amazon": "font-awesome_fa-amazon_2KhH9",
		"fa-calendar-plus-o": "font-awesome_fa-calendar-plus-o_2EO18",
		"fa-calendar-minus-o": "font-awesome_fa-calendar-minus-o_2A9gw",
		"fa-calendar-times-o": "font-awesome_fa-calendar-times-o_3a887",
		"fa-calendar-check-o": "font-awesome_fa-calendar-check-o_1bEdE",
		"fa-industry": "font-awesome_fa-industry_5-sxe",
		"fa-map-pin": "font-awesome_fa-map-pin_-DkdU",
		"fa-map-signs": "font-awesome_fa-map-signs_2S38y",
		"fa-map-o": "font-awesome_fa-map-o_21xVI",
		"fa-map": "font-awesome_fa-map_KoElW",
		"fa-commenting": "font-awesome_fa-commenting_3crfp",
		"fa-commenting-o": "font-awesome_fa-commenting-o_3vPy2",
		"fa-houzz": "font-awesome_fa-houzz_3uMPg",
		"fa-vimeo": "font-awesome_fa-vimeo_BCAw2",
		"fa-black-tie": "font-awesome_fa-black-tie_36KSS",
		"fa-fonticons": "font-awesome_fa-fonticons_1iLaa",
		"fa-reddit-alien": "font-awesome_fa-reddit-alien_8M0ZA",
		"fa-edge": "font-awesome_fa-edge_SKxLn",
		"fa-credit-card-alt": "font-awesome_fa-credit-card-alt_3K4Hb",
		"fa-codiepie": "font-awesome_fa-codiepie_3exdZ",
		"fa-modx": "font-awesome_fa-modx_VNOMM",
		"fa-fort-awesome": "font-awesome_fa-fort-awesome_cOs8o",
		"fa-usb": "font-awesome_fa-usb_1Zb-H",
		"fa-product-hunt": "font-awesome_fa-product-hunt_3zOPt",
		"fa-mixcloud": "font-awesome_fa-mixcloud_7qwu5",
		"fa-scribd": "font-awesome_fa-scribd_2eBei",
		"fa-pause-circle": "font-awesome_fa-pause-circle_3q_lF",
		"fa-pause-circle-o": "font-awesome_fa-pause-circle-o_3G2_g",
		"fa-stop-circle": "font-awesome_fa-stop-circle_Fuwsc",
		"fa-stop-circle-o": "font-awesome_fa-stop-circle-o_3d-BX",
		"fa-shopping-bag": "font-awesome_fa-shopping-bag_2WDzp",
		"fa-shopping-basket": "font-awesome_fa-shopping-basket_r0TVD",
		"fa-hashtag": "font-awesome_fa-hashtag_29Ewd",
		"fa-bluetooth": "font-awesome_fa-bluetooth_2jUgH",
		"fa-bluetooth-b": "font-awesome_fa-bluetooth-b_3uxZ5",
		"fa-percent": "font-awesome_fa-percent_2z_PP"
	};

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "32400f4e08932a94d8bfd2422702c446.eot";

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "32400f4e08932a94d8bfd2422702c446.eot";

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "db812d8a70a4e88e888744c1c9a27e89.woff2";

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "a35720c2fed2c7f043bc7e4ffb45e073.woff";

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "a3de2170e4e9df77161ea5d3f31b2668.ttf";

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "f775f9cca88e21d45bebe185b27c0e5b.svg";

/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = "<table class=\"fieldSelector\">\n  <thead>\n    <tr><th class=\"mode\"><i></i></th><th class=\"label\"></th></tr>\n  </thead>\n  <tbody class=\"fields\"></tbody>\n</table>\n";

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.newInstance = undefined;
	exports.extend = extend;

	var _CompositeClosureHelper = __webpack_require__(6);

	var _CompositeClosureHelper2 = _interopRequireDefault(_CompositeClosureHelper);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var DEFAULT_FIELD_STATE = {
	  range: [0, 1],
	  active: false
	};
	// ----------------------------------------------------------------------------
	// Field Provider
	// ----------------------------------------------------------------------------

	function fieldProvider(publicAPI, model) {
	  if (!model.fields) {
	    model.fields = {};
	  }

	  publicAPI.getFieldNames = function () {
	    var val = Object.keys(model.fields);
	    if (model.fieldsSorted) val.sort();
	    return val;
	  };

	  publicAPI.getActiveFieldNames = function () {
	    var val = Object.keys(model.fields).filter(function (name) {
	      return model.fields[name].active;
	    });
	    if (model.fieldsSorted) val.sort();
	    return val;
	  };

	  publicAPI.addField = function (name) {
	    var initialState = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var field = Object.assign({}, DEFAULT_FIELD_STATE, initialState, { name: name });
	    field.range = [].concat(field.range); // Make sure we copy the array
	    model.fields[name] = field;
	    publicAPI.fireFieldChange(field);
	  };

	  publicAPI.getField = function (name) {
	    return model.fields[name];
	  };

	  publicAPI.updateField = function (name) {
	    var changeSet = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    var field = model.fields[name] || {};
	    var hasChange = false;

	    Object.keys(changeSet).forEach(function (key) {
	      hasChange = hasChange || field[key] !== changeSet[key];
	      // Set changes
	      field[key] = changeSet[key];
	    });

	    if (hasChange) {
	      field.name = name; // Just in case
	      model.fields[name] = field;
	      publicAPI.fireFieldChange(field);
	    }
	  };

	  publicAPI.toggleFieldSelection = function (name) {
	    model.fields[name].active = !model.fields[name].active;
	    publicAPI.fireFieldChange(model.fields[name]);
	  };

	  publicAPI.removeAllFields = function () {
	    model.fields = {};
	    publicAPI.fireFieldChange();
	  };
	}

	// ----------------------------------------------------------------------------
	// Object factory
	// ----------------------------------------------------------------------------

	var DEFAULT_VALUES = {
	  fields: null,
	  fieldsSorted: false
	};

	// ----------------------------------------------------------------------------

	function extend(publicAPI, model) {
	  var initialValues = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  Object.assign(model, DEFAULT_VALUES, initialValues);

	  _CompositeClosureHelper2.default.destroy(publicAPI, model);
	  _CompositeClosureHelper2.default.isA(publicAPI, model, 'FieldProvider');
	  _CompositeClosureHelper2.default.event(publicAPI, model, 'FieldChange');
	  _CompositeClosureHelper2.default.get(publicAPI, model, ['fieldsSorted']);
	  _CompositeClosureHelper2.default.set(publicAPI, model, ['fieldsSorted']);

	  fieldProvider(publicAPI, model);
	}

	// ----------------------------------------------------------------------------

	var newInstance = exports.newInstance = _CompositeClosureHelper2.default.newInstance(extend);

	// ----------------------------------------------------------------------------

	exports.default = { newInstance: newInstance, extend: extend };

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.newInstance = undefined;
	exports.extend = extend;

	var _CompositeClosureHelper = __webpack_require__(6);

	var _CompositeClosureHelper2 = _interopRequireDefault(_CompositeClosureHelper);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// ----------------------------------------------------------------------------
	// Histogram 1D Provider
	// ----------------------------------------------------------------------------

	function histogram1DProvider(publicAPI, model, fetchHelper) {
	  // Private members
	  var ready = publicAPI.fireHistogram1DReady;
	  delete publicAPI.fireHistogram1DReady;

	  // Protected members
	  if (!model.histogram1DData) {
	    model.histogram1DData = {};
	  }

	  // Data access
	  publicAPI.setHistogram1DNumberOfBins = function (bin) {
	    if (model.histogram1DNumberOfBins !== bin) {
	      model.histogram1DData = {};
	      model.histogram1DNumberOfBins = bin;
	    }
	  };

	  // Return true if data is available
	  publicAPI.loadHistogram1D = function (field) {
	    if (!model.histogram1DData[field]) {
	      model.histogram1DData[field] = { pending: true };
	      fetchHelper.addRequest(field);
	      return false;
	    }

	    if (model.histogram1DData[field].pending) {
	      return false;
	    }

	    return true;
	  };

	  publicAPI.getHistogram1D = function (field) {
	    return model.histogram1DData[field];
	  };
	  publicAPI.setHistogram1D = function (field, data) {
	    model.histogram1DData[field] = data;
	    ready(field, data);
	  };
	}

	// ----------------------------------------------------------------------------
	// Object factory
	// ----------------------------------------------------------------------------

	var DEFAULT_VALUES = {
	  // histogram1DData: null,
	  histogram1DNumberOfBins: 32
	};

	// ----------------------------------------------------------------------------

	function extend(publicAPI, model) {
	  var initialValues = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  Object.assign(model, DEFAULT_VALUES, initialValues);

	  _CompositeClosureHelper2.default.destroy(publicAPI, model);
	  _CompositeClosureHelper2.default.isA(publicAPI, model, 'Histogram1DProvider');
	  _CompositeClosureHelper2.default.get(publicAPI, model, ['histogram1DNumberOfBins']);
	  _CompositeClosureHelper2.default.event(publicAPI, model, 'histogram1DReady');
	  var fetchHelper = _CompositeClosureHelper2.default.fetch(publicAPI, model, 'Histogram1D');

	  histogram1DProvider(publicAPI, model, fetchHelper);
	}

	// ----------------------------------------------------------------------------

	var newInstance = exports.newInstance = _CompositeClosureHelper2.default.newInstance(extend);

	// ----------------------------------------------------------------------------

	exports.default = { newInstance: newInstance, extend: extend };

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.newInstance = undefined;
	exports.extend = extend;

	var _CompositeClosureHelper = __webpack_require__(6);

	var _CompositeClosureHelper2 = _interopRequireDefault(_CompositeClosureHelper);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// ----------------------------------------------------------------------------
	// Global
	// ----------------------------------------------------------------------------

	function flipHistogram(histo2d) {
	  var newHisto2d = {
	    bins: histo2d.bins.map(function (bin) {
	      var x = bin.x;
	      var y = bin.y;
	      var count = bin.count;

	      return {
	        x: y,
	        y: x,
	        count: count
	      };
	    }),
	    x: histo2d.y,
	    y: histo2d.x };

	  return newHisto2d;
	}

	// ----------------------------------------------------------------------------
	// Histogram 2D Provider
	// ----------------------------------------------------------------------------

	function histogram2DProvider(publicAPI, model, fetchHelper) {
	  // Private members
	  var ready = publicAPI.fireHistogram2DReady;
	  delete publicAPI.fireHistogram2DReady;

	  // Protected members
	  if (!model.histogram2DData) {
	    model.histogram2DData = {};
	  }

	  // Data access
	  publicAPI.setHistogram2DNumberOfBins = function (bin) {
	    if (model.histogram2DNumberOfBins !== bin) {
	      model.histogram2DData = {};
	      model.histogram2DNumberOfBins = bin;
	    }
	  };

	  // Return true if data is available
	  publicAPI.loadHistogram2D = function (axisA, axisB) {
	    if (model.histogram2DData[axisA] && model.histogram2DData[axisA][axisB]) {
	      if (model.histogram2DData[axisA][axisB].pending) {
	        return false;
	      }
	      return true;
	    }
	    if (model.histogram2DData[axisB] && model.histogram2DData[axisB][axisA] && !model.histogram2DData[axisB][axisA].pending) {
	      if (!model.histogram2DData[axisA]) {
	        model.histogram2DData[axisA] = {};
	      }
	      model.histogram2DData[axisA][axisB] = flipHistogram(model.histogram2DData[axisB][axisA]);
	      return true;
	    }

	    if (!model.histogram2DData[axisA]) {
	      model.histogram2DData[axisA] = {};
	    }
	    model.histogram2DData[axisA][axisB] = { pending: true };

	    // Request data if possible
	    fetchHelper.addRequest([axisA, axisB]);

	    return false;
	  };

	  publicAPI.getHistogram2D = function (axisA, axisB) {
	    if (model.histogram2DData[axisA] && model.histogram2DData[axisA][axisB]) {
	      return model.histogram2DData[axisA][axisB];
	    }
	    return null;
	  };

	  publicAPI.setHistogram2D = function (axisA, axisB, data) {
	    if (!model.histogram2DData[axisA]) {
	      model.histogram2DData[axisA] = {};
	    }
	    if (!model.histogram2DData[axisB]) {
	      model.histogram2DData[axisB] = {};
	    }
	    model.histogram2DData[axisA][axisB] = data;
	    model.histogram2DData[axisB][axisA] = flipHistogram(data);

	    ready(axisA, axisB, data);
	  };

	  publicAPI.getMaxCount = function (axisA, axisB) {
	    if (model.histogram2DData[axisA] && model.histogram2DData[axisA][axisB] && model.histogram2DData[axisA][axisB].bins) {
	      if (!model.histogram2DData[axisA][axisB].maxCount) {
	        (function () {
	          var count = 0;
	          model.histogram2DData[axisA][axisB].bins.forEach(function (item) {
	            count = count < item.count ? item.count : count;
	          });
	          model.histogram2DData[axisA][axisB].maxCount = count;
	        })();
	      }
	      return model.histogram2DData[axisA][axisB].maxCount;
	    }
	    return 0;
	  };

	  publicAPI.getMaxCounts = function (listOfAxisPair) {
	    return listOfAxisPair.map(function (args) {
	      return publicAPI.getMaxCount(args[0], args[1]);
	    });
	  };
	  publicAPI.getMaxOfMaxCounts = function (listOfAxisPair) {
	    return Math.max.apply(null, publicAPI.getMaxCounts(listOfAxisPair));
	  };
	}

	// ----------------------------------------------------------------------------
	// Object factory
	// ----------------------------------------------------------------------------

	var DEFAULT_VALUES = {
	  // histogram2DData: null,
	  histogram2DNumberOfBins: 32
	};

	// ----------------------------------------------------------------------------

	function extend(publicAPI, model) {
	  var initialValues = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  Object.assign(model, DEFAULT_VALUES, initialValues);

	  _CompositeClosureHelper2.default.destroy(publicAPI, model);
	  _CompositeClosureHelper2.default.isA(publicAPI, model, 'Histogram2DProvider');
	  _CompositeClosureHelper2.default.get(publicAPI, model, ['histogram2DNumberOfBins']);
	  _CompositeClosureHelper2.default.event(publicAPI, model, 'Histogram2DReady');
	  var fetchHelper = _CompositeClosureHelper2.default.fetch(publicAPI, model, 'Histogram2D');

	  histogram2DProvider(publicAPI, model, fetchHelper);
	}

	// ----------------------------------------------------------------------------

	var newInstance = exports.newInstance = _CompositeClosureHelper2.default.newInstance(extend);

	// ----------------------------------------------------------------------------

	exports.default = { newInstance: newInstance, extend: extend };

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.newInstance = exports.STATIC = undefined;
	exports.createSortedIterator = createSortedIterator;
	exports.extend = extend;

	var _CompositeClosureHelper = __webpack_require__(6);

	var _CompositeClosureHelper2 = _interopRequireDefault(_CompositeClosureHelper);

	var _shapes = __webpack_require__(32);

	var _shapes2 = _interopRequireDefault(_shapes);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// ----------------------------------------------------------------------------
	// Global
	// ----------------------------------------------------------------------------

	function convert(item, model) {
	  var result = { color: item.colors };
	  result.shape = model.legendShapes[item.shapes];
	  return result;
	}

	function createSortedIterator(priorityOrder, propertyChoices, defaultValues) {
	  var propertyKeys = Object.keys(propertyChoices);

	  var prioritySizes = priorityOrder.map(function (name) {
	    return propertyChoices[name].length;
	  });
	  var priorityIndex = prioritySizes.map(function (i) {
	    return 0;
	  });

	  var get = function get() {
	    var item = {};
	    propertyKeys.forEach(function (name) {
	      var idx = priorityOrder.indexOf(name);
	      if (idx === -1) {
	        item[name] = defaultValues[name];
	      } else {
	        item[name] = propertyChoices[name][priorityIndex[idx]];
	      }
	    });
	    return item;
	  };

	  var next = function next() {
	    var overflowIdx = 0;
	    priorityIndex[overflowIdx]++;
	    while (priorityIndex[overflowIdx] === prioritySizes[overflowIdx]) {
	      // Handle overflow
	      priorityIndex[overflowIdx] = 0;
	      if (overflowIdx < priorityIndex.length) {
	        priorityIndex[++overflowIdx]++;
	      }
	    }
	  };

	  return { get: get, next: next };
	}

	var palettes = {
	  YlGn: ['rgb(255, 255, 229)', 'rgb(247, 252, 185)', 'rgb(217, 240, 163)', 'rgb(173, 221, 142)', 'rgb(120, 198, 121)', 'rgb(65, 171, 93)', 'rgb(35, 132, 67)', 'rgb(0, 104, 55)', 'rgb(0, 69, 41)'],
	  YlGnBu: ['rgb(255, 255, 217)', 'rgb(237, 248, 177)', 'rgb(199, 233, 180)', 'rgb(127, 205, 187)', 'rgb(65, 182, 196)', 'rgb(29, 145, 192)', 'rgb(34, 94, 168)', 'rgb(37, 52, 148)', 'rgb(8, 29, 88)'],
	  GnBu: ['rgb(247, 252, 240)', 'rgb(224, 243, 219)', 'rgb(204, 235, 197)', 'rgb(168, 221, 181)', 'rgb(123, 204, 196)', 'rgb(78, 179, 211)', 'rgb(43, 140, 190)', 'rgb(8, 104, 172)', 'rgb(8, 64, 129)'],
	  BuGn: ['rgb(247, 252, 253)', 'rgb(229, 245, 249)', 'rgb(204, 236, 230)', 'rgb(153, 216, 201)', 'rgb(102, 194, 164)', 'rgb(65, 174, 118)', 'rgb(35, 139, 69)', 'rgb(0, 109, 44)', 'rgb(0, 68, 27)'],
	  PuBuGn: ['rgb(255, 247, 251)', 'rgb(236, 226, 240)', 'rgb(208, 209, 230)', 'rgb(166, 189, 219)', 'rgb(103, 169, 207)', 'rgb(54, 144, 192)', 'rgb(2, 129, 138)', 'rgb(1, 108, 89)', 'rgb(1, 70, 54)'],
	  PuBu: ['rgb(255, 247, 251)', 'rgb(236, 231, 242)', 'rgb(208, 209, 230)', 'rgb(166, 189, 219)', 'rgb(116, 169, 207)', 'rgb(54, 144, 192)', 'rgb(5, 112, 176)', 'rgb(4, 90, 141)', 'rgb(2, 56, 88)'],
	  BuPu: ['rgb(247, 252, 253)', 'rgb(224, 236, 244)', 'rgb(191, 211, 230)', 'rgb(158, 188, 218)', 'rgb(140, 150, 198)', 'rgb(140, 107, 177)', 'rgb(136, 65, 157)', 'rgb(129, 15, 124)', 'rgb(77, 0, 75)'],
	  RdPu: ['rgb(255, 247, 243)', 'rgb(253, 224, 221)', 'rgb(252, 197, 192)', 'rgb(250, 159, 181)', 'rgb(247, 104, 161)', 'rgb(221, 52, 151)', 'rgb(174, 1, 126)', 'rgb(122, 1, 119)', 'rgb(73, 0, 106)'],
	  PuRd: ['rgb(247, 244, 249)', 'rgb(231, 225, 239)', 'rgb(212, 185, 218)', 'rgb(201, 148, 199)', 'rgb(223, 101, 176)', 'rgb(231, 41, 138)', 'rgb(206, 18, 86)', 'rgb(152, 0, 67)', 'rgb(103, 0, 31)'],
	  OrRd: ['rgb(255, 247, 236)', 'rgb(254, 232, 200)', 'rgb(253, 212, 158)', 'rgb(253, 187, 132)', 'rgb(252, 141, 89)', 'rgb(239, 101, 72)', 'rgb(215, 48, 31)', 'rgb(179, 0, 0)', 'rgb(127, 0, 0)'],
	  YlOrRd: ['rgb(255, 255, 204)', 'rgb(255, 237, 160)', 'rgb(254, 217, 118)', 'rgb(254, 178, 76)', 'rgb(253, 141, 60)', 'rgb(252, 78, 42)', 'rgb(227, 26, 28)', 'rgb(189, 0, 38)', 'rgb(128, 0, 38)'],
	  YlOrBr: ['rgb(255, 255, 229)', 'rgb(255, 247, 188)', 'rgb(254, 227, 145)', 'rgb(254, 196, 79)', 'rgb(254, 153, 41)', 'rgb(236, 112, 20)', 'rgb(204, 76, 2)', 'rgb(153, 52, 4)', 'rgb(102, 37, 6)'],
	  Purples: ['rgb(252, 251, 253)', 'rgb(239, 237, 245)', 'rgb(218, 218, 235)', 'rgb(188, 189, 220)', 'rgb(158, 154, 200)', 'rgb(128, 125, 186)', 'rgb(106, 81, 163)', 'rgb(84, 39, 143)', 'rgb(63, 0, 125)'],
	  Blues: ['rgb(247, 251, 255)', 'rgb(222, 235, 247)', 'rgb(198, 219, 239)', 'rgb(158, 202, 225)', 'rgb(107, 174, 214)', 'rgb(66, 146, 198)', 'rgb(33, 113, 181)', 'rgb(8, 81, 156)', 'rgb(8, 48, 107)'],
	  Greens: ['rgb(247, 252, 245)', 'rgb(229, 245, 224)', 'rgb(199, 233, 192)', 'rgb(161, 217, 155)', 'rgb(116, 196, 118)', 'rgb(65, 171, 93)', 'rgb(35, 139, 69)', 'rgb(0, 109, 44)', 'rgb(0, 68, 27)'],
	  Oranges: ['rgb(255, 245, 235)', 'rgb(254, 230, 206)', 'rgb(253, 208, 162)', 'rgb(253, 174, 107)', 'rgb(253, 141, 60)', 'rgb(241, 105, 19)', 'rgb(217, 72, 1)', 'rgb(166, 54, 3)', 'rgb(127, 39, 4)'],
	  Reds: ['rgb(255, 245, 240)', 'rgb(254, 224, 210)', 'rgb(252, 187, 161)', 'rgb(252, 146, 114)', 'rgb(251, 106, 74)', 'rgb(239, 59, 44)', 'rgb(203, 24, 29)', 'rgb(165, 15, 21)', 'rgb(103, 0, 13)'],
	  Greys: ['rgb(255, 255, 255)', 'rgb(240, 240, 240)', 'rgb(217, 217, 217)', 'rgb(189, 189, 189)', 'rgb(150, 150, 150)', 'rgb(115, 115, 115)', 'rgb(82, 82, 82)', 'rgb(37, 37, 37)', 'rgb(0, 0, 0)'],
	  PuOr: ['rgb(127, 59, 8)', 'rgb(179, 88, 6)', 'rgb(224, 130, 20)', 'rgb(253, 184, 99)', 'rgb(254, 224, 182)', 'rgb(247, 247, 247)', 'rgb(216, 218, 235)', 'rgb(178, 171, 210)', 'rgb(128, 115, 172)', 'rgb(84, 39, 136)', 'rgb(45, 0, 75)'],
	  BrBG: ['rgb(84, 48, 5)', 'rgb(140, 81, 10)', 'rgb(191, 129, 45)', 'rgb(223, 194, 125)', 'rgb(246, 232, 195)', 'rgb(245, 245, 245)', 'rgb(199, 234, 229)', 'rgb(128, 205, 193)', 'rgb(53, 151, 143)', 'rgb(1, 102, 94)', 'rgb(0, 60, 48)'],
	  PRGn: ['rgb(64, 0, 75)', 'rgb(118, 42, 131)', 'rgb(153, 112, 171)', 'rgb(194, 165, 207)', 'rgb(231, 212, 232)', 'rgb(247, 247, 247)', 'rgb(217, 240, 211)', 'rgb(166, 219, 160)', 'rgb(90, 174, 97)', 'rgb(27, 120, 55)', 'rgb(0, 68, 27)'],
	  PiYG: ['rgb(142, 1, 82)', 'rgb(197, 27, 125)', 'rgb(222, 119, 174)', 'rgb(241, 182, 218)', 'rgb(253, 224, 239)', 'rgb(247, 247, 247)', 'rgb(230, 245, 208)', 'rgb(184, 225, 134)', 'rgb(127, 188, 65)', 'rgb(77, 146, 33)', 'rgb(39, 100, 25)'],
	  RdBu: ['rgb(103, 0, 31)', 'rgb(178, 24, 43)', 'rgb(214, 96, 77)', 'rgb(244, 165, 130)', 'rgb(253, 219, 199)', 'rgb(247, 247, 247)', 'rgb(209, 229, 240)', 'rgb(146, 197, 222)', 'rgb(67, 147, 195)', 'rgb(33, 102, 172)', 'rgb(5, 48, 97)'],
	  RdGy: ['rgb(103, 0, 31)', 'rgb(178, 24, 43)', 'rgb(214, 96, 77)', 'rgb(244, 165, 130)', 'rgb(253, 219, 199)', 'rgb(255, 255, 255)', 'rgb(224, 224, 224)', 'rgb(186, 186, 186)', 'rgb(135, 135, 135)', 'rgb(77, 77, 77)', 'rgb(26, 26, 26)'],
	  RdYlBu: ['rgb(165, 0, 38)', 'rgb(215, 48, 39)', 'rgb(244, 109, 67)', 'rgb(253, 174, 97)', 'rgb(254, 224, 144)', 'rgb(255, 255, 191)', 'rgb(224, 243, 248)', 'rgb(171, 217, 233)', 'rgb(116, 173, 209)', 'rgb(69, 117, 180)', 'rgb(49, 54, 149)'],
	  Spectral: ['rgb(158, 1, 66)', 'rgb(213, 62, 79)', 'rgb(244, 109, 67)', 'rgb(253, 174, 97)', 'rgb(254, 224, 139)', 'rgb(255, 255, 191)', 'rgb(230, 245, 152)', 'rgb(171, 221, 164)', 'rgb(102, 194, 165)', 'rgb(50, 136, 189)', 'rgb(94, 79, 162)'],
	  RdYlGn: ['rgb(165, 0, 38)', 'rgb(215, 48, 39)', 'rgb(244, 109, 67)', 'rgb(253, 174, 97)', 'rgb(254, 224, 139)', 'rgb(255, 255, 191)', 'rgb(217, 239, 139)', 'rgb(166, 217, 106)', 'rgb(102, 189, 99)', 'rgb(26, 152, 80)', 'rgb(0, 104, 55)'],
	  Accent: ['rgb(127, 201, 127)', 'rgb(190, 174, 212)', 'rgb(253, 192, 134)', 'rgb(255, 255, 153)', 'rgb(56, 108, 176)', 'rgb(240, 2, 127)', 'rgb(191, 91, 23)', 'rgb(102, 102, 102)'],
	  Dark2: ['rgb(27, 158, 119)', 'rgb(217, 95, 2)', 'rgb(117, 112, 179)', 'rgb(231, 41, 138)', 'rgb(102, 166, 30)', 'rgb(230, 171, 2)', 'rgb(166, 118, 29)', 'rgb(102, 102, 102)'],
	  Paired: ['rgb(166, 206, 227)', 'rgb(31, 120, 180)', 'rgb(178, 223, 138)', 'rgb(51, 160, 44)', 'rgb(251, 154, 153)', 'rgb(227, 26, 28)', 'rgb(253, 191, 111)', 'rgb(255, 127, 0)', 'rgb(202, 178, 214)', 'rgb(106, 61, 154)', 'rgb(255, 255, 153)', 'rgb(177, 89, 40)'],
	  Pastel1: ['rgb(251, 180, 174)', 'rgb(179, 205, 227)', 'rgb(204, 235, 197)', 'rgb(222, 203, 228)', 'rgb(254, 217, 166)', 'rgb(255, 255, 204)', 'rgb(229, 216, 189)', 'rgb(253, 218, 236)', 'rgb(242, 242, 242)'],
	  Pastel2: ['rgb(179, 226, 205)', 'rgb(253, 205, 172)', 'rgb(203, 213, 232)', 'rgb(244, 202, 228)', 'rgb(230, 245, 201)', 'rgb(255, 242, 174)', 'rgb(241, 226, 204)', 'rgb(204, 204, 204)'],
	  Set1: ['rgb(228, 26, 28)', 'rgb(55, 126, 184)', 'rgb(77, 175, 74)', 'rgb(152, 78, 163)', 'rgb(255, 127, 0)', 'rgb(255, 255, 51)', 'rgb(166, 86, 40)', 'rgb(247, 129, 191)', 'rgb(153, 153, 153)'],
	  Set2: ['rgb(102, 194, 165)', 'rgb(252, 141, 98)', 'rgb(141, 160, 203)', 'rgb(231, 138, 195)', 'rgb(166, 216, 84)', 'rgb(255, 217, 47)', 'rgb(229, 196, 148)', 'rgb(179, 179, 179)'],
	  Set3: ['rgb(141, 211, 199)', 'rgb(255, 255, 179)', 'rgb(190, 186, 218)', 'rgb(251, 128, 114)', 'rgb(128, 177, 211)', 'rgb(253, 180, 98)', 'rgb(179, 222, 105)', 'rgb(252, 205, 229)', 'rgb(217, 217, 217)', 'rgb(188, 128, 189)', 'rgb(204, 235, 197)', 'rgb(255, 237, 111)']
	};

	// ----------------------------------------------------------------------------
	// Static API
	// ----------------------------------------------------------------------------

	var STATIC = exports.STATIC = {
	  shapes: _shapes2.default,
	  palettes: palettes
	};

	// ----------------------------------------------------------------------------
	// Legend Provider
	// ----------------------------------------------------------------------------

	function legendProvider(publicAPI, model) {
	  publicAPI.addLegendEntry = function (name) {
	    if (model.legendEntries.indexOf(name) === -1 && name) {
	      model.legendEntries.push(name);
	      model.legendDirty = true;
	    }
	  };

	  publicAPI.removeLegendEntry = function (name) {
	    if (model.legendEntries.indexOf(name) !== -1 && name) {
	      model.legendEntries.splice(model.legendEntries.indexOf(name), 1);
	      model.legendDirty = true;
	    }
	  };
	  publicAPI.removeAllLegendEntry = function () {
	    model.legendEntries = [];
	    model.legendDirty = true;
	  };

	  publicAPI.assignLegend = function () {
	    var newPriority = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

	    if (newPriority) {
	      model.legendPriorities = newPriority;
	      model.legendDirty = true;
	    }
	    if (model.legendDirty) {
	      (function () {
	        var shapesArray = Object.keys(model.legendShapes);
	        model.legendDirty = false;
	        model.legendMapping = {};

	        if (model.legendPriorities && model.legendPriorities.length) {
	          (function () {
	            var defaultColor = model.legendColors[0];
	            var defaultShape = shapesArray[0];

	            var iterator = createSortedIterator(model.legendPriorities, { colors: model.legendColors, shapes: shapesArray }, { colors: defaultColor, shapes: defaultShape });

	            model.legendEntries.forEach(function (name) {
	              model.legendMapping[name] = convert(iterator.get(), model);
	              iterator.next();
	            });
	          })();
	        } else {
	          model.legendEntries.forEach(function (name, idx) {
	            model.legendMapping[name] = {
	              color: model.legendColors[idx % model.legendColors.length],
	              shape: model.legendShapes[shapesArray[idx % shapesArray.length]]
	            };
	          });
	        }
	      })();
	    }
	  };

	  publicAPI.useLegendPalette = function (name) {
	    var colorSet = palettes[name];
	    if (colorSet) {
	      model.legendColors = [].concat(colorSet);
	      model.legendDirty = true;
	    }
	  };

	  publicAPI.updateLegendSettings = function (settings) {
	    ['legendShapes', 'legendColors', 'legendEntries', 'legendPriorities'].forEach(function (key) {
	      if (settings[key]) {
	        model[key] = [].concat(settings.key);
	        model.legendDirty = true;
	      }
	    });
	  };

	  publicAPI.listLegendColorPalettes = function () {
	    return Object.keys(palettes);
	  };

	  publicAPI.getLegend = function (name) {
	    if (model.legendDirty) {
	      publicAPI.assignLegend();
	    }
	    return model.legendMapping[name];
	  };
	}

	// ----------------------------------------------------------------------------
	// Object factory
	// ----------------------------------------------------------------------------

	var DEFAULT_VALUES = {
	  legendShapes: _shapes2.default,
	  legendColors: [].concat(palettes.Paired),
	  legendEntries: [],
	  legendPriorities: ['shapes', 'colors'],
	  legendMapping: {},
	  legendDirty: true
	};

	// ----------------------------------------------------------------------------

	function extend(publicAPI, model) {
	  var initialValues = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  Object.assign(model, DEFAULT_VALUES, initialValues);

	  _CompositeClosureHelper2.default.destroy(publicAPI, model);
	  _CompositeClosureHelper2.default.isA(publicAPI, model, 'LegendProvider');

	  legendProvider(publicAPI, model);
	}

	// ----------------------------------------------------------------------------

	var newInstance = exports.newInstance = _CompositeClosureHelper2.default.newInstance(extend);

	// ----------------------------------------------------------------------------

	exports.default = Object.assign({ newInstance: newInstance, extend: extend }, STATIC);

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _Circle = __webpack_require__(33);

	var _Circle2 = _interopRequireDefault(_Circle);

	var _Square = __webpack_require__(37);

	var _Square2 = _interopRequireDefault(_Square);

	var _Triangle = __webpack_require__(38);

	var _Triangle2 = _interopRequireDefault(_Triangle);

	var _Diamond = __webpack_require__(39);

	var _Diamond2 = _interopRequireDefault(_Diamond);

	var _X = __webpack_require__(40);

	var _X2 = _interopRequireDefault(_X);

	var _Pentagon = __webpack_require__(41);

	var _Pentagon2 = _interopRequireDefault(_Pentagon);

	var _InvertedTriangle = __webpack_require__(42);

	var _InvertedTriangle2 = _interopRequireDefault(_InvertedTriangle);

	var _Star = __webpack_require__(43);

	var _Star2 = _interopRequireDefault(_Star);

	var _Plus = __webpack_require__(44);

	var _Plus2 = _interopRequireDefault(_Plus);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = {
	  Circle: _Circle2.default,
	  Square: _Square2.default,
	  Triangle: _Triangle2.default,
	  Diamond: _Diamond2.default,
	  X: _X2.default,
	  Pentagon: _Pentagon2.default,
	  InvertedTriangle: _InvertedTriangle2.default,
	  Star: _Star2.default,
	  Plus: _Plus2.default
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	;
	var sprite = __webpack_require__(34);;
	var image = "<symbol viewBox=\"0 0 15 15\" id=\"Circle\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <g> <circle cx=\"7.5\" cy=\"7.5\" r=\"6\"/> </g> </symbol>";
	module.exports = sprite.add(image, "Circle");

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	var Sprite = __webpack_require__(35);
	var globalSprite = new Sprite();

	if (document.body) {
	  globalSprite.elem = globalSprite.render(document.body);
	} else {
	  document.addEventListener('DOMContentLoaded', function () {
	    globalSprite.elem = globalSprite.render(document.body);
	  }, false);
	}

	module.exports = globalSprite;


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var Sniffr = __webpack_require__(36);

	/**
	 * List of SVG attributes to fix url target in them
	 * @type {string[]}
	 */
	var fixAttributes = [
	  'clipPath',
	  'colorProfile',
	  'src',
	  'cursor',
	  'fill',
	  'filter',
	  'marker',
	  'markerStart',
	  'markerMid',
	  'markerEnd',
	  'mask',
	  'stroke'
	];

	/**
	 * Query to find'em
	 * @type {string}
	 */
	var fixAttributesQuery = '[' + fixAttributes.join('],[') + ']';
	/**
	 * @type {RegExp}
	 */
	var URI_FUNC_REGEX = /^url\((.*)\)$/;

	/**
	 * Convert array-like to array
	 * @param {Object} arrayLike
	 * @returns {Array.<*>}
	 */
	function arrayFrom(arrayLike) {
	  return Array.prototype.slice.call(arrayLike, 0);
	}

	/**
	 * Handles forbidden symbols which cannot be directly used inside attributes with url(...) content.
	 * Adds leading slash for the brackets
	 * @param {string} url
	 * @return {string} encoded url
	 */
	function encodeUrlForEmbedding(url) {
	  return url.replace(/\(|\)/g, "\\$&");
	}

	/**
	 * Replaces prefix in `url()` functions
	 * @param {Element} svg
	 * @param {string} currentUrlPrefix
	 * @param {string} newUrlPrefix
	 */
	function baseUrlWorkAround(svg, currentUrlPrefix, newUrlPrefix) {
	  var nodes = svg.querySelectorAll(fixAttributesQuery);

	  if (!nodes) {
	    return;
	  }

	  arrayFrom(nodes).forEach(function (node) {
	    if (!node.attributes) {
	      return;
	    }

	    arrayFrom(node.attributes).forEach(function (attribute) {
	      var attributeName = attribute.localName.toLowerCase();

	      if (fixAttributes.indexOf(attributeName) !== -1) {
	        var match = URI_FUNC_REGEX.exec(node.getAttribute(attributeName));

	        // Do not touch urls with unexpected prefix
	        if (match && match[1].indexOf(currentUrlPrefix) === 0) {
	          var referenceUrl = encodeUrlForEmbedding(newUrlPrefix + match[1].split(currentUrlPrefix)[1]);
	          node.setAttribute(attributeName, 'url(' + referenceUrl + ')');
	        }
	      }
	    });
	  });
	}

	/**
	 * Because of Firefox bug #353575 gradients and patterns don't work if they are within a symbol.
	 * To workaround this we move the gradient definition outside the symbol element
	 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=353575
	 * @param {Element} svg
	 */
	var FirefoxSymbolBugWorkaround = function (svg) {
	  var defs = svg.querySelector('defs');

	  var moveToDefsElems = svg.querySelectorAll('symbol linearGradient, symbol radialGradient, symbol pattern');
	  for (var i = 0, len = moveToDefsElems.length; i < len; i++) {
	    defs.appendChild(moveToDefsElems[i]);
	  }
	};

	/**
	 * @type {string}
	 */
	var DEFAULT_URI_PREFIX = '#';

	/**
	 * @type {string}
	 */
	var xLinkHref = 'xlink:href';
	/**
	 * @type {string}
	 */
	var xLinkNS = 'http://www.w3.org/1999/xlink';
	/**
	 * @type {string}
	 */
	var svgOpening = '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="' + xLinkNS + '"';
	/**
	 * @type {string}
	 */
	var svgClosing = '</svg>';
	/**
	 * @type {string}
	 */
	var contentPlaceHolder = '{content}';

	/**
	 * Representation of SVG sprite
	 * @constructor
	 */
	function Sprite() {
	  var baseElement = document.getElementsByTagName('base')[0];
	  var currentUrl = window.location.href.split('#')[0];
	  var baseUrl = baseElement && baseElement.href;
	  this.urlPrefix = baseUrl && baseUrl !== currentUrl ? currentUrl + DEFAULT_URI_PREFIX : DEFAULT_URI_PREFIX;

	  var sniffr = new Sniffr();
	  sniffr.sniff();
	  this.browser = sniffr.browser;
	  this.content = [];

	  if (this.browser.name !== 'ie' && baseUrl) {
	    window.addEventListener('spriteLoaderLocationUpdated', function (e) {
	      var currentPrefix = this.urlPrefix;
	      var newUrlPrefix = e.detail.newUrl.split(DEFAULT_URI_PREFIX)[0] + DEFAULT_URI_PREFIX;
	      baseUrlWorkAround(this.svg, currentPrefix, newUrlPrefix);
	      this.urlPrefix = newUrlPrefix;

	      if (this.browser.name === 'firefox' || this.browser.name === 'edge' || this.browser.name === 'chrome' && this.browser.version[0] >= 49) {
	        var nodes = arrayFrom(document.querySelectorAll('use[*|href]'));
	        nodes.forEach(function (node) {
	          var href = node.getAttribute(xLinkHref);
	          if (href && href.indexOf(currentPrefix) === 0) {
	            node.setAttributeNS(xLinkNS, xLinkHref, newUrlPrefix + href.split(DEFAULT_URI_PREFIX)[1]);
	          }
	        });
	      }
	    }.bind(this));
	  }
	}

	Sprite.styles = ['position:absolute', 'width:0', 'height:0', 'visibility:hidden'];

	Sprite.spriteTemplate = svgOpening + ' style="'+ Sprite.styles.join(';') +'"><defs>' + contentPlaceHolder + '</defs>' + svgClosing;
	Sprite.symbolTemplate = svgOpening + '>' + contentPlaceHolder + svgClosing;

	/**
	 * @type {Array<String>}
	 */
	Sprite.prototype.content = null;

	/**
	 * @param {String} content
	 * @param {String} id
	 */
	Sprite.prototype.add = function (content, id) {
	  if (this.svg) {
	    this.appendSymbol(content);
	  }

	  this.content.push(content);

	  return DEFAULT_URI_PREFIX + id;
	};

	/**
	 *
	 * @param content
	 * @param template
	 * @returns {Element}
	 */
	Sprite.prototype.wrapSVG = function (content, template) {
	  var svgString = template.replace(contentPlaceHolder, content);

	  var svg = new DOMParser().parseFromString(svgString, 'image/svg+xml').documentElement;

	  if (this.browser.name !== 'ie' && this.urlPrefix) {
	    baseUrlWorkAround(svg, DEFAULT_URI_PREFIX, this.urlPrefix);
	  }

	  return svg;
	};

	Sprite.prototype.appendSymbol = function (content) {
	  var symbol = this.wrapSVG(content, Sprite.symbolTemplate).childNodes[0];

	  this.svg.querySelector('defs').appendChild(symbol);
	  if (this.browser.name === 'firefox') {
	    FirefoxSymbolBugWorkaround(this.svg);
	  }
	};

	/**
	 * @returns {String}
	 */
	Sprite.prototype.toString = function () {
	  var wrapper = document.createElement('div');
	  wrapper.appendChild(this.render());
	  return wrapper.innerHTML;
	};

	/**
	 * @param {HTMLElement} [target]
	 * @param {Boolean} [prepend=true]
	 * @returns {HTMLElement} Rendered sprite node
	 */
	Sprite.prototype.render = function (target, prepend) {
	  target = target || null;
	  prepend = typeof prepend === 'boolean' ? prepend : true;

	  var svg = this.wrapSVG(this.content.join(''), Sprite.spriteTemplate);

	  if (this.browser.name === 'firefox') {
	    FirefoxSymbolBugWorkaround(svg);
	  }

	  if (target) {
	    if (prepend && target.childNodes[0]) {
	      target.insertBefore(svg, target.childNodes[0]);
	    } else {
	      target.appendChild(svg);
	    }
	  }

	  this.svg = svg;

	  return svg;
	};

	module.exports = Sprite;


/***/ },
/* 36 */
/***/ function(module, exports) {

	(function(host) {

	  var properties = {
	    browser: [
	      [/msie ([\.\_\d]+)/, "ie"],
	      [/trident\/.*?rv:([\.\_\d]+)/, "ie"],
	      [/firefox\/([\.\_\d]+)/, "firefox"],
	      [/chrome\/([\.\_\d]+)/, "chrome"],
	      [/version\/([\.\_\d]+).*?safari/, "safari"],
	      [/mobile safari ([\.\_\d]+)/, "safari"],
	      [/android.*?version\/([\.\_\d]+).*?safari/, "com.android.browser"],
	      [/crios\/([\.\_\d]+).*?safari/, "chrome"],
	      [/opera/, "opera"],
	      [/opera\/([\.\_\d]+)/, "opera"],
	      [/opera ([\.\_\d]+)/, "opera"],
	      [/opera mini.*?version\/([\.\_\d]+)/, "opera.mini"],
	      [/opios\/([a-z\.\_\d]+)/, "opera"],
	      [/blackberry/, "blackberry"],
	      [/blackberry.*?version\/([\.\_\d]+)/, "blackberry"],
	      [/bb\d+.*?version\/([\.\_\d]+)/, "blackberry"],
	      [/rim.*?version\/([\.\_\d]+)/, "blackberry"],
	      [/iceweasel\/([\.\_\d]+)/, "iceweasel"],
	      [/edge\/([\.\d]+)/, "edge"]
	    ],
	    os: [
	      [/linux ()([a-z\.\_\d]+)/, "linux"],
	      [/mac os x/, "macos"],
	      [/mac os x.*?([\.\_\d]+)/, "macos"],
	      [/os ([\.\_\d]+) like mac os/, "ios"],
	      [/openbsd ()([a-z\.\_\d]+)/, "openbsd"],
	      [/android/, "android"],
	      [/android ([a-z\.\_\d]+);/, "android"],
	      [/mozilla\/[a-z\.\_\d]+ \((?:mobile)|(?:tablet)/, "firefoxos"],
	      [/windows\s*(?:nt)?\s*([\.\_\d]+)/, "windows"],
	      [/windows phone.*?([\.\_\d]+)/, "windows.phone"],
	      [/windows mobile/, "windows.mobile"],
	      [/blackberry/, "blackberryos"],
	      [/bb\d+/, "blackberryos"],
	      [/rim.*?os\s*([\.\_\d]+)/, "blackberryos"]
	    ],
	    device: [
	      [/ipad/, "ipad"],
	      [/iphone/, "iphone"],
	      [/lumia/, "lumia"],
	      [/htc/, "htc"],
	      [/nexus/, "nexus"],
	      [/galaxy nexus/, "galaxy.nexus"],
	      [/nokia/, "nokia"],
	      [/ gt\-/, "galaxy"],
	      [/ sm\-/, "galaxy"],
	      [/xbox/, "xbox"],
	      [/(?:bb\d+)|(?:blackberry)|(?: rim )/, "blackberry"]
	    ]
	  };

	  var UNKNOWN = "Unknown";

	  var propertyNames = Object.keys(properties);

	  function Sniffr() {
	    var self = this;

	    propertyNames.forEach(function(propertyName) {
	      self[propertyName] = {
	        name: UNKNOWN,
	        version: [],
	        versionString: UNKNOWN
	      };
	    });
	  }

	  function determineProperty(self, propertyName, userAgent) {
	    properties[propertyName].forEach(function(propertyMatcher) {
	      var propertyRegex = propertyMatcher[0];
	      var propertyValue = propertyMatcher[1];

	      var match = userAgent.match(propertyRegex);

	      if (match) {
	        self[propertyName].name = propertyValue;

	        if (match[2]) {
	          self[propertyName].versionString = match[2];
	          self[propertyName].version = [];
	        } else if (match[1]) {
	          self[propertyName].versionString = match[1].replace(/_/g, ".");
	          self[propertyName].version = parseVersion(match[1]);
	        } else {
	          self[propertyName].versionString = UNKNOWN;
	          self[propertyName].version = [];
	        }
	      }
	    });
	  }

	  function parseVersion(versionString) {
	    return versionString.split(/[\._]/).map(function(versionPart) {
	      return parseInt(versionPart);
	    });
	  }

	  Sniffr.prototype.sniff = function(userAgentString) {
	    var self = this;
	    var userAgent = (userAgentString || navigator.userAgent || "").toLowerCase();

	    propertyNames.forEach(function(propertyName) {
	      determineProperty(self, propertyName, userAgent);
	    });
	  };


	  if (typeof module !== 'undefined' && module.exports) {
	    module.exports = Sniffr;
	  } else {
	    host.Sniffr = new Sniffr();
	    host.Sniffr.sniff(navigator.userAgent);
	  }
	})(this);


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	;
	var sprite = __webpack_require__(34);;
	var image = "<symbol viewBox=\"0 0 15 15\" id=\"Square\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <g> <rect x=\"2\" y=\"2\" width=\"12\" height=\"12\"/> </g> </symbol>";
	module.exports = sprite.add(image, "Square");

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	;
	var sprite = __webpack_require__(34);;
	var image = "<symbol viewBox=\"0 0 15 15\" id=\"Triangle\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <g> <polygon points=\"7.5,1 14,14 1,14\"/> </g> </symbol>";
	module.exports = sprite.add(image, "Triangle");

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	;
	var sprite = __webpack_require__(34);;
	var image = "<symbol viewBox=\"0 0 15 15\" id=\"Diamond\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <g> <polygon points=\"1,7.5 7.5,1 14,7.5 7.5,14\"/> </g> </symbol>";
	module.exports = sprite.add(image, "Diamond");

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	;
	var sprite = __webpack_require__(34);;
	var image = "<symbol viewBox=\"0 0 15 15\" id=\"X\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <g> <polygon points=\"4.0,1.0 7.5,4.5 11.0,1.0 14.0,4.0 10.5,7.5 14.0,11.0 11.0,14.0 7.5,10.5 4.0,14.0 1.0,11.0 4.5,7.5 1.0,4.0\"/> </g> </symbol>";
	module.exports = sprite.add(image, "X");

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	;
	var sprite = __webpack_require__(34);;
	var image = "<symbol viewBox=\"0 0 15 15\" id=\"Pentagon\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <g> <polygon points=\"11.03,12.35 13.21,5.65 7.50,1.50 1.79,5.65 3.97,12.35\"/> </g> </symbol>";
	module.exports = sprite.add(image, "Pentagon");

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	;
	var sprite = __webpack_require__(34);;
	var image = "<symbol viewBox=\"0 0 15 15\" id=\"InvertedTriangle\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <g> <polygon points=\"1,1 14,1 7.5,14\"/> </g> </symbol>";
	module.exports = sprite.add(image, "InvertedTriangle");

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	;
	var sprite = __webpack_require__(34);;
	var image = "<symbol viewBox=\"0 0 15 15\" id=\"Star\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <g> <polygon points=\"11.03,12.35 9.78,8.24 13.21,5.65 8.91,5.56 7.50,1.50 6.09,5.56 1.79,5.65 5.22,8.24 3.97,12.35 7.50,9.90\"/> </g> </symbol>";
	module.exports = sprite.add(image, "Star");

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	;
	var sprite = __webpack_require__(34);;
	var image = "<symbol viewBox=\"0 0 15 15\" id=\"Plus\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"> <g> <polygon points=\"5.5,1.0 9.5,1.0 9.5,5.5 14.0,5.5 14.0,9.5 9.5,9.5 9.5,14.0 5.5,14.0 5.5,9.5 1,9.5 1,5.5 5.5,5.5\"/> </g> </symbol>";
	module.exports = sprite.add(image, "Plus");

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.newInstance = undefined;
	exports.extend = extend;

	var _CompositeClosureHelper = __webpack_require__(6);

	var _CompositeClosureHelper2 = _interopRequireDefault(_CompositeClosureHelper);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	// ----------------------------------------------------------------------------
	// Global
	// ----------------------------------------------------------------------------

	var SEPARATOR = '--|+|--';

	// ----------------------------------------------------------------------------
	// Mutual Information Provider
	// ----------------------------------------------------------------------------

	function mutualInformationProvider(publicAPI, model, fetchHelper) {
	  // Private members
	  var ready = publicAPI.fireMutualInformationReady;
	  delete publicAPI.fireMutualInformationReady;

	  // Return true if data is available
	  publicAPI.loadMutualInformation = function (names) {
	    var previousRequest = model.mutualInformationParameterNames.join(SEPARATOR);
	    var currentRequest = names.join(SEPARATOR);

	    if (previousRequest === currentRequest) {
	      return !!model.mutualInformationData;
	    }

	    // Store request and reset data
	    model.mutualInformationParameterNames = [].concat(names);
	    model.mutualInformationData = null;

	    fetchHelper.addRequest(model.mutualInformationParameterNames);

	    return false;
	  };

	  publicAPI.getMutualInformation = function (names) {
	    var previousRequest = model.mutualInformationParameterNames.join(SEPARATOR);
	    var currentRequest = names ? names.join(SEPARATOR) : previousRequest;

	    if (previousRequest === currentRequest) {
	      return model.mutualInformationData;
	    }
	    return null;
	  };

	  publicAPI.setMutualInformation = function (data) {
	    // FIXME (params can be out of synch)
	    model.mutualInformationData = data;
	    ready(data);
	  };
	}

	// ----------------------------------------------------------------------------
	// Object factory
	// ----------------------------------------------------------------------------

	var DEFAULT_VALUES = {
	  // mutualInformationData: null,
	  mutualInformationParameterNames: []
	};

	// ----------------------------------------------------------------------------

	function extend(publicAPI, model) {
	  var initialValues = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	  Object.assign(model, DEFAULT_VALUES, initialValues);

	  _CompositeClosureHelper2.default.destroy(publicAPI, model);
	  _CompositeClosureHelper2.default.isA(publicAPI, model, 'MutualInformationProvider');
	  _CompositeClosureHelper2.default.get(publicAPI, model, ['mutualInformationParameterNames']);
	  _CompositeClosureHelper2.default.event(publicAPI, model, 'MutualInformationReady');
	  var fetchHelper = _CompositeClosureHelper2.default.fetch(publicAPI, model, 'MutualInformation');

	  mutualInformationProvider(publicAPI, model, fetchHelper);
	}

	// ----------------------------------------------------------------------------

	var newInstance = exports.newInstance = _CompositeClosureHelper2.default.newInstance(extend);

	// ----------------------------------------------------------------------------

	exports.default = { newInstance: newInstance, extend: extend };

/***/ },
/* 46 */
/***/ function(module, exports) {

	module.exports = {
		"fields": {
			"percentage of team minutes": {
				"range": [
					7.2,
					79.5
				],
				"active": true,
				"id": 12,
				"name": "percentage of team minutes"
			},
			"percentage of team assists": {
				"range": [
					0,
					49.2
				],
				"active": true,
				"id": 11,
				"name": "percentage of team assists"
			},
			"steals per game": {
				"range": [
					0,
					2.48
				],
				"active": true,
				"id": 17,
				"name": "steals per game"
			},
			"minutes": {
				"range": [
					5.1,
					38.5
				],
				"active": true,
				"id": 10,
				"name": "minutes"
			},
			"free throw percent": {
				"range": [
					0,
					1
				],
				"active": true,
				"id": 8,
				"name": "free throw percent"
			}
		},
		"histogram2DData": {
			"versatility index": {
				"rebounds pergame": {
					"y": {
						"extent": [
							0,
							13.600000000000001
						],
						"delta": 0.42500000000000004
					},
					"x": {
						"extent": [
							0,
							12.600000000000001
						],
						"delta": 0.39375000000000004
					},
					"bins": [
						{
							"y": 0,
							"x": 0,
							"count": 1
						},
						{
							"y": 0,
							"x": 4.331250000000001,
							"count": 1
						},
						{
							"y": 0,
							"x": 5.11875,
							"count": 1
						},
						{
							"y": 0.42500000000000004,
							"x": 0,
							"count": 3
						},
						{
							"y": 0.42500000000000004,
							"x": 2.3625000000000003,
							"count": 1
						},
						{
							"y": 0.42500000000000004,
							"x": 3.1500000000000004,
							"count": 2
						},
						{
							"y": 0.42500000000000004,
							"x": 3.54375,
							"count": 1
						},
						{
							"y": 0.42500000000000004,
							"x": 3.9375000000000004,
							"count": 2
						},
						{
							"y": 0.42500000000000004,
							"x": 4.331250000000001,
							"count": 4
						},
						{
							"y": 0.42500000000000004,
							"x": 4.7250000000000005,
							"count": 4
						},
						{
							"y": 0.42500000000000004,
							"x": 5.11875,
							"count": 1
						},
						{
							"y": 0.42500000000000004,
							"x": 5.512500000000001,
							"count": 3
						},
						{
							"y": 0.42500000000000004,
							"x": 5.906250000000001,
							"count": 1
						},
						{
							"y": 0.42500000000000004,
							"x": 6.300000000000001,
							"count": 1
						},
						{
							"y": 0.42500000000000004,
							"x": 6.6937500000000005,
							"count": 1
						},
						{
							"y": 0.42500000000000004,
							"x": 8.662500000000001,
							"count": 1
						},
						{
							"y": 0.8500000000000001,
							"x": 0,
							"count": 4
						},
						{
							"y": 0.8500000000000001,
							"x": 2.7562500000000005,
							"count": 1
						},
						{
							"y": 0.8500000000000001,
							"x": 3.1500000000000004,
							"count": 1
						},
						{
							"y": 0.8500000000000001,
							"x": 3.54375,
							"count": 2
						},
						{
							"y": 0.8500000000000001,
							"x": 3.9375000000000004,
							"count": 3
						},
						{
							"y": 0.8500000000000001,
							"x": 4.331250000000001,
							"count": 3
						},
						{
							"y": 0.8500000000000001,
							"x": 4.7250000000000005,
							"count": 5
						},
						{
							"y": 0.8500000000000001,
							"x": 5.11875,
							"count": 1
						},
						{
							"y": 0.8500000000000001,
							"x": 5.512500000000001,
							"count": 4
						},
						{
							"y": 0.8500000000000001,
							"x": 5.906250000000001,
							"count": 4
						},
						{
							"y": 0.8500000000000001,
							"x": 6.300000000000001,
							"count": 1
						},
						{
							"y": 0.8500000000000001,
							"x": 6.6937500000000005,
							"count": 5
						},
						{
							"y": 0.8500000000000001,
							"x": 7.0875,
							"count": 1
						},
						{
							"y": 0.8500000000000001,
							"x": 7.481250000000001,
							"count": 3
						},
						{
							"y": 0.8500000000000001,
							"x": 8.26875,
							"count": 1
						},
						{
							"y": 1.2750000000000001,
							"x": 0,
							"count": 2
						},
						{
							"y": 1.2750000000000001,
							"x": 2.7562500000000005,
							"count": 1
						},
						{
							"y": 1.2750000000000001,
							"x": 3.54375,
							"count": 3
						},
						{
							"y": 1.2750000000000001,
							"x": 3.9375000000000004,
							"count": 1
						},
						{
							"y": 1.2750000000000001,
							"x": 4.331250000000001,
							"count": 6
						},
						{
							"y": 1.2750000000000001,
							"x": 4.7250000000000005,
							"count": 5
						},
						{
							"y": 1.2750000000000001,
							"x": 5.11875,
							"count": 2
						},
						{
							"y": 1.2750000000000001,
							"x": 5.512500000000001,
							"count": 8
						},
						{
							"y": 1.2750000000000001,
							"x": 5.906250000000001,
							"count": 3
						},
						{
							"y": 1.2750000000000001,
							"x": 6.300000000000001,
							"count": 3
						},
						{
							"y": 1.2750000000000001,
							"x": 6.6937500000000005,
							"count": 3
						},
						{
							"y": 1.2750000000000001,
							"x": 8.26875,
							"count": 1
						},
						{
							"y": 1.7000000000000002,
							"x": 0,
							"count": 1
						},
						{
							"y": 1.7000000000000002,
							"x": 3.54375,
							"count": 2
						},
						{
							"y": 1.7000000000000002,
							"x": 3.9375000000000004,
							"count": 1
						},
						{
							"y": 1.7000000000000002,
							"x": 4.331250000000001,
							"count": 2
						},
						{
							"y": 1.7000000000000002,
							"x": 4.7250000000000005,
							"count": 6
						},
						{
							"y": 1.7000000000000002,
							"x": 5.11875,
							"count": 8
						},
						{
							"y": 1.7000000000000002,
							"x": 5.512500000000001,
							"count": 6
						},
						{
							"y": 1.7000000000000002,
							"x": 5.906250000000001,
							"count": 10
						},
						{
							"y": 1.7000000000000002,
							"x": 6.300000000000001,
							"count": 2
						},
						{
							"y": 1.7000000000000002,
							"x": 6.6937500000000005,
							"count": 3
						},
						{
							"y": 1.7000000000000002,
							"x": 7.0875,
							"count": 11
						},
						{
							"y": 1.7000000000000002,
							"x": 7.481250000000001,
							"count": 2
						},
						{
							"y": 1.7000000000000002,
							"x": 7.875000000000001,
							"count": 2
						},
						{
							"y": 1.7000000000000002,
							"x": 8.26875,
							"count": 3
						},
						{
							"y": 2.125,
							"x": 0,
							"count": 2
						},
						{
							"y": 2.125,
							"x": 2.7562500000000005,
							"count": 1
						},
						{
							"y": 2.125,
							"x": 3.54375,
							"count": 3
						},
						{
							"y": 2.125,
							"x": 3.9375000000000004,
							"count": 1
						},
						{
							"y": 2.125,
							"x": 4.331250000000001,
							"count": 3
						},
						{
							"y": 2.125,
							"x": 4.7250000000000005,
							"count": 9
						},
						{
							"y": 2.125,
							"x": 5.11875,
							"count": 2
						},
						{
							"y": 2.125,
							"x": 5.512500000000001,
							"count": 3
						},
						{
							"y": 2.125,
							"x": 5.906250000000001,
							"count": 5
						},
						{
							"y": 2.125,
							"x": 6.300000000000001,
							"count": 2
						},
						{
							"y": 2.125,
							"x": 6.6937500000000005,
							"count": 4
						},
						{
							"y": 2.125,
							"x": 7.0875,
							"count": 3
						},
						{
							"y": 2.125,
							"x": 7.481250000000001,
							"count": 2
						},
						{
							"y": 2.125,
							"x": 7.875000000000001,
							"count": 1
						},
						{
							"y": 2.125,
							"x": 8.26875,
							"count": 1
						},
						{
							"y": 2.125,
							"x": 8.662500000000001,
							"count": 1
						},
						{
							"y": 2.5500000000000003,
							"x": 0,
							"count": 2
						},
						{
							"y": 2.5500000000000003,
							"x": 2.7562500000000005,
							"count": 1
						},
						{
							"y": 2.5500000000000003,
							"x": 4.331250000000001,
							"count": 6
						},
						{
							"y": 2.5500000000000003,
							"x": 4.7250000000000005,
							"count": 3
						},
						{
							"y": 2.5500000000000003,
							"x": 5.11875,
							"count": 5
						},
						{
							"y": 2.5500000000000003,
							"x": 5.512500000000001,
							"count": 2
						},
						{
							"y": 2.5500000000000003,
							"x": 5.906250000000001,
							"count": 6
						},
						{
							"y": 2.5500000000000003,
							"x": 6.300000000000001,
							"count": 4
						},
						{
							"y": 2.5500000000000003,
							"x": 6.6937500000000005,
							"count": 7
						},
						{
							"y": 2.5500000000000003,
							"x": 7.0875,
							"count": 1
						},
						{
							"y": 2.5500000000000003,
							"x": 7.481250000000001,
							"count": 3
						},
						{
							"y": 2.5500000000000003,
							"x": 7.875000000000001,
							"count": 3
						},
						{
							"y": 2.5500000000000003,
							"x": 8.26875,
							"count": 1
						},
						{
							"y": 2.9750000000000005,
							"x": 3.54375,
							"count": 1
						},
						{
							"y": 2.9750000000000005,
							"x": 4.331250000000001,
							"count": 2
						},
						{
							"y": 2.9750000000000005,
							"x": 4.7250000000000005,
							"count": 7
						},
						{
							"y": 2.9750000000000005,
							"x": 5.11875,
							"count": 1
						},
						{
							"y": 2.9750000000000005,
							"x": 5.512500000000001,
							"count": 2
						},
						{
							"y": 2.9750000000000005,
							"x": 5.906250000000001,
							"count": 6
						},
						{
							"y": 2.9750000000000005,
							"x": 6.300000000000001,
							"count": 1
						},
						{
							"y": 2.9750000000000005,
							"x": 6.6937500000000005,
							"count": 2
						},
						{
							"y": 2.9750000000000005,
							"x": 7.0875,
							"count": 5
						},
						{
							"y": 2.9750000000000005,
							"x": 7.481250000000001,
							"count": 3
						},
						{
							"y": 2.9750000000000005,
							"x": 7.875000000000001,
							"count": 2
						},
						{
							"y": 2.9750000000000005,
							"x": 8.26875,
							"count": 2
						},
						{
							"y": 2.9750000000000005,
							"x": 9.450000000000001,
							"count": 1
						},
						{
							"y": 3.4000000000000004,
							"x": 3.9375000000000004,
							"count": 2
						},
						{
							"y": 3.4000000000000004,
							"x": 4.331250000000001,
							"count": 4
						},
						{
							"y": 3.4000000000000004,
							"x": 4.7250000000000005,
							"count": 2
						},
						{
							"y": 3.4000000000000004,
							"x": 5.11875,
							"count": 3
						},
						{
							"y": 3.4000000000000004,
							"x": 5.512500000000001,
							"count": 7
						},
						{
							"y": 3.4000000000000004,
							"x": 5.906250000000001,
							"count": 5
						},
						{
							"y": 3.4000000000000004,
							"x": 6.300000000000001,
							"count": 6
						},
						{
							"y": 3.4000000000000004,
							"x": 6.6937500000000005,
							"count": 6
						},
						{
							"y": 3.4000000000000004,
							"x": 7.0875,
							"count": 1
						},
						{
							"y": 3.4000000000000004,
							"x": 7.875000000000001,
							"count": 4
						},
						{
							"y": 3.4000000000000004,
							"x": 8.26875,
							"count": 2
						},
						{
							"y": 3.4000000000000004,
							"x": 8.662500000000001,
							"count": 1
						},
						{
							"y": 3.4000000000000004,
							"x": 9.05625,
							"count": 1
						},
						{
							"y": 3.825,
							"x": 4.331250000000001,
							"count": 1
						},
						{
							"y": 3.825,
							"x": 5.11875,
							"count": 3
						},
						{
							"y": 3.825,
							"x": 5.512500000000001,
							"count": 2
						},
						{
							"y": 3.825,
							"x": 5.906250000000001,
							"count": 5
						},
						{
							"y": 3.825,
							"x": 6.300000000000001,
							"count": 2
						},
						{
							"y": 3.825,
							"x": 6.6937500000000005,
							"count": 1
						},
						{
							"y": 3.825,
							"x": 7.0875,
							"count": 1
						},
						{
							"y": 3.825,
							"x": 7.481250000000001,
							"count": 1
						},
						{
							"y": 3.825,
							"x": 7.875000000000001,
							"count": 1
						},
						{
							"y": 3.825,
							"x": 8.26875,
							"count": 2
						},
						{
							"y": 3.825,
							"x": 8.662500000000001,
							"count": 1
						},
						{
							"y": 3.825,
							"x": 9.05625,
							"count": 1
						},
						{
							"y": 3.825,
							"x": 9.450000000000001,
							"count": 1
						},
						{
							"y": 4.25,
							"x": 4.7250000000000005,
							"count": 3
						},
						{
							"y": 4.25,
							"x": 5.512500000000001,
							"count": 1
						},
						{
							"y": 4.25,
							"x": 5.906250000000001,
							"count": 2
						},
						{
							"y": 4.25,
							"x": 6.300000000000001,
							"count": 1
						},
						{
							"y": 4.25,
							"x": 6.6937500000000005,
							"count": 2
						},
						{
							"y": 4.25,
							"x": 7.0875,
							"count": 2
						},
						{
							"y": 4.25,
							"x": 7.481250000000001,
							"count": 2
						},
						{
							"y": 4.25,
							"x": 8.662500000000001,
							"count": 1
						},
						{
							"y": 4.25,
							"x": 9.450000000000001,
							"count": 1
						},
						{
							"y": 4.25,
							"x": 10.2375,
							"count": 1
						},
						{
							"y": 4.25,
							"x": 10.631250000000001,
							"count": 1
						},
						{
							"y": 4.675000000000001,
							"x": 0,
							"count": 1
						},
						{
							"y": 4.675000000000001,
							"x": 3.1500000000000004,
							"count": 2
						},
						{
							"y": 4.675000000000001,
							"x": 3.9375000000000004,
							"count": 1
						},
						{
							"y": 4.675000000000001,
							"x": 5.11875,
							"count": 2
						},
						{
							"y": 4.675000000000001,
							"x": 5.512500000000001,
							"count": 1
						},
						{
							"y": 4.675000000000001,
							"x": 5.906250000000001,
							"count": 3
						},
						{
							"y": 4.675000000000001,
							"x": 6.300000000000001,
							"count": 1
						},
						{
							"y": 4.675000000000001,
							"x": 6.6937500000000005,
							"count": 1
						},
						{
							"y": 4.675000000000001,
							"x": 7.0875,
							"count": 2
						},
						{
							"y": 4.675000000000001,
							"x": 7.481250000000001,
							"count": 3
						},
						{
							"y": 4.675000000000001,
							"x": 9.05625,
							"count": 1
						},
						{
							"y": 4.675000000000001,
							"x": 9.450000000000001,
							"count": 2
						},
						{
							"y": 4.675000000000001,
							"x": 9.843750000000002,
							"count": 1
						},
						{
							"y": 5.1000000000000005,
							"x": 4.331250000000001,
							"count": 1
						},
						{
							"y": 5.1000000000000005,
							"x": 5.11875,
							"count": 1
						},
						{
							"y": 5.1000000000000005,
							"x": 5.512500000000001,
							"count": 2
						},
						{
							"y": 5.1000000000000005,
							"x": 5.906250000000001,
							"count": 5
						},
						{
							"y": 5.1000000000000005,
							"x": 6.6937500000000005,
							"count": 3
						},
						{
							"y": 5.1000000000000005,
							"x": 7.0875,
							"count": 2
						},
						{
							"y": 5.1000000000000005,
							"x": 7.481250000000001,
							"count": 2
						},
						{
							"y": 5.1000000000000005,
							"x": 7.875000000000001,
							"count": 2
						},
						{
							"y": 5.1000000000000005,
							"x": 8.26875,
							"count": 3
						},
						{
							"y": 5.1000000000000005,
							"x": 10.2375,
							"count": 1
						},
						{
							"y": 5.525,
							"x": 5.11875,
							"count": 2
						},
						{
							"y": 5.525,
							"x": 5.512500000000001,
							"count": 1
						},
						{
							"y": 5.525,
							"x": 5.906250000000001,
							"count": 1
						},
						{
							"y": 5.525,
							"x": 7.481250000000001,
							"count": 1
						},
						{
							"y": 5.525,
							"x": 9.450000000000001,
							"count": 1
						},
						{
							"y": 5.525,
							"x": 12.20625,
							"count": 1
						},
						{
							"y": 5.950000000000001,
							"x": 5.906250000000001,
							"count": 2
						},
						{
							"y": 5.950000000000001,
							"x": 6.300000000000001,
							"count": 1
						},
						{
							"y": 5.950000000000001,
							"x": 6.6937500000000005,
							"count": 2
						},
						{
							"y": 5.950000000000001,
							"x": 7.481250000000001,
							"count": 1
						},
						{
							"y": 5.950000000000001,
							"x": 7.875000000000001,
							"count": 3
						},
						{
							"y": 5.950000000000001,
							"x": 8.26875,
							"count": 1
						},
						{
							"y": 5.950000000000001,
							"x": 8.662500000000001,
							"count": 1
						},
						{
							"y": 5.950000000000001,
							"x": 9.843750000000002,
							"count": 1
						},
						{
							"y": 6.375000000000001,
							"x": 4.7250000000000005,
							"count": 1
						},
						{
							"y": 6.375000000000001,
							"x": 5.11875,
							"count": 1
						},
						{
							"y": 6.375000000000001,
							"x": 5.512500000000001,
							"count": 1
						},
						{
							"y": 6.375000000000001,
							"x": 5.906250000000001,
							"count": 3
						},
						{
							"y": 6.375000000000001,
							"x": 6.300000000000001,
							"count": 1
						},
						{
							"y": 6.375000000000001,
							"x": 6.6937500000000005,
							"count": 1
						},
						{
							"y": 6.375000000000001,
							"x": 7.875000000000001,
							"count": 1
						},
						{
							"y": 6.800000000000001,
							"x": 5.512500000000001,
							"count": 2
						},
						{
							"y": 6.800000000000001,
							"x": 6.300000000000001,
							"count": 1
						},
						{
							"y": 6.800000000000001,
							"x": 6.6937500000000005,
							"count": 2
						},
						{
							"y": 6.800000000000001,
							"x": 7.481250000000001,
							"count": 2
						},
						{
							"y": 6.800000000000001,
							"x": 7.875000000000001,
							"count": 1
						},
						{
							"y": 6.800000000000001,
							"x": 8.26875,
							"count": 2
						},
						{
							"y": 6.800000000000001,
							"x": 8.662500000000001,
							"count": 3
						},
						{
							"y": 6.800000000000001,
							"x": 11.025000000000002,
							"count": 1
						},
						{
							"y": 7.2250000000000005,
							"x": 6.300000000000001,
							"count": 1
						},
						{
							"y": 7.2250000000000005,
							"x": 7.481250000000001,
							"count": 2
						},
						{
							"y": 7.2250000000000005,
							"x": 8.662500000000001,
							"count": 1
						},
						{
							"y": 7.2250000000000005,
							"x": 11.025000000000002,
							"count": 1
						},
						{
							"y": 7.65,
							"x": 5.11875,
							"count": 1
						},
						{
							"y": 7.65,
							"x": 5.906250000000001,
							"count": 2
						},
						{
							"y": 7.65,
							"x": 7.0875,
							"count": 1
						},
						{
							"y": 7.65,
							"x": 8.26875,
							"count": 1
						},
						{
							"y": 8.075000000000001,
							"x": 7.875000000000001,
							"count": 2
						},
						{
							"y": 8.075000000000001,
							"x": 8.662500000000001,
							"count": 1
						},
						{
							"y": 8.075000000000001,
							"x": 9.05625,
							"count": 1
						},
						{
							"y": 8.5,
							"x": 5.512500000000001,
							"count": 2
						},
						{
							"y": 8.5,
							"x": 5.906250000000001,
							"count": 1
						},
						{
							"y": 8.5,
							"x": 6.6937500000000005,
							"count": 2
						},
						{
							"y": 8.5,
							"x": 7.481250000000001,
							"count": 1
						},
						{
							"y": 8.5,
							"x": 9.05625,
							"count": 2
						},
						{
							"y": 8.925,
							"x": 0,
							"count": 1
						},
						{
							"y": 8.925,
							"x": 5.512500000000001,
							"count": 1
						},
						{
							"y": 8.925,
							"x": 7.875000000000001,
							"count": 2
						},
						{
							"y": 8.925,
							"x": 8.26875,
							"count": 1
						},
						{
							"y": 9.350000000000001,
							"x": 5.906250000000001,
							"count": 1
						},
						{
							"y": 9.350000000000001,
							"x": 7.0875,
							"count": 1
						},
						{
							"y": 9.350000000000001,
							"x": 7.875000000000001,
							"count": 1
						},
						{
							"y": 9.350000000000001,
							"x": 10.631250000000001,
							"count": 3
						},
						{
							"y": 9.775,
							"x": 7.481250000000001,
							"count": 1
						},
						{
							"y": 9.775,
							"x": 7.875000000000001,
							"count": 1
						},
						{
							"y": 9.775,
							"x": 8.662500000000001,
							"count": 1
						},
						{
							"y": 9.775,
							"x": 10.2375,
							"count": 1
						},
						{
							"y": 10.625000000000002,
							"x": 8.26875,
							"count": 1
						},
						{
							"y": 10.625000000000002,
							"x": 9.05625,
							"count": 1
						},
						{
							"y": 11.05,
							"x": 9.450000000000001,
							"count": 1
						},
						{
							"y": 11.05,
							"x": 10.2375,
							"count": 1
						},
						{
							"y": 11.475000000000001,
							"x": 11.025000000000002,
							"count": 1
						},
						{
							"y": 11.900000000000002,
							"x": 8.662500000000001,
							"count": 1
						},
						{
							"y": 12.325000000000001,
							"x": 12.20625,
							"count": 1
						},
						{
							"y": 13.175,
							"x": 5.11875,
							"count": 1
						},
						{
							"y": 13.175,
							"x": 5.512500000000001,
							"count": 1
						}
					],
					"maxCount": 11
				}
			},
			"rebounds pergame": {
				"points per game": {
					"y": {
						"extent": [
							0,
							32
						],
						"delta": 1
					},
					"x": {
						"extent": [
							0,
							13.600000000000001
						],
						"delta": 0.42500000000000004
					},
					"bins": [
						{
							"y": 0,
							"x": 0.42500000000000004,
							"count": 5
						},
						{
							"y": 0,
							"x": 0.8500000000000001,
							"count": 2
						},
						{
							"y": 0,
							"x": 1.2750000000000001,
							"count": 1
						},
						{
							"y": 0,
							"x": 2.5500000000000003,
							"count": 1
						},
						{
							"y": 1,
							"x": 0.42500000000000004,
							"count": 7
						},
						{
							"y": 1,
							"x": 0.8500000000000001,
							"count": 6
						},
						{
							"y": 1,
							"x": 1.2750000000000001,
							"count": 7
						},
						{
							"y": 1,
							"x": 1.7000000000000002,
							"count": 3
						},
						{
							"y": 1,
							"x": 2.125,
							"count": 4
						},
						{
							"y": 1,
							"x": 2.9750000000000005,
							"count": 2
						},
						{
							"y": 2,
							"x": 0,
							"count": 2
						},
						{
							"y": 2,
							"x": 0.42500000000000004,
							"count": 6
						},
						{
							"y": 2,
							"x": 0.8500000000000001,
							"count": 13
						},
						{
							"y": 2,
							"x": 1.2750000000000001,
							"count": 9
						},
						{
							"y": 2,
							"x": 1.7000000000000002,
							"count": 6
						},
						{
							"y": 2,
							"x": 2.125,
							"count": 4
						},
						{
							"y": 2,
							"x": 2.5500000000000003,
							"count": 4
						},
						{
							"y": 2,
							"x": 2.9750000000000005,
							"count": 1
						},
						{
							"y": 2,
							"x": 3.4000000000000004,
							"count": 4
						},
						{
							"y": 2,
							"x": 3.825,
							"count": 1
						},
						{
							"y": 2,
							"x": 4.675000000000001,
							"count": 2
						},
						{
							"y": 2,
							"x": 8.925,
							"count": 1
						},
						{
							"y": 3,
							"x": 0,
							"count": 1
						},
						{
							"y": 3,
							"x": 0.42500000000000004,
							"count": 5
						},
						{
							"y": 3,
							"x": 0.8500000000000001,
							"count": 10
						},
						{
							"y": 3,
							"x": 1.2750000000000001,
							"count": 6
						},
						{
							"y": 3,
							"x": 1.7000000000000002,
							"count": 9
						},
						{
							"y": 3,
							"x": 2.125,
							"count": 8
						},
						{
							"y": 3,
							"x": 2.5500000000000003,
							"count": 5
						},
						{
							"y": 3,
							"x": 2.9750000000000005,
							"count": 1
						},
						{
							"y": 3,
							"x": 3.4000000000000004,
							"count": 4
						},
						{
							"y": 3,
							"x": 3.825,
							"count": 2
						},
						{
							"y": 3,
							"x": 4.25,
							"count": 1
						},
						{
							"y": 3,
							"x": 4.675000000000001,
							"count": 2
						},
						{
							"y": 4,
							"x": 0.42500000000000004,
							"count": 1
						},
						{
							"y": 4,
							"x": 0.8500000000000001,
							"count": 5
						},
						{
							"y": 4,
							"x": 1.2750000000000001,
							"count": 5
						},
						{
							"y": 4,
							"x": 1.7000000000000002,
							"count": 10
						},
						{
							"y": 4,
							"x": 2.125,
							"count": 5
						},
						{
							"y": 4,
							"x": 2.5500000000000003,
							"count": 5
						},
						{
							"y": 4,
							"x": 2.9750000000000005,
							"count": 4
						},
						{
							"y": 4,
							"x": 3.4000000000000004,
							"count": 3
						},
						{
							"y": 4,
							"x": 3.825,
							"count": 1
						},
						{
							"y": 4,
							"x": 4.25,
							"count": 2
						},
						{
							"y": 4,
							"x": 4.675000000000001,
							"count": 3
						},
						{
							"y": 4,
							"x": 5.525,
							"count": 1
						},
						{
							"y": 5,
							"x": 0.8500000000000001,
							"count": 2
						},
						{
							"y": 5,
							"x": 1.2750000000000001,
							"count": 5
						},
						{
							"y": 5,
							"x": 1.7000000000000002,
							"count": 5
						},
						{
							"y": 5,
							"x": 2.125,
							"count": 2
						},
						{
							"y": 5,
							"x": 2.5500000000000003,
							"count": 3
						},
						{
							"y": 5,
							"x": 2.9750000000000005,
							"count": 2
						},
						{
							"y": 5,
							"x": 3.4000000000000004,
							"count": 3
						},
						{
							"y": 5,
							"x": 3.825,
							"count": 2
						},
						{
							"y": 5,
							"x": 4.675000000000001,
							"count": 2
						},
						{
							"y": 5,
							"x": 5.1000000000000005,
							"count": 1
						},
						{
							"y": 5,
							"x": 7.65,
							"count": 2
						},
						{
							"y": 6,
							"x": 0.8500000000000001,
							"count": 1
						},
						{
							"y": 6,
							"x": 1.2750000000000001,
							"count": 1
						},
						{
							"y": 6,
							"x": 1.7000000000000002,
							"count": 7
						},
						{
							"y": 6,
							"x": 2.125,
							"count": 5
						},
						{
							"y": 6,
							"x": 2.5500000000000003,
							"count": 2
						},
						{
							"y": 6,
							"x": 2.9750000000000005,
							"count": 5
						},
						{
							"y": 6,
							"x": 3.4000000000000004,
							"count": 4
						},
						{
							"y": 6,
							"x": 3.825,
							"count": 2
						},
						{
							"y": 6,
							"x": 4.25,
							"count": 1
						},
						{
							"y": 6,
							"x": 4.675000000000001,
							"count": 3
						},
						{
							"y": 6,
							"x": 5.1000000000000005,
							"count": 4
						},
						{
							"y": 6,
							"x": 5.525,
							"count": 1
						},
						{
							"y": 6,
							"x": 6.375000000000001,
							"count": 1
						},
						{
							"y": 6,
							"x": 6.800000000000001,
							"count": 1
						},
						{
							"y": 7,
							"x": 1.2750000000000001,
							"count": 2
						},
						{
							"y": 7,
							"x": 1.7000000000000002,
							"count": 3
						},
						{
							"y": 7,
							"x": 2.125,
							"count": 3
						},
						{
							"y": 7,
							"x": 2.9750000000000005,
							"count": 4
						},
						{
							"y": 7,
							"x": 3.4000000000000004,
							"count": 1
						},
						{
							"y": 7,
							"x": 3.825,
							"count": 1
						},
						{
							"y": 7,
							"x": 4.25,
							"count": 1
						},
						{
							"y": 7,
							"x": 4.675000000000001,
							"count": 1
						},
						{
							"y": 7,
							"x": 5.1000000000000005,
							"count": 2
						},
						{
							"y": 7,
							"x": 5.950000000000001,
							"count": 2
						},
						{
							"y": 7,
							"x": 6.375000000000001,
							"count": 1
						},
						{
							"y": 7,
							"x": 6.800000000000001,
							"count": 1
						},
						{
							"y": 7,
							"x": 9.775,
							"count": 1
						},
						{
							"y": 8,
							"x": 0.42500000000000004,
							"count": 1
						},
						{
							"y": 8,
							"x": 1.2750000000000001,
							"count": 1
						},
						{
							"y": 8,
							"x": 1.7000000000000002,
							"count": 4
						},
						{
							"y": 8,
							"x": 2.125,
							"count": 3
						},
						{
							"y": 8,
							"x": 2.5500000000000003,
							"count": 4
						},
						{
							"y": 8,
							"x": 2.9750000000000005,
							"count": 1
						},
						{
							"y": 8,
							"x": 3.4000000000000004,
							"count": 4
						},
						{
							"y": 8,
							"x": 4.25,
							"count": 1
						},
						{
							"y": 8,
							"x": 4.675000000000001,
							"count": 1
						},
						{
							"y": 8,
							"x": 5.1000000000000005,
							"count": 3
						},
						{
							"y": 8,
							"x": 5.525,
							"count": 1
						},
						{
							"y": 8,
							"x": 5.950000000000001,
							"count": 1
						},
						{
							"y": 8,
							"x": 7.65,
							"count": 1
						},
						{
							"y": 8,
							"x": 9.350000000000001,
							"count": 2
						},
						{
							"y": 9,
							"x": 1.7000000000000002,
							"count": 3
						},
						{
							"y": 9,
							"x": 2.125,
							"count": 1
						},
						{
							"y": 9,
							"x": 2.5500000000000003,
							"count": 5
						},
						{
							"y": 9,
							"x": 2.9750000000000005,
							"count": 2
						},
						{
							"y": 9,
							"x": 3.4000000000000004,
							"count": 5
						},
						{
							"y": 9,
							"x": 3.825,
							"count": 4
						},
						{
							"y": 9,
							"x": 4.25,
							"count": 3
						},
						{
							"y": 9,
							"x": 5.1000000000000005,
							"count": 2
						},
						{
							"y": 9,
							"x": 5.525,
							"count": 1
						},
						{
							"y": 9,
							"x": 6.375000000000001,
							"count": 2
						},
						{
							"y": 9,
							"x": 7.2250000000000005,
							"count": 1
						},
						{
							"y": 10,
							"x": 1.2750000000000001,
							"count": 1
						},
						{
							"y": 10,
							"x": 1.7000000000000002,
							"count": 6
						},
						{
							"y": 10,
							"x": 2.125,
							"count": 1
						},
						{
							"y": 10,
							"x": 2.5500000000000003,
							"count": 2
						},
						{
							"y": 10,
							"x": 2.9750000000000005,
							"count": 1
						},
						{
							"y": 10,
							"x": 3.4000000000000004,
							"count": 3
						},
						{
							"y": 10,
							"x": 5.525,
							"count": 1
						},
						{
							"y": 10,
							"x": 6.375000000000001,
							"count": 3
						},
						{
							"y": 10,
							"x": 7.65,
							"count": 1
						},
						{
							"y": 10,
							"x": 13.175,
							"count": 1
						},
						{
							"y": 11,
							"x": 1.7000000000000002,
							"count": 1
						},
						{
							"y": 11,
							"x": 2.125,
							"count": 3
						},
						{
							"y": 11,
							"x": 2.5500000000000003,
							"count": 3
						},
						{
							"y": 11,
							"x": 3.4000000000000004,
							"count": 1
						},
						{
							"y": 11,
							"x": 3.825,
							"count": 1
						},
						{
							"y": 11,
							"x": 4.25,
							"count": 1
						},
						{
							"y": 11,
							"x": 4.675000000000001,
							"count": 1
						},
						{
							"y": 11,
							"x": 5.1000000000000005,
							"count": 4
						},
						{
							"y": 11,
							"x": 5.525,
							"count": 1
						},
						{
							"y": 11,
							"x": 5.950000000000001,
							"count": 1
						},
						{
							"y": 11,
							"x": 6.800000000000001,
							"count": 2
						},
						{
							"y": 11,
							"x": 8.5,
							"count": 2
						},
						{
							"y": 11,
							"x": 8.925,
							"count": 2
						},
						{
							"y": 11,
							"x": 9.350000000000001,
							"count": 1
						},
						{
							"y": 12,
							"x": 2.5500000000000003,
							"count": 3
						},
						{
							"y": 12,
							"x": 2.9750000000000005,
							"count": 2
						},
						{
							"y": 12,
							"x": 3.4000000000000004,
							"count": 2
						},
						{
							"y": 12,
							"x": 3.825,
							"count": 1
						},
						{
							"y": 12,
							"x": 5.950000000000001,
							"count": 2
						},
						{
							"y": 12,
							"x": 6.800000000000001,
							"count": 1
						},
						{
							"y": 12,
							"x": 7.2250000000000005,
							"count": 1
						},
						{
							"y": 12,
							"x": 11.05,
							"count": 1
						},
						{
							"y": 13,
							"x": 2.125,
							"count": 1
						},
						{
							"y": 13,
							"x": 2.5500000000000003,
							"count": 1
						},
						{
							"y": 13,
							"x": 2.9750000000000005,
							"count": 2
						},
						{
							"y": 13,
							"x": 3.825,
							"count": 2
						},
						{
							"y": 13,
							"x": 4.25,
							"count": 2
						},
						{
							"y": 13,
							"x": 4.675000000000001,
							"count": 2
						},
						{
							"y": 13,
							"x": 5.1000000000000005,
							"count": 1
						},
						{
							"y": 13,
							"x": 5.950000000000001,
							"count": 1
						},
						{
							"y": 13,
							"x": 6.800000000000001,
							"count": 2
						},
						{
							"y": 13,
							"x": 7.2250000000000005,
							"count": 1
						},
						{
							"y": 13,
							"x": 7.65,
							"count": 1
						},
						{
							"y": 13,
							"x": 8.075000000000001,
							"count": 2
						},
						{
							"y": 13,
							"x": 8.5,
							"count": 3
						},
						{
							"y": 13,
							"x": 9.350000000000001,
							"count": 1
						},
						{
							"y": 13,
							"x": 13.175,
							"count": 1
						},
						{
							"y": 14,
							"x": 1.7000000000000002,
							"count": 1
						},
						{
							"y": 14,
							"x": 2.5500000000000003,
							"count": 1
						},
						{
							"y": 14,
							"x": 2.9750000000000005,
							"count": 1
						},
						{
							"y": 14,
							"x": 3.4000000000000004,
							"count": 1
						},
						{
							"y": 14,
							"x": 3.825,
							"count": 3
						},
						{
							"y": 14,
							"x": 4.675000000000001,
							"count": 1
						},
						{
							"y": 14,
							"x": 5.1000000000000005,
							"count": 2
						},
						{
							"y": 14,
							"x": 5.950000000000001,
							"count": 1
						},
						{
							"y": 14,
							"x": 6.800000000000001,
							"count": 3
						},
						{
							"y": 14,
							"x": 10.625000000000002,
							"count": 1
						},
						{
							"y": 15,
							"x": 1.7000000000000002,
							"count": 1
						},
						{
							"y": 15,
							"x": 2.125,
							"count": 1
						},
						{
							"y": 15,
							"x": 2.5500000000000003,
							"count": 2
						},
						{
							"y": 15,
							"x": 2.9750000000000005,
							"count": 4
						},
						{
							"y": 15,
							"x": 3.4000000000000004,
							"count": 1
						},
						{
							"y": 15,
							"x": 8.5,
							"count": 1
						},
						{
							"y": 15,
							"x": 8.925,
							"count": 1
						},
						{
							"y": 15,
							"x": 9.775,
							"count": 1
						},
						{
							"y": 16,
							"x": 2.125,
							"count": 1
						},
						{
							"y": 16,
							"x": 2.5500000000000003,
							"count": 1
						},
						{
							"y": 16,
							"x": 3.4000000000000004,
							"count": 1
						},
						{
							"y": 16,
							"x": 4.25,
							"count": 1
						},
						{
							"y": 16,
							"x": 5.1000000000000005,
							"count": 2
						},
						{
							"y": 16,
							"x": 5.950000000000001,
							"count": 1
						},
						{
							"y": 16,
							"x": 6.375000000000001,
							"count": 1
						},
						{
							"y": 16,
							"x": 6.800000000000001,
							"count": 1
						},
						{
							"y": 17,
							"x": 2.5500000000000003,
							"count": 1
						},
						{
							"y": 17,
							"x": 3.4000000000000004,
							"count": 3
						},
						{
							"y": 17,
							"x": 3.825,
							"count": 1
						},
						{
							"y": 17,
							"x": 4.675000000000001,
							"count": 2
						},
						{
							"y": 17,
							"x": 5.950000000000001,
							"count": 1
						},
						{
							"y": 17,
							"x": 8.5,
							"count": 2
						},
						{
							"y": 17,
							"x": 9.350000000000001,
							"count": 1
						},
						{
							"y": 17,
							"x": 9.775,
							"count": 1
						},
						{
							"y": 18,
							"x": 2.125,
							"count": 1
						},
						{
							"y": 18,
							"x": 2.9750000000000005,
							"count": 1
						},
						{
							"y": 18,
							"x": 3.4000000000000004,
							"count": 1
						},
						{
							"y": 18,
							"x": 8.075000000000001,
							"count": 1
						},
						{
							"y": 18,
							"x": 8.925,
							"count": 1
						},
						{
							"y": 18,
							"x": 11.900000000000002,
							"count": 1
						},
						{
							"y": 19,
							"x": 2.9750000000000005,
							"count": 1
						},
						{
							"y": 19,
							"x": 3.4000000000000004,
							"count": 1
						},
						{
							"y": 19,
							"x": 3.825,
							"count": 1
						},
						{
							"y": 19,
							"x": 4.25,
							"count": 2
						},
						{
							"y": 19,
							"x": 6.375000000000001,
							"count": 1
						},
						{
							"y": 19,
							"x": 6.800000000000001,
							"count": 1
						},
						{
							"y": 19,
							"x": 7.2250000000000005,
							"count": 1
						},
						{
							"y": 20,
							"x": 2.5500000000000003,
							"count": 1
						},
						{
							"y": 20,
							"x": 2.9750000000000005,
							"count": 1
						},
						{
							"y": 20,
							"x": 3.4000000000000004,
							"count": 2
						},
						{
							"y": 20,
							"x": 5.1000000000000005,
							"count": 1
						},
						{
							"y": 20,
							"x": 5.950000000000001,
							"count": 1
						},
						{
							"y": 20,
							"x": 9.775,
							"count": 1
						},
						{
							"y": 21,
							"x": 5.525,
							"count": 1
						},
						{
							"y": 21,
							"x": 5.950000000000001,
							"count": 1
						},
						{
							"y": 21,
							"x": 6.800000000000001,
							"count": 1
						},
						{
							"y": 21,
							"x": 10.625000000000002,
							"count": 1
						},
						{
							"y": 22,
							"x": 4.25,
							"count": 1
						},
						{
							"y": 22,
							"x": 11.475000000000001,
							"count": 1
						},
						{
							"y": 23,
							"x": 11.05,
							"count": 1
						},
						{
							"y": 24,
							"x": 4.25,
							"count": 1
						},
						{
							"y": 24,
							"x": 9.350000000000001,
							"count": 1
						},
						{
							"y": 25,
							"x": 4.675000000000001,
							"count": 1
						},
						{
							"y": 26,
							"x": 12.325000000000001,
							"count": 1
						},
						{
							"y": 27,
							"x": 6.800000000000001,
							"count": 1
						},
						{
							"y": 27,
							"x": 8.075000000000001,
							"count": 1
						},
						{
							"y": 31,
							"x": 7.2250000000000005,
							"count": 1
						}
					],
					"maxCount": 13
				},
				"versatility index": {
					"bins": [
						{
							"x": 0,
							"y": 0,
							"count": 1
						},
						{
							"x": 0,
							"y": 4.331250000000001,
							"count": 1
						},
						{
							"x": 0,
							"y": 5.11875,
							"count": 1
						},
						{
							"x": 0.42500000000000004,
							"y": 0,
							"count": 3
						},
						{
							"x": 0.42500000000000004,
							"y": 2.3625000000000003,
							"count": 1
						},
						{
							"x": 0.42500000000000004,
							"y": 3.1500000000000004,
							"count": 2
						},
						{
							"x": 0.42500000000000004,
							"y": 3.54375,
							"count": 1
						},
						{
							"x": 0.42500000000000004,
							"y": 3.9375000000000004,
							"count": 2
						},
						{
							"x": 0.42500000000000004,
							"y": 4.331250000000001,
							"count": 4
						},
						{
							"x": 0.42500000000000004,
							"y": 4.7250000000000005,
							"count": 4
						},
						{
							"x": 0.42500000000000004,
							"y": 5.11875,
							"count": 1
						},
						{
							"x": 0.42500000000000004,
							"y": 5.512500000000001,
							"count": 3
						},
						{
							"x": 0.42500000000000004,
							"y": 5.906250000000001,
							"count": 1
						},
						{
							"x": 0.42500000000000004,
							"y": 6.300000000000001,
							"count": 1
						},
						{
							"x": 0.42500000000000004,
							"y": 6.6937500000000005,
							"count": 1
						},
						{
							"x": 0.42500000000000004,
							"y": 8.662500000000001,
							"count": 1
						},
						{
							"x": 0.8500000000000001,
							"y": 0,
							"count": 4
						},
						{
							"x": 0.8500000000000001,
							"y": 2.7562500000000005,
							"count": 1
						},
						{
							"x": 0.8500000000000001,
							"y": 3.1500000000000004,
							"count": 1
						},
						{
							"x": 0.8500000000000001,
							"y": 3.54375,
							"count": 2
						},
						{
							"x": 0.8500000000000001,
							"y": 3.9375000000000004,
							"count": 3
						},
						{
							"x": 0.8500000000000001,
							"y": 4.331250000000001,
							"count": 3
						},
						{
							"x": 0.8500000000000001,
							"y": 4.7250000000000005,
							"count": 5
						},
						{
							"x": 0.8500000000000001,
							"y": 5.11875,
							"count": 1
						},
						{
							"x": 0.8500000000000001,
							"y": 5.512500000000001,
							"count": 4
						},
						{
							"x": 0.8500000000000001,
							"y": 5.906250000000001,
							"count": 4
						},
						{
							"x": 0.8500000000000001,
							"y": 6.300000000000001,
							"count": 1
						},
						{
							"x": 0.8500000000000001,
							"y": 6.6937500000000005,
							"count": 5
						},
						{
							"x": 0.8500000000000001,
							"y": 7.0875,
							"count": 1
						},
						{
							"x": 0.8500000000000001,
							"y": 7.481250000000001,
							"count": 3
						},
						{
							"x": 0.8500000000000001,
							"y": 8.26875,
							"count": 1
						},
						{
							"x": 1.2750000000000001,
							"y": 0,
							"count": 2
						},
						{
							"x": 1.2750000000000001,
							"y": 2.7562500000000005,
							"count": 1
						},
						{
							"x": 1.2750000000000001,
							"y": 3.54375,
							"count": 3
						},
						{
							"x": 1.2750000000000001,
							"y": 3.9375000000000004,
							"count": 1
						},
						{
							"x": 1.2750000000000001,
							"y": 4.331250000000001,
							"count": 6
						},
						{
							"x": 1.2750000000000001,
							"y": 4.7250000000000005,
							"count": 5
						},
						{
							"x": 1.2750000000000001,
							"y": 5.11875,
							"count": 2
						},
						{
							"x": 1.2750000000000001,
							"y": 5.512500000000001,
							"count": 8
						},
						{
							"x": 1.2750000000000001,
							"y": 5.906250000000001,
							"count": 3
						},
						{
							"x": 1.2750000000000001,
							"y": 6.300000000000001,
							"count": 3
						},
						{
							"x": 1.2750000000000001,
							"y": 6.6937500000000005,
							"count": 3
						},
						{
							"x": 1.2750000000000001,
							"y": 8.26875,
							"count": 1
						},
						{
							"x": 1.7000000000000002,
							"y": 0,
							"count": 1
						},
						{
							"x": 1.7000000000000002,
							"y": 3.54375,
							"count": 2
						},
						{
							"x": 1.7000000000000002,
							"y": 3.9375000000000004,
							"count": 1
						},
						{
							"x": 1.7000000000000002,
							"y": 4.331250000000001,
							"count": 2
						},
						{
							"x": 1.7000000000000002,
							"y": 4.7250000000000005,
							"count": 6
						},
						{
							"x": 1.7000000000000002,
							"y": 5.11875,
							"count": 8
						},
						{
							"x": 1.7000000000000002,
							"y": 5.512500000000001,
							"count": 6
						},
						{
							"x": 1.7000000000000002,
							"y": 5.906250000000001,
							"count": 10
						},
						{
							"x": 1.7000000000000002,
							"y": 6.300000000000001,
							"count": 2
						},
						{
							"x": 1.7000000000000002,
							"y": 6.6937500000000005,
							"count": 3
						},
						{
							"x": 1.7000000000000002,
							"y": 7.0875,
							"count": 11
						},
						{
							"x": 1.7000000000000002,
							"y": 7.481250000000001,
							"count": 2
						},
						{
							"x": 1.7000000000000002,
							"y": 7.875000000000001,
							"count": 2
						},
						{
							"x": 1.7000000000000002,
							"y": 8.26875,
							"count": 3
						},
						{
							"x": 2.125,
							"y": 0,
							"count": 2
						},
						{
							"x": 2.125,
							"y": 2.7562500000000005,
							"count": 1
						},
						{
							"x": 2.125,
							"y": 3.54375,
							"count": 3
						},
						{
							"x": 2.125,
							"y": 3.9375000000000004,
							"count": 1
						},
						{
							"x": 2.125,
							"y": 4.331250000000001,
							"count": 3
						},
						{
							"x": 2.125,
							"y": 4.7250000000000005,
							"count": 9
						},
						{
							"x": 2.125,
							"y": 5.11875,
							"count": 2
						},
						{
							"x": 2.125,
							"y": 5.512500000000001,
							"count": 3
						},
						{
							"x": 2.125,
							"y": 5.906250000000001,
							"count": 5
						},
						{
							"x": 2.125,
							"y": 6.300000000000001,
							"count": 2
						},
						{
							"x": 2.125,
							"y": 6.6937500000000005,
							"count": 4
						},
						{
							"x": 2.125,
							"y": 7.0875,
							"count": 3
						},
						{
							"x": 2.125,
							"y": 7.481250000000001,
							"count": 2
						},
						{
							"x": 2.125,
							"y": 7.875000000000001,
							"count": 1
						},
						{
							"x": 2.125,
							"y": 8.26875,
							"count": 1
						},
						{
							"x": 2.125,
							"y": 8.662500000000001,
							"count": 1
						},
						{
							"x": 2.5500000000000003,
							"y": 0,
							"count": 2
						},
						{
							"x": 2.5500000000000003,
							"y": 2.7562500000000005,
							"count": 1
						},
						{
							"x": 2.5500000000000003,
							"y": 4.331250000000001,
							"count": 6
						},
						{
							"x": 2.5500000000000003,
							"y": 4.7250000000000005,
							"count": 3
						},
						{
							"x": 2.5500000000000003,
							"y": 5.11875,
							"count": 5
						},
						{
							"x": 2.5500000000000003,
							"y": 5.512500000000001,
							"count": 2
						},
						{
							"x": 2.5500000000000003,
							"y": 5.906250000000001,
							"count": 6
						},
						{
							"x": 2.5500000000000003,
							"y": 6.300000000000001,
							"count": 4
						},
						{
							"x": 2.5500000000000003,
							"y": 6.6937500000000005,
							"count": 7
						},
						{
							"x": 2.5500000000000003,
							"y": 7.0875,
							"count": 1
						},
						{
							"x": 2.5500000000000003,
							"y": 7.481250000000001,
							"count": 3
						},
						{
							"x": 2.5500000000000003,
							"y": 7.875000000000001,
							"count": 3
						},
						{
							"x": 2.5500000000000003,
							"y": 8.26875,
							"count": 1
						},
						{
							"x": 2.9750000000000005,
							"y": 3.54375,
							"count": 1
						},
						{
							"x": 2.9750000000000005,
							"y": 4.331250000000001,
							"count": 2
						},
						{
							"x": 2.9750000000000005,
							"y": 4.7250000000000005,
							"count": 7
						},
						{
							"x": 2.9750000000000005,
							"y": 5.11875,
							"count": 1
						},
						{
							"x": 2.9750000000000005,
							"y": 5.512500000000001,
							"count": 2
						},
						{
							"x": 2.9750000000000005,
							"y": 5.906250000000001,
							"count": 6
						},
						{
							"x": 2.9750000000000005,
							"y": 6.300000000000001,
							"count": 1
						},
						{
							"x": 2.9750000000000005,
							"y": 6.6937500000000005,
							"count": 2
						},
						{
							"x": 2.9750000000000005,
							"y": 7.0875,
							"count": 5
						},
						{
							"x": 2.9750000000000005,
							"y": 7.481250000000001,
							"count": 3
						},
						{
							"x": 2.9750000000000005,
							"y": 7.875000000000001,
							"count": 2
						},
						{
							"x": 2.9750000000000005,
							"y": 8.26875,
							"count": 2
						},
						{
							"x": 2.9750000000000005,
							"y": 9.450000000000001,
							"count": 1
						},
						{
							"x": 3.4000000000000004,
							"y": 3.9375000000000004,
							"count": 2
						},
						{
							"x": 3.4000000000000004,
							"y": 4.331250000000001,
							"count": 4
						},
						{
							"x": 3.4000000000000004,
							"y": 4.7250000000000005,
							"count": 2
						},
						{
							"x": 3.4000000000000004,
							"y": 5.11875,
							"count": 3
						},
						{
							"x": 3.4000000000000004,
							"y": 5.512500000000001,
							"count": 7
						},
						{
							"x": 3.4000000000000004,
							"y": 5.906250000000001,
							"count": 5
						},
						{
							"x": 3.4000000000000004,
							"y": 6.300000000000001,
							"count": 6
						},
						{
							"x": 3.4000000000000004,
							"y": 6.6937500000000005,
							"count": 6
						},
						{
							"x": 3.4000000000000004,
							"y": 7.0875,
							"count": 1
						},
						{
							"x": 3.4000000000000004,
							"y": 7.875000000000001,
							"count": 4
						},
						{
							"x": 3.4000000000000004,
							"y": 8.26875,
							"count": 2
						},
						{
							"x": 3.4000000000000004,
							"y": 8.662500000000001,
							"count": 1
						},
						{
							"x": 3.4000000000000004,
							"y": 9.05625,
							"count": 1
						},
						{
							"x": 3.825,
							"y": 4.331250000000001,
							"count": 1
						},
						{
							"x": 3.825,
							"y": 5.11875,
							"count": 3
						},
						{
							"x": 3.825,
							"y": 5.512500000000001,
							"count": 2
						},
						{
							"x": 3.825,
							"y": 5.906250000000001,
							"count": 5
						},
						{
							"x": 3.825,
							"y": 6.300000000000001,
							"count": 2
						},
						{
							"x": 3.825,
							"y": 6.6937500000000005,
							"count": 1
						},
						{
							"x": 3.825,
							"y": 7.0875,
							"count": 1
						},
						{
							"x": 3.825,
							"y": 7.481250000000001,
							"count": 1
						},
						{
							"x": 3.825,
							"y": 7.875000000000001,
							"count": 1
						},
						{
							"x": 3.825,
							"y": 8.26875,
							"count": 2
						},
						{
							"x": 3.825,
							"y": 8.662500000000001,
							"count": 1
						},
						{
							"x": 3.825,
							"y": 9.05625,
							"count": 1
						},
						{
							"x": 3.825,
							"y": 9.450000000000001,
							"count": 1
						},
						{
							"x": 4.25,
							"y": 4.7250000000000005,
							"count": 3
						},
						{
							"x": 4.25,
							"y": 5.512500000000001,
							"count": 1
						},
						{
							"x": 4.25,
							"y": 5.906250000000001,
							"count": 2
						},
						{
							"x": 4.25,
							"y": 6.300000000000001,
							"count": 1
						},
						{
							"x": 4.25,
							"y": 6.6937500000000005,
							"count": 2
						},
						{
							"x": 4.25,
							"y": 7.0875,
							"count": 2
						},
						{
							"x": 4.25,
							"y": 7.481250000000001,
							"count": 2
						},
						{
							"x": 4.25,
							"y": 8.662500000000001,
							"count": 1
						},
						{
							"x": 4.25,
							"y": 9.450000000000001,
							"count": 1
						},
						{
							"x": 4.25,
							"y": 10.2375,
							"count": 1
						},
						{
							"x": 4.25,
							"y": 10.631250000000001,
							"count": 1
						},
						{
							"x": 4.675000000000001,
							"y": 0,
							"count": 1
						},
						{
							"x": 4.675000000000001,
							"y": 3.1500000000000004,
							"count": 2
						},
						{
							"x": 4.675000000000001,
							"y": 3.9375000000000004,
							"count": 1
						},
						{
							"x": 4.675000000000001,
							"y": 5.11875,
							"count": 2
						},
						{
							"x": 4.675000000000001,
							"y": 5.512500000000001,
							"count": 1
						},
						{
							"x": 4.675000000000001,
							"y": 5.906250000000001,
							"count": 3
						},
						{
							"x": 4.675000000000001,
							"y": 6.300000000000001,
							"count": 1
						},
						{
							"x": 4.675000000000001,
							"y": 6.6937500000000005,
							"count": 1
						},
						{
							"x": 4.675000000000001,
							"y": 7.0875,
							"count": 2
						},
						{
							"x": 4.675000000000001,
							"y": 7.481250000000001,
							"count": 3
						},
						{
							"x": 4.675000000000001,
							"y": 9.05625,
							"count": 1
						},
						{
							"x": 4.675000000000001,
							"y": 9.450000000000001,
							"count": 2
						},
						{
							"x": 4.675000000000001,
							"y": 9.843750000000002,
							"count": 1
						},
						{
							"x": 5.1000000000000005,
							"y": 4.331250000000001,
							"count": 1
						},
						{
							"x": 5.1000000000000005,
							"y": 5.11875,
							"count": 1
						},
						{
							"x": 5.1000000000000005,
							"y": 5.512500000000001,
							"count": 2
						},
						{
							"x": 5.1000000000000005,
							"y": 5.906250000000001,
							"count": 5
						},
						{
							"x": 5.1000000000000005,
							"y": 6.6937500000000005,
							"count": 3
						},
						{
							"x": 5.1000000000000005,
							"y": 7.0875,
							"count": 2
						},
						{
							"x": 5.1000000000000005,
							"y": 7.481250000000001,
							"count": 2
						},
						{
							"x": 5.1000000000000005,
							"y": 7.875000000000001,
							"count": 2
						},
						{
							"x": 5.1000000000000005,
							"y": 8.26875,
							"count": 3
						},
						{
							"x": 5.1000000000000005,
							"y": 10.2375,
							"count": 1
						},
						{
							"x": 5.525,
							"y": 5.11875,
							"count": 2
						},
						{
							"x": 5.525,
							"y": 5.512500000000001,
							"count": 1
						},
						{
							"x": 5.525,
							"y": 5.906250000000001,
							"count": 1
						},
						{
							"x": 5.525,
							"y": 7.481250000000001,
							"count": 1
						},
						{
							"x": 5.525,
							"y": 9.450000000000001,
							"count": 1
						},
						{
							"x": 5.525,
							"y": 12.20625,
							"count": 1
						},
						{
							"x": 5.950000000000001,
							"y": 5.906250000000001,
							"count": 2
						},
						{
							"x": 5.950000000000001,
							"y": 6.300000000000001,
							"count": 1
						},
						{
							"x": 5.950000000000001,
							"y": 6.6937500000000005,
							"count": 2
						},
						{
							"x": 5.950000000000001,
							"y": 7.481250000000001,
							"count": 1
						},
						{
							"x": 5.950000000000001,
							"y": 7.875000000000001,
							"count": 3
						},
						{
							"x": 5.950000000000001,
							"y": 8.26875,
							"count": 1
						},
						{
							"x": 5.950000000000001,
							"y": 8.662500000000001,
							"count": 1
						},
						{
							"x": 5.950000000000001,
							"y": 9.843750000000002,
							"count": 1
						},
						{
							"x": 6.375000000000001,
							"y": 4.7250000000000005,
							"count": 1
						},
						{
							"x": 6.375000000000001,
							"y": 5.11875,
							"count": 1
						},
						{
							"x": 6.375000000000001,
							"y": 5.512500000000001,
							"count": 1
						},
						{
							"x": 6.375000000000001,
							"y": 5.906250000000001,
							"count": 3
						},
						{
							"x": 6.375000000000001,
							"y": 6.300000000000001,
							"count": 1
						},
						{
							"x": 6.375000000000001,
							"y": 6.6937500000000005,
							"count": 1
						},
						{
							"x": 6.375000000000001,
							"y": 7.875000000000001,
							"count": 1
						},
						{
							"x": 6.800000000000001,
							"y": 5.512500000000001,
							"count": 2
						},
						{
							"x": 6.800000000000001,
							"y": 6.300000000000001,
							"count": 1
						},
						{
							"x": 6.800000000000001,
							"y": 6.6937500000000005,
							"count": 2
						},
						{
							"x": 6.800000000000001,
							"y": 7.481250000000001,
							"count": 2
						},
						{
							"x": 6.800000000000001,
							"y": 7.875000000000001,
							"count": 1
						},
						{
							"x": 6.800000000000001,
							"y": 8.26875,
							"count": 2
						},
						{
							"x": 6.800000000000001,
							"y": 8.662500000000001,
							"count": 3
						},
						{
							"x": 6.800000000000001,
							"y": 11.025000000000002,
							"count": 1
						},
						{
							"x": 7.2250000000000005,
							"y": 6.300000000000001,
							"count": 1
						},
						{
							"x": 7.2250000000000005,
							"y": 7.481250000000001,
							"count": 2
						},
						{
							"x": 7.2250000000000005,
							"y": 8.662500000000001,
							"count": 1
						},
						{
							"x": 7.2250000000000005,
							"y": 11.025000000000002,
							"count": 1
						},
						{
							"x": 7.65,
							"y": 5.11875,
							"count": 1
						},
						{
							"x": 7.65,
							"y": 5.906250000000001,
							"count": 2
						},
						{
							"x": 7.65,
							"y": 7.0875,
							"count": 1
						},
						{
							"x": 7.65,
							"y": 8.26875,
							"count": 1
						},
						{
							"x": 8.075000000000001,
							"y": 7.875000000000001,
							"count": 2
						},
						{
							"x": 8.075000000000001,
							"y": 8.662500000000001,
							"count": 1
						},
						{
							"x": 8.075000000000001,
							"y": 9.05625,
							"count": 1
						},
						{
							"x": 8.5,
							"y": 5.512500000000001,
							"count": 2
						},
						{
							"x": 8.5,
							"y": 5.906250000000001,
							"count": 1
						},
						{
							"x": 8.5,
							"y": 6.6937500000000005,
							"count": 2
						},
						{
							"x": 8.5,
							"y": 7.481250000000001,
							"count": 1
						},
						{
							"x": 8.5,
							"y": 9.05625,
							"count": 2
						},
						{
							"x": 8.925,
							"y": 0,
							"count": 1
						},
						{
							"x": 8.925,
							"y": 5.512500000000001,
							"count": 1
						},
						{
							"x": 8.925,
							"y": 7.875000000000001,
							"count": 2
						},
						{
							"x": 8.925,
							"y": 8.26875,
							"count": 1
						},
						{
							"x": 9.350000000000001,
							"y": 5.906250000000001,
							"count": 1
						},
						{
							"x": 9.350000000000001,
							"y": 7.0875,
							"count": 1
						},
						{
							"x": 9.350000000000001,
							"y": 7.875000000000001,
							"count": 1
						},
						{
							"x": 9.350000000000001,
							"y": 10.631250000000001,
							"count": 3
						},
						{
							"x": 9.775,
							"y": 7.481250000000001,
							"count": 1
						},
						{
							"x": 9.775,
							"y": 7.875000000000001,
							"count": 1
						},
						{
							"x": 9.775,
							"y": 8.662500000000001,
							"count": 1
						},
						{
							"x": 9.775,
							"y": 10.2375,
							"count": 1
						},
						{
							"x": 10.625000000000002,
							"y": 8.26875,
							"count": 1
						},
						{
							"x": 10.625000000000002,
							"y": 9.05625,
							"count": 1
						},
						{
							"x": 11.05,
							"y": 9.450000000000001,
							"count": 1
						},
						{
							"x": 11.05,
							"y": 10.2375,
							"count": 1
						},
						{
							"x": 11.475000000000001,
							"y": 11.025000000000002,
							"count": 1
						},
						{
							"x": 11.900000000000002,
							"y": 8.662500000000001,
							"count": 1
						},
						{
							"x": 12.325000000000001,
							"y": 12.20625,
							"count": 1
						},
						{
							"x": 13.175,
							"y": 5.11875,
							"count": 1
						},
						{
							"x": 13.175,
							"y": 5.512500000000001,
							"count": 1
						}
					],
					"x": {
						"extent": [
							0,
							13.600000000000001
						],
						"delta": 0.42500000000000004
					},
					"y": {
						"extent": [
							0,
							12.600000000000001
						],
						"delta": 0.39375000000000004
					}
				}
			},
			"points per game": {
				"turnover per pocession": {
					"y": {
						"extent": [
							0,
							1
						],
						"delta": 0.03125
					},
					"x": {
						"extent": [
							0,
							32
						],
						"delta": 1
					},
					"bins": [
						{
							"y": 0,
							"x": 0,
							"count": 2
						},
						{
							"y": 0,
							"x": 1,
							"count": 2
						},
						{
							"y": 0,
							"x": 3,
							"count": 3
						},
						{
							"y": 0.03125,
							"x": 1,
							"count": 1
						},
						{
							"y": 0.03125,
							"x": 2,
							"count": 1
						},
						{
							"y": 0.03125,
							"x": 3,
							"count": 2
						},
						{
							"y": 0.03125,
							"x": 4,
							"count": 1
						},
						{
							"y": 0.03125,
							"x": 5,
							"count": 1
						},
						{
							"y": 0.03125,
							"x": 9,
							"count": 1
						},
						{
							"y": 0.03125,
							"x": 10,
							"count": 1
						},
						{
							"y": 0.03125,
							"x": 19,
							"count": 1
						},
						{
							"y": 0.0625,
							"x": 1,
							"count": 3
						},
						{
							"y": 0.0625,
							"x": 2,
							"count": 5
						},
						{
							"y": 0.0625,
							"x": 3,
							"count": 3
						},
						{
							"y": 0.0625,
							"x": 4,
							"count": 5
						},
						{
							"y": 0.0625,
							"x": 5,
							"count": 2
						},
						{
							"y": 0.0625,
							"x": 6,
							"count": 8
						},
						{
							"y": 0.0625,
							"x": 8,
							"count": 6
						},
						{
							"y": 0.0625,
							"x": 9,
							"count": 4
						},
						{
							"y": 0.0625,
							"x": 10,
							"count": 1
						},
						{
							"y": 0.0625,
							"x": 11,
							"count": 2
						},
						{
							"y": 0.0625,
							"x": 12,
							"count": 2
						},
						{
							"y": 0.0625,
							"x": 13,
							"count": 1
						},
						{
							"y": 0.0625,
							"x": 14,
							"count": 2
						},
						{
							"y": 0.0625,
							"x": 15,
							"count": 1
						},
						{
							"y": 0.0625,
							"x": 16,
							"count": 1
						},
						{
							"y": 0.0625,
							"x": 18,
							"count": 1
						},
						{
							"y": 0.0625,
							"x": 19,
							"count": 1
						},
						{
							"y": 0.0625,
							"x": 20,
							"count": 2
						},
						{
							"y": 0.0625,
							"x": 21,
							"count": 2
						},
						{
							"y": 0.0625,
							"x": 23,
							"count": 1
						},
						{
							"y": 0.09375,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.09375,
							"x": 1,
							"count": 2
						},
						{
							"y": 0.09375,
							"x": 2,
							"count": 7
						},
						{
							"y": 0.09375,
							"x": 3,
							"count": 8
						},
						{
							"y": 0.09375,
							"x": 4,
							"count": 9
						},
						{
							"y": 0.09375,
							"x": 5,
							"count": 12
						},
						{
							"y": 0.09375,
							"x": 6,
							"count": 10
						},
						{
							"y": 0.09375,
							"x": 7,
							"count": 6
						},
						{
							"y": 0.09375,
							"x": 8,
							"count": 12
						},
						{
							"y": 0.09375,
							"x": 9,
							"count": 8
						},
						{
							"y": 0.09375,
							"x": 10,
							"count": 10
						},
						{
							"y": 0.09375,
							"x": 11,
							"count": 13
						},
						{
							"y": 0.09375,
							"x": 12,
							"count": 5
						},
						{
							"y": 0.09375,
							"x": 13,
							"count": 7
						},
						{
							"y": 0.09375,
							"x": 14,
							"count": 6
						},
						{
							"y": 0.09375,
							"x": 15,
							"count": 6
						},
						{
							"y": 0.09375,
							"x": 16,
							"count": 3
						},
						{
							"y": 0.09375,
							"x": 17,
							"count": 6
						},
						{
							"y": 0.09375,
							"x": 18,
							"count": 4
						},
						{
							"y": 0.09375,
							"x": 19,
							"count": 1
						},
						{
							"y": 0.09375,
							"x": 20,
							"count": 2
						},
						{
							"y": 0.09375,
							"x": 22,
							"count": 1
						},
						{
							"y": 0.09375,
							"x": 24,
							"count": 1
						},
						{
							"y": 0.09375,
							"x": 26,
							"count": 1
						},
						{
							"y": 0.09375,
							"x": 27,
							"count": 1
						},
						{
							"y": 0.09375,
							"x": 31,
							"count": 1
						},
						{
							"y": 0.125,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.125,
							"x": 2,
							"count": 7
						},
						{
							"y": 0.125,
							"x": 3,
							"count": 7
						},
						{
							"y": 0.125,
							"x": 4,
							"count": 14
						},
						{
							"y": 0.125,
							"x": 5,
							"count": 5
						},
						{
							"y": 0.125,
							"x": 6,
							"count": 14
						},
						{
							"y": 0.125,
							"x": 7,
							"count": 11
						},
						{
							"y": 0.125,
							"x": 8,
							"count": 7
						},
						{
							"y": 0.125,
							"x": 9,
							"count": 8
						},
						{
							"y": 0.125,
							"x": 10,
							"count": 6
						},
						{
							"y": 0.125,
							"x": 11,
							"count": 7
						},
						{
							"y": 0.125,
							"x": 12,
							"count": 2
						},
						{
							"y": 0.125,
							"x": 13,
							"count": 10
						},
						{
							"y": 0.125,
							"x": 14,
							"count": 6
						},
						{
							"y": 0.125,
							"x": 15,
							"count": 4
						},
						{
							"y": 0.125,
							"x": 16,
							"count": 3
						},
						{
							"y": 0.125,
							"x": 17,
							"count": 4
						},
						{
							"y": 0.125,
							"x": 19,
							"count": 4
						},
						{
							"y": 0.125,
							"x": 20,
							"count": 3
						},
						{
							"y": 0.125,
							"x": 21,
							"count": 1
						},
						{
							"y": 0.125,
							"x": 22,
							"count": 1
						},
						{
							"y": 0.125,
							"x": 25,
							"count": 1
						},
						{
							"y": 0.125,
							"x": 27,
							"count": 1
						},
						{
							"y": 0.15625,
							"x": 1,
							"count": 5
						},
						{
							"y": 0.15625,
							"x": 2,
							"count": 8
						},
						{
							"y": 0.15625,
							"x": 3,
							"count": 14
						},
						{
							"y": 0.15625,
							"x": 4,
							"count": 10
						},
						{
							"y": 0.15625,
							"x": 5,
							"count": 4
						},
						{
							"y": 0.15625,
							"x": 6,
							"count": 2
						},
						{
							"y": 0.15625,
							"x": 7,
							"count": 5
						},
						{
							"y": 0.15625,
							"x": 8,
							"count": 2
						},
						{
							"y": 0.15625,
							"x": 9,
							"count": 5
						},
						{
							"y": 0.15625,
							"x": 10,
							"count": 1
						},
						{
							"y": 0.15625,
							"x": 11,
							"count": 1
						},
						{
							"y": 0.15625,
							"x": 12,
							"count": 4
						},
						{
							"y": 0.15625,
							"x": 13,
							"count": 3
						},
						{
							"y": 0.15625,
							"x": 14,
							"count": 1
						},
						{
							"y": 0.15625,
							"x": 15,
							"count": 1
						},
						{
							"y": 0.15625,
							"x": 16,
							"count": 2
						},
						{
							"y": 0.15625,
							"x": 17,
							"count": 2
						},
						{
							"y": 0.15625,
							"x": 18,
							"count": 1
						},
						{
							"y": 0.15625,
							"x": 19,
							"count": 1
						},
						{
							"y": 0.15625,
							"x": 21,
							"count": 1
						},
						{
							"y": 0.15625,
							"x": 24,
							"count": 1
						},
						{
							"y": 0.1875,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.1875,
							"x": 1,
							"count": 7
						},
						{
							"y": 0.1875,
							"x": 2,
							"count": 14
						},
						{
							"y": 0.1875,
							"x": 3,
							"count": 6
						},
						{
							"y": 0.1875,
							"x": 4,
							"count": 5
						},
						{
							"y": 0.1875,
							"x": 5,
							"count": 4
						},
						{
							"y": 0.1875,
							"x": 6,
							"count": 3
						},
						{
							"y": 0.1875,
							"x": 7,
							"count": 1
						},
						{
							"y": 0.1875,
							"x": 9,
							"count": 2
						},
						{
							"y": 0.1875,
							"x": 10,
							"count": 1
						},
						{
							"y": 0.1875,
							"x": 11,
							"count": 1
						},
						{
							"y": 0.1875,
							"x": 13,
							"count": 1
						},
						{
							"y": 0.21875,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.21875,
							"x": 1,
							"count": 2
						},
						{
							"y": 0.21875,
							"x": 2,
							"count": 8
						},
						{
							"y": 0.21875,
							"x": 3,
							"count": 7
						},
						{
							"y": 0.21875,
							"x": 4,
							"count": 1
						},
						{
							"y": 0.21875,
							"x": 6,
							"count": 1
						},
						{
							"y": 0.21875,
							"x": 9,
							"count": 1
						},
						{
							"y": 0.25,
							"x": 1,
							"count": 1
						},
						{
							"y": 0.25,
							"x": 2,
							"count": 2
						},
						{
							"y": 0.25,
							"x": 3,
							"count": 3
						},
						{
							"y": 0.25,
							"x": 5,
							"count": 1
						},
						{
							"y": 0.25,
							"x": 8,
							"count": 1
						},
						{
							"y": 0.28125,
							"x": 1,
							"count": 3
						},
						{
							"y": 0.28125,
							"x": 3,
							"count": 1
						},
						{
							"y": 0.28125,
							"x": 13,
							"count": 1
						},
						{
							"y": 0.34375,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.34375,
							"x": 1,
							"count": 2
						},
						{
							"y": 0.375,
							"x": 1,
							"count": 1
						},
						{
							"y": 0.375,
							"x": 2,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 0,
							"count": 1
						}
					],
					"maxCount": 14
				},
				"rebounds pergame": {
					"bins": [
						{
							"x": 0,
							"y": 0.42500000000000004,
							"count": 5
						},
						{
							"x": 0,
							"y": 0.8500000000000001,
							"count": 2
						},
						{
							"x": 0,
							"y": 1.2750000000000001,
							"count": 1
						},
						{
							"x": 0,
							"y": 2.5500000000000003,
							"count": 1
						},
						{
							"x": 1,
							"y": 0.42500000000000004,
							"count": 7
						},
						{
							"x": 1,
							"y": 0.8500000000000001,
							"count": 6
						},
						{
							"x": 1,
							"y": 1.2750000000000001,
							"count": 7
						},
						{
							"x": 1,
							"y": 1.7000000000000002,
							"count": 3
						},
						{
							"x": 1,
							"y": 2.125,
							"count": 4
						},
						{
							"x": 1,
							"y": 2.9750000000000005,
							"count": 2
						},
						{
							"x": 2,
							"y": 0,
							"count": 2
						},
						{
							"x": 2,
							"y": 0.42500000000000004,
							"count": 6
						},
						{
							"x": 2,
							"y": 0.8500000000000001,
							"count": 13
						},
						{
							"x": 2,
							"y": 1.2750000000000001,
							"count": 9
						},
						{
							"x": 2,
							"y": 1.7000000000000002,
							"count": 6
						},
						{
							"x": 2,
							"y": 2.125,
							"count": 4
						},
						{
							"x": 2,
							"y": 2.5500000000000003,
							"count": 4
						},
						{
							"x": 2,
							"y": 2.9750000000000005,
							"count": 1
						},
						{
							"x": 2,
							"y": 3.4000000000000004,
							"count": 4
						},
						{
							"x": 2,
							"y": 3.825,
							"count": 1
						},
						{
							"x": 2,
							"y": 4.675000000000001,
							"count": 2
						},
						{
							"x": 2,
							"y": 8.925,
							"count": 1
						},
						{
							"x": 3,
							"y": 0,
							"count": 1
						},
						{
							"x": 3,
							"y": 0.42500000000000004,
							"count": 5
						},
						{
							"x": 3,
							"y": 0.8500000000000001,
							"count": 10
						},
						{
							"x": 3,
							"y": 1.2750000000000001,
							"count": 6
						},
						{
							"x": 3,
							"y": 1.7000000000000002,
							"count": 9
						},
						{
							"x": 3,
							"y": 2.125,
							"count": 8
						},
						{
							"x": 3,
							"y": 2.5500000000000003,
							"count": 5
						},
						{
							"x": 3,
							"y": 2.9750000000000005,
							"count": 1
						},
						{
							"x": 3,
							"y": 3.4000000000000004,
							"count": 4
						},
						{
							"x": 3,
							"y": 3.825,
							"count": 2
						},
						{
							"x": 3,
							"y": 4.25,
							"count": 1
						},
						{
							"x": 3,
							"y": 4.675000000000001,
							"count": 2
						},
						{
							"x": 4,
							"y": 0.42500000000000004,
							"count": 1
						},
						{
							"x": 4,
							"y": 0.8500000000000001,
							"count": 5
						},
						{
							"x": 4,
							"y": 1.2750000000000001,
							"count": 5
						},
						{
							"x": 4,
							"y": 1.7000000000000002,
							"count": 10
						},
						{
							"x": 4,
							"y": 2.125,
							"count": 5
						},
						{
							"x": 4,
							"y": 2.5500000000000003,
							"count": 5
						},
						{
							"x": 4,
							"y": 2.9750000000000005,
							"count": 4
						},
						{
							"x": 4,
							"y": 3.4000000000000004,
							"count": 3
						},
						{
							"x": 4,
							"y": 3.825,
							"count": 1
						},
						{
							"x": 4,
							"y": 4.25,
							"count": 2
						},
						{
							"x": 4,
							"y": 4.675000000000001,
							"count": 3
						},
						{
							"x": 4,
							"y": 5.525,
							"count": 1
						},
						{
							"x": 5,
							"y": 0.8500000000000001,
							"count": 2
						},
						{
							"x": 5,
							"y": 1.2750000000000001,
							"count": 5
						},
						{
							"x": 5,
							"y": 1.7000000000000002,
							"count": 5
						},
						{
							"x": 5,
							"y": 2.125,
							"count": 2
						},
						{
							"x": 5,
							"y": 2.5500000000000003,
							"count": 3
						},
						{
							"x": 5,
							"y": 2.9750000000000005,
							"count": 2
						},
						{
							"x": 5,
							"y": 3.4000000000000004,
							"count": 3
						},
						{
							"x": 5,
							"y": 3.825,
							"count": 2
						},
						{
							"x": 5,
							"y": 4.675000000000001,
							"count": 2
						},
						{
							"x": 5,
							"y": 5.1000000000000005,
							"count": 1
						},
						{
							"x": 5,
							"y": 7.65,
							"count": 2
						},
						{
							"x": 6,
							"y": 0.8500000000000001,
							"count": 1
						},
						{
							"x": 6,
							"y": 1.2750000000000001,
							"count": 1
						},
						{
							"x": 6,
							"y": 1.7000000000000002,
							"count": 7
						},
						{
							"x": 6,
							"y": 2.125,
							"count": 5
						},
						{
							"x": 6,
							"y": 2.5500000000000003,
							"count": 2
						},
						{
							"x": 6,
							"y": 2.9750000000000005,
							"count": 5
						},
						{
							"x": 6,
							"y": 3.4000000000000004,
							"count": 4
						},
						{
							"x": 6,
							"y": 3.825,
							"count": 2
						},
						{
							"x": 6,
							"y": 4.25,
							"count": 1
						},
						{
							"x": 6,
							"y": 4.675000000000001,
							"count": 3
						},
						{
							"x": 6,
							"y": 5.1000000000000005,
							"count": 4
						},
						{
							"x": 6,
							"y": 5.525,
							"count": 1
						},
						{
							"x": 6,
							"y": 6.375000000000001,
							"count": 1
						},
						{
							"x": 6,
							"y": 6.800000000000001,
							"count": 1
						},
						{
							"x": 7,
							"y": 1.2750000000000001,
							"count": 2
						},
						{
							"x": 7,
							"y": 1.7000000000000002,
							"count": 3
						},
						{
							"x": 7,
							"y": 2.125,
							"count": 3
						},
						{
							"x": 7,
							"y": 2.9750000000000005,
							"count": 4
						},
						{
							"x": 7,
							"y": 3.4000000000000004,
							"count": 1
						},
						{
							"x": 7,
							"y": 3.825,
							"count": 1
						},
						{
							"x": 7,
							"y": 4.25,
							"count": 1
						},
						{
							"x": 7,
							"y": 4.675000000000001,
							"count": 1
						},
						{
							"x": 7,
							"y": 5.1000000000000005,
							"count": 2
						},
						{
							"x": 7,
							"y": 5.950000000000001,
							"count": 2
						},
						{
							"x": 7,
							"y": 6.375000000000001,
							"count": 1
						},
						{
							"x": 7,
							"y": 6.800000000000001,
							"count": 1
						},
						{
							"x": 7,
							"y": 9.775,
							"count": 1
						},
						{
							"x": 8,
							"y": 0.42500000000000004,
							"count": 1
						},
						{
							"x": 8,
							"y": 1.2750000000000001,
							"count": 1
						},
						{
							"x": 8,
							"y": 1.7000000000000002,
							"count": 4
						},
						{
							"x": 8,
							"y": 2.125,
							"count": 3
						},
						{
							"x": 8,
							"y": 2.5500000000000003,
							"count": 4
						},
						{
							"x": 8,
							"y": 2.9750000000000005,
							"count": 1
						},
						{
							"x": 8,
							"y": 3.4000000000000004,
							"count": 4
						},
						{
							"x": 8,
							"y": 4.25,
							"count": 1
						},
						{
							"x": 8,
							"y": 4.675000000000001,
							"count": 1
						},
						{
							"x": 8,
							"y": 5.1000000000000005,
							"count": 3
						},
						{
							"x": 8,
							"y": 5.525,
							"count": 1
						},
						{
							"x": 8,
							"y": 5.950000000000001,
							"count": 1
						},
						{
							"x": 8,
							"y": 7.65,
							"count": 1
						},
						{
							"x": 8,
							"y": 9.350000000000001,
							"count": 2
						},
						{
							"x": 9,
							"y": 1.7000000000000002,
							"count": 3
						},
						{
							"x": 9,
							"y": 2.125,
							"count": 1
						},
						{
							"x": 9,
							"y": 2.5500000000000003,
							"count": 5
						},
						{
							"x": 9,
							"y": 2.9750000000000005,
							"count": 2
						},
						{
							"x": 9,
							"y": 3.4000000000000004,
							"count": 5
						},
						{
							"x": 9,
							"y": 3.825,
							"count": 4
						},
						{
							"x": 9,
							"y": 4.25,
							"count": 3
						},
						{
							"x": 9,
							"y": 5.1000000000000005,
							"count": 2
						},
						{
							"x": 9,
							"y": 5.525,
							"count": 1
						},
						{
							"x": 9,
							"y": 6.375000000000001,
							"count": 2
						},
						{
							"x": 9,
							"y": 7.2250000000000005,
							"count": 1
						},
						{
							"x": 10,
							"y": 1.2750000000000001,
							"count": 1
						},
						{
							"x": 10,
							"y": 1.7000000000000002,
							"count": 6
						},
						{
							"x": 10,
							"y": 2.125,
							"count": 1
						},
						{
							"x": 10,
							"y": 2.5500000000000003,
							"count": 2
						},
						{
							"x": 10,
							"y": 2.9750000000000005,
							"count": 1
						},
						{
							"x": 10,
							"y": 3.4000000000000004,
							"count": 3
						},
						{
							"x": 10,
							"y": 5.525,
							"count": 1
						},
						{
							"x": 10,
							"y": 6.375000000000001,
							"count": 3
						},
						{
							"x": 10,
							"y": 7.65,
							"count": 1
						},
						{
							"x": 10,
							"y": 13.175,
							"count": 1
						},
						{
							"x": 11,
							"y": 1.7000000000000002,
							"count": 1
						},
						{
							"x": 11,
							"y": 2.125,
							"count": 3
						},
						{
							"x": 11,
							"y": 2.5500000000000003,
							"count": 3
						},
						{
							"x": 11,
							"y": 3.4000000000000004,
							"count": 1
						},
						{
							"x": 11,
							"y": 3.825,
							"count": 1
						},
						{
							"x": 11,
							"y": 4.25,
							"count": 1
						},
						{
							"x": 11,
							"y": 4.675000000000001,
							"count": 1
						},
						{
							"x": 11,
							"y": 5.1000000000000005,
							"count": 4
						},
						{
							"x": 11,
							"y": 5.525,
							"count": 1
						},
						{
							"x": 11,
							"y": 5.950000000000001,
							"count": 1
						},
						{
							"x": 11,
							"y": 6.800000000000001,
							"count": 2
						},
						{
							"x": 11,
							"y": 8.5,
							"count": 2
						},
						{
							"x": 11,
							"y": 8.925,
							"count": 2
						},
						{
							"x": 11,
							"y": 9.350000000000001,
							"count": 1
						},
						{
							"x": 12,
							"y": 2.5500000000000003,
							"count": 3
						},
						{
							"x": 12,
							"y": 2.9750000000000005,
							"count": 2
						},
						{
							"x": 12,
							"y": 3.4000000000000004,
							"count": 2
						},
						{
							"x": 12,
							"y": 3.825,
							"count": 1
						},
						{
							"x": 12,
							"y": 5.950000000000001,
							"count": 2
						},
						{
							"x": 12,
							"y": 6.800000000000001,
							"count": 1
						},
						{
							"x": 12,
							"y": 7.2250000000000005,
							"count": 1
						},
						{
							"x": 12,
							"y": 11.05,
							"count": 1
						},
						{
							"x": 13,
							"y": 2.125,
							"count": 1
						},
						{
							"x": 13,
							"y": 2.5500000000000003,
							"count": 1
						},
						{
							"x": 13,
							"y": 2.9750000000000005,
							"count": 2
						},
						{
							"x": 13,
							"y": 3.825,
							"count": 2
						},
						{
							"x": 13,
							"y": 4.25,
							"count": 2
						},
						{
							"x": 13,
							"y": 4.675000000000001,
							"count": 2
						},
						{
							"x": 13,
							"y": 5.1000000000000005,
							"count": 1
						},
						{
							"x": 13,
							"y": 5.950000000000001,
							"count": 1
						},
						{
							"x": 13,
							"y": 6.800000000000001,
							"count": 2
						},
						{
							"x": 13,
							"y": 7.2250000000000005,
							"count": 1
						},
						{
							"x": 13,
							"y": 7.65,
							"count": 1
						},
						{
							"x": 13,
							"y": 8.075000000000001,
							"count": 2
						},
						{
							"x": 13,
							"y": 8.5,
							"count": 3
						},
						{
							"x": 13,
							"y": 9.350000000000001,
							"count": 1
						},
						{
							"x": 13,
							"y": 13.175,
							"count": 1
						},
						{
							"x": 14,
							"y": 1.7000000000000002,
							"count": 1
						},
						{
							"x": 14,
							"y": 2.5500000000000003,
							"count": 1
						},
						{
							"x": 14,
							"y": 2.9750000000000005,
							"count": 1
						},
						{
							"x": 14,
							"y": 3.4000000000000004,
							"count": 1
						},
						{
							"x": 14,
							"y": 3.825,
							"count": 3
						},
						{
							"x": 14,
							"y": 4.675000000000001,
							"count": 1
						},
						{
							"x": 14,
							"y": 5.1000000000000005,
							"count": 2
						},
						{
							"x": 14,
							"y": 5.950000000000001,
							"count": 1
						},
						{
							"x": 14,
							"y": 6.800000000000001,
							"count": 3
						},
						{
							"x": 14,
							"y": 10.625000000000002,
							"count": 1
						},
						{
							"x": 15,
							"y": 1.7000000000000002,
							"count": 1
						},
						{
							"x": 15,
							"y": 2.125,
							"count": 1
						},
						{
							"x": 15,
							"y": 2.5500000000000003,
							"count": 2
						},
						{
							"x": 15,
							"y": 2.9750000000000005,
							"count": 4
						},
						{
							"x": 15,
							"y": 3.4000000000000004,
							"count": 1
						},
						{
							"x": 15,
							"y": 8.5,
							"count": 1
						},
						{
							"x": 15,
							"y": 8.925,
							"count": 1
						},
						{
							"x": 15,
							"y": 9.775,
							"count": 1
						},
						{
							"x": 16,
							"y": 2.125,
							"count": 1
						},
						{
							"x": 16,
							"y": 2.5500000000000003,
							"count": 1
						},
						{
							"x": 16,
							"y": 3.4000000000000004,
							"count": 1
						},
						{
							"x": 16,
							"y": 4.25,
							"count": 1
						},
						{
							"x": 16,
							"y": 5.1000000000000005,
							"count": 2
						},
						{
							"x": 16,
							"y": 5.950000000000001,
							"count": 1
						},
						{
							"x": 16,
							"y": 6.375000000000001,
							"count": 1
						},
						{
							"x": 16,
							"y": 6.800000000000001,
							"count": 1
						},
						{
							"x": 17,
							"y": 2.5500000000000003,
							"count": 1
						},
						{
							"x": 17,
							"y": 3.4000000000000004,
							"count": 3
						},
						{
							"x": 17,
							"y": 3.825,
							"count": 1
						},
						{
							"x": 17,
							"y": 4.675000000000001,
							"count": 2
						},
						{
							"x": 17,
							"y": 5.950000000000001,
							"count": 1
						},
						{
							"x": 17,
							"y": 8.5,
							"count": 2
						},
						{
							"x": 17,
							"y": 9.350000000000001,
							"count": 1
						},
						{
							"x": 17,
							"y": 9.775,
							"count": 1
						},
						{
							"x": 18,
							"y": 2.125,
							"count": 1
						},
						{
							"x": 18,
							"y": 2.9750000000000005,
							"count": 1
						},
						{
							"x": 18,
							"y": 3.4000000000000004,
							"count": 1
						},
						{
							"x": 18,
							"y": 8.075000000000001,
							"count": 1
						},
						{
							"x": 18,
							"y": 8.925,
							"count": 1
						},
						{
							"x": 18,
							"y": 11.900000000000002,
							"count": 1
						},
						{
							"x": 19,
							"y": 2.9750000000000005,
							"count": 1
						},
						{
							"x": 19,
							"y": 3.4000000000000004,
							"count": 1
						},
						{
							"x": 19,
							"y": 3.825,
							"count": 1
						},
						{
							"x": 19,
							"y": 4.25,
							"count": 2
						},
						{
							"x": 19,
							"y": 6.375000000000001,
							"count": 1
						},
						{
							"x": 19,
							"y": 6.800000000000001,
							"count": 1
						},
						{
							"x": 19,
							"y": 7.2250000000000005,
							"count": 1
						},
						{
							"x": 20,
							"y": 2.5500000000000003,
							"count": 1
						},
						{
							"x": 20,
							"y": 2.9750000000000005,
							"count": 1
						},
						{
							"x": 20,
							"y": 3.4000000000000004,
							"count": 2
						},
						{
							"x": 20,
							"y": 5.1000000000000005,
							"count": 1
						},
						{
							"x": 20,
							"y": 5.950000000000001,
							"count": 1
						},
						{
							"x": 20,
							"y": 9.775,
							"count": 1
						},
						{
							"x": 21,
							"y": 5.525,
							"count": 1
						},
						{
							"x": 21,
							"y": 5.950000000000001,
							"count": 1
						},
						{
							"x": 21,
							"y": 6.800000000000001,
							"count": 1
						},
						{
							"x": 21,
							"y": 10.625000000000002,
							"count": 1
						},
						{
							"x": 22,
							"y": 4.25,
							"count": 1
						},
						{
							"x": 22,
							"y": 11.475000000000001,
							"count": 1
						},
						{
							"x": 23,
							"y": 11.05,
							"count": 1
						},
						{
							"x": 24,
							"y": 4.25,
							"count": 1
						},
						{
							"x": 24,
							"y": 9.350000000000001,
							"count": 1
						},
						{
							"x": 25,
							"y": 4.675000000000001,
							"count": 1
						},
						{
							"x": 26,
							"y": 12.325000000000001,
							"count": 1
						},
						{
							"x": 27,
							"y": 6.800000000000001,
							"count": 1
						},
						{
							"x": 27,
							"y": 8.075000000000001,
							"count": 1
						},
						{
							"x": 31,
							"y": 7.2250000000000005,
							"count": 1
						}
					],
					"x": {
						"extent": [
							0,
							32
						],
						"delta": 1
					},
					"y": {
						"extent": [
							0,
							13.600000000000001
						],
						"delta": 0.42500000000000004
					}
				}
			},
			"turnover per pocession": {
				"free throw attempts": {
					"y": {
						"extent": [
							0,
							805
						],
						"delta": 25.15625
					},
					"x": {
						"extent": [
							0,
							1
						],
						"delta": 0.03125
					},
					"bins": [
						{
							"y": 0,
							"x": 0,
							"count": 7
						},
						{
							"y": 0,
							"x": 0.03125,
							"count": 6
						},
						{
							"y": 0,
							"x": 0.0625,
							"count": 19
						},
						{
							"y": 0,
							"x": 0.09375,
							"count": 26
						},
						{
							"y": 0,
							"x": 0.125,
							"count": 19
						},
						{
							"y": 0,
							"x": 0.15625,
							"count": 25
						},
						{
							"y": 0,
							"x": 0.1875,
							"count": 25
						},
						{
							"y": 0,
							"x": 0.21875,
							"count": 8
						},
						{
							"y": 0,
							"x": 0.25,
							"count": 6
						},
						{
							"y": 0,
							"x": 0.28125,
							"count": 4
						},
						{
							"y": 0,
							"x": 0.34375,
							"count": 3
						},
						{
							"y": 0,
							"x": 0.375,
							"count": 2
						},
						{
							"y": 0,
							"x": 0.5625,
							"count": 1
						},
						{
							"y": 0,
							"x": 0.96875,
							"count": 1
						},
						{
							"y": 25.15625,
							"x": 0.0625,
							"count": 6
						},
						{
							"y": 25.15625,
							"x": 0.09375,
							"count": 15
						},
						{
							"y": 25.15625,
							"x": 0.125,
							"count": 15
						},
						{
							"y": 25.15625,
							"x": 0.15625,
							"count": 10
						},
						{
							"y": 25.15625,
							"x": 0.1875,
							"count": 8
						},
						{
							"y": 25.15625,
							"x": 0.21875,
							"count": 7
						},
						{
							"y": 25.15625,
							"x": 0.25,
							"count": 1
						},
						{
							"y": 50.3125,
							"x": 0.03125,
							"count": 2
						},
						{
							"y": 50.3125,
							"x": 0.0625,
							"count": 10
						},
						{
							"y": 50.3125,
							"x": 0.09375,
							"count": 16
						},
						{
							"y": 50.3125,
							"x": 0.125,
							"count": 15
						},
						{
							"y": 50.3125,
							"x": 0.15625,
							"count": 8
						},
						{
							"y": 50.3125,
							"x": 0.1875,
							"count": 6
						},
						{
							"y": 50.3125,
							"x": 0.21875,
							"count": 5
						},
						{
							"y": 50.3125,
							"x": 0.28125,
							"count": 1
						},
						{
							"y": 75.46875,
							"x": 0.0625,
							"count": 3
						},
						{
							"y": 75.46875,
							"x": 0.09375,
							"count": 13
						},
						{
							"y": 75.46875,
							"x": 0.125,
							"count": 10
						},
						{
							"y": 75.46875,
							"x": 0.15625,
							"count": 6
						},
						{
							"y": 75.46875,
							"x": 0.1875,
							"count": 1
						},
						{
							"y": 100.625,
							"x": 0.0625,
							"count": 3
						},
						{
							"y": 100.625,
							"x": 0.09375,
							"count": 9
						},
						{
							"y": 100.625,
							"x": 0.125,
							"count": 8
						},
						{
							"y": 100.625,
							"x": 0.15625,
							"count": 7
						},
						{
							"y": 100.625,
							"x": 0.1875,
							"count": 1
						},
						{
							"y": 100.625,
							"x": 0.25,
							"count": 1
						},
						{
							"y": 125.78125,
							"x": 0.03125,
							"count": 1
						},
						{
							"y": 125.78125,
							"x": 0.0625,
							"count": 2
						},
						{
							"y": 125.78125,
							"x": 0.09375,
							"count": 11
						},
						{
							"y": 125.78125,
							"x": 0.125,
							"count": 11
						},
						{
							"y": 125.78125,
							"x": 0.15625,
							"count": 4
						},
						{
							"y": 125.78125,
							"x": 0.1875,
							"count": 1
						},
						{
							"y": 125.78125,
							"x": 0.21875,
							"count": 1
						},
						{
							"y": 150.9375,
							"x": 0.0625,
							"count": 1
						},
						{
							"y": 150.9375,
							"x": 0.09375,
							"count": 5
						},
						{
							"y": 150.9375,
							"x": 0.125,
							"count": 4
						},
						{
							"y": 150.9375,
							"x": 0.1875,
							"count": 1
						},
						{
							"y": 176.09375,
							"x": 0.0625,
							"count": 2
						},
						{
							"y": 176.09375,
							"x": 0.09375,
							"count": 10
						},
						{
							"y": 176.09375,
							"x": 0.125,
							"count": 8
						},
						{
							"y": 176.09375,
							"x": 0.15625,
							"count": 3
						},
						{
							"y": 201.25,
							"x": 0.09375,
							"count": 3
						},
						{
							"y": 201.25,
							"x": 0.125,
							"count": 6
						},
						{
							"y": 201.25,
							"x": 0.15625,
							"count": 1
						},
						{
							"y": 201.25,
							"x": 0.1875,
							"count": 1
						},
						{
							"y": 226.40625,
							"x": 0.0625,
							"count": 1
						},
						{
							"y": 226.40625,
							"x": 0.09375,
							"count": 10
						},
						{
							"y": 226.40625,
							"x": 0.125,
							"count": 3
						},
						{
							"y": 226.40625,
							"x": 0.15625,
							"count": 1
						},
						{
							"y": 251.5625,
							"x": 0.09375,
							"count": 4
						},
						{
							"y": 251.5625,
							"x": 0.125,
							"count": 5
						},
						{
							"y": 251.5625,
							"x": 0.15625,
							"count": 1
						},
						{
							"y": 276.71875,
							"x": 0.0625,
							"count": 2
						},
						{
							"y": 276.71875,
							"x": 0.09375,
							"count": 2
						},
						{
							"y": 276.71875,
							"x": 0.125,
							"count": 5
						},
						{
							"y": 276.71875,
							"x": 0.15625,
							"count": 1
						},
						{
							"y": 276.71875,
							"x": 0.1875,
							"count": 1
						},
						{
							"y": 301.875,
							"x": 0.09375,
							"count": 3
						},
						{
							"y": 301.875,
							"x": 0.125,
							"count": 6
						},
						{
							"y": 301.875,
							"x": 0.1875,
							"count": 1
						},
						{
							"y": 327.03125,
							"x": 0.0625,
							"count": 1
						},
						{
							"y": 327.03125,
							"x": 0.09375,
							"count": 8
						},
						{
							"y": 327.03125,
							"x": 0.15625,
							"count": 2
						},
						{
							"y": 352.1875,
							"x": 0.0625,
							"count": 2
						},
						{
							"y": 352.1875,
							"x": 0.09375,
							"count": 2
						},
						{
							"y": 352.1875,
							"x": 0.125,
							"count": 2
						},
						{
							"y": 352.1875,
							"x": 0.15625,
							"count": 2
						},
						{
							"y": 377.34375,
							"x": 0.125,
							"count": 3
						},
						{
							"y": 377.34375,
							"x": 0.15625,
							"count": 1
						},
						{
							"y": 402.5,
							"x": 0.09375,
							"count": 1
						},
						{
							"y": 402.5,
							"x": 0.125,
							"count": 2
						},
						{
							"y": 402.5,
							"x": 0.15625,
							"count": 1
						},
						{
							"y": 427.65625,
							"x": 0.0625,
							"count": 1
						},
						{
							"y": 427.65625,
							"x": 0.125,
							"count": 1
						},
						{
							"y": 452.8125,
							"x": 0.125,
							"count": 1
						},
						{
							"y": 528.28125,
							"x": 0.09375,
							"count": 1
						},
						{
							"y": 578.59375,
							"x": 0.125,
							"count": 2
						},
						{
							"y": 628.90625,
							"x": 0.09375,
							"count": 2
						},
						{
							"y": 628.90625,
							"x": 0.15625,
							"count": 1
						},
						{
							"y": 654.0625,
							"x": 0.09375,
							"count": 1
						},
						{
							"y": 654.0625,
							"x": 0.125,
							"count": 1
						},
						{
							"y": 779.84375,
							"x": 0.09375,
							"count": 1
						}
					],
					"maxCount": 26
				},
				"points per game": {
					"bins": [
						{
							"x": 0,
							"y": 0,
							"count": 2
						},
						{
							"x": 0,
							"y": 1,
							"count": 2
						},
						{
							"x": 0,
							"y": 3,
							"count": 3
						},
						{
							"x": 0.03125,
							"y": 1,
							"count": 1
						},
						{
							"x": 0.03125,
							"y": 2,
							"count": 1
						},
						{
							"x": 0.03125,
							"y": 3,
							"count": 2
						},
						{
							"x": 0.03125,
							"y": 4,
							"count": 1
						},
						{
							"x": 0.03125,
							"y": 5,
							"count": 1
						},
						{
							"x": 0.03125,
							"y": 9,
							"count": 1
						},
						{
							"x": 0.03125,
							"y": 10,
							"count": 1
						},
						{
							"x": 0.03125,
							"y": 19,
							"count": 1
						},
						{
							"x": 0.0625,
							"y": 1,
							"count": 3
						},
						{
							"x": 0.0625,
							"y": 2,
							"count": 5
						},
						{
							"x": 0.0625,
							"y": 3,
							"count": 3
						},
						{
							"x": 0.0625,
							"y": 4,
							"count": 5
						},
						{
							"x": 0.0625,
							"y": 5,
							"count": 2
						},
						{
							"x": 0.0625,
							"y": 6,
							"count": 8
						},
						{
							"x": 0.0625,
							"y": 8,
							"count": 6
						},
						{
							"x": 0.0625,
							"y": 9,
							"count": 4
						},
						{
							"x": 0.0625,
							"y": 10,
							"count": 1
						},
						{
							"x": 0.0625,
							"y": 11,
							"count": 2
						},
						{
							"x": 0.0625,
							"y": 12,
							"count": 2
						},
						{
							"x": 0.0625,
							"y": 13,
							"count": 1
						},
						{
							"x": 0.0625,
							"y": 14,
							"count": 2
						},
						{
							"x": 0.0625,
							"y": 15,
							"count": 1
						},
						{
							"x": 0.0625,
							"y": 16,
							"count": 1
						},
						{
							"x": 0.0625,
							"y": 18,
							"count": 1
						},
						{
							"x": 0.0625,
							"y": 19,
							"count": 1
						},
						{
							"x": 0.0625,
							"y": 20,
							"count": 2
						},
						{
							"x": 0.0625,
							"y": 21,
							"count": 2
						},
						{
							"x": 0.0625,
							"y": 23,
							"count": 1
						},
						{
							"x": 0.09375,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.09375,
							"y": 1,
							"count": 2
						},
						{
							"x": 0.09375,
							"y": 2,
							"count": 7
						},
						{
							"x": 0.09375,
							"y": 3,
							"count": 8
						},
						{
							"x": 0.09375,
							"y": 4,
							"count": 9
						},
						{
							"x": 0.09375,
							"y": 5,
							"count": 12
						},
						{
							"x": 0.09375,
							"y": 6,
							"count": 10
						},
						{
							"x": 0.09375,
							"y": 7,
							"count": 6
						},
						{
							"x": 0.09375,
							"y": 8,
							"count": 12
						},
						{
							"x": 0.09375,
							"y": 9,
							"count": 8
						},
						{
							"x": 0.09375,
							"y": 10,
							"count": 10
						},
						{
							"x": 0.09375,
							"y": 11,
							"count": 13
						},
						{
							"x": 0.09375,
							"y": 12,
							"count": 5
						},
						{
							"x": 0.09375,
							"y": 13,
							"count": 7
						},
						{
							"x": 0.09375,
							"y": 14,
							"count": 6
						},
						{
							"x": 0.09375,
							"y": 15,
							"count": 6
						},
						{
							"x": 0.09375,
							"y": 16,
							"count": 3
						},
						{
							"x": 0.09375,
							"y": 17,
							"count": 6
						},
						{
							"x": 0.09375,
							"y": 18,
							"count": 4
						},
						{
							"x": 0.09375,
							"y": 19,
							"count": 1
						},
						{
							"x": 0.09375,
							"y": 20,
							"count": 2
						},
						{
							"x": 0.09375,
							"y": 22,
							"count": 1
						},
						{
							"x": 0.09375,
							"y": 24,
							"count": 1
						},
						{
							"x": 0.09375,
							"y": 26,
							"count": 1
						},
						{
							"x": 0.09375,
							"y": 27,
							"count": 1
						},
						{
							"x": 0.09375,
							"y": 31,
							"count": 1
						},
						{
							"x": 0.125,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.125,
							"y": 2,
							"count": 7
						},
						{
							"x": 0.125,
							"y": 3,
							"count": 7
						},
						{
							"x": 0.125,
							"y": 4,
							"count": 14
						},
						{
							"x": 0.125,
							"y": 5,
							"count": 5
						},
						{
							"x": 0.125,
							"y": 6,
							"count": 14
						},
						{
							"x": 0.125,
							"y": 7,
							"count": 11
						},
						{
							"x": 0.125,
							"y": 8,
							"count": 7
						},
						{
							"x": 0.125,
							"y": 9,
							"count": 8
						},
						{
							"x": 0.125,
							"y": 10,
							"count": 6
						},
						{
							"x": 0.125,
							"y": 11,
							"count": 7
						},
						{
							"x": 0.125,
							"y": 12,
							"count": 2
						},
						{
							"x": 0.125,
							"y": 13,
							"count": 10
						},
						{
							"x": 0.125,
							"y": 14,
							"count": 6
						},
						{
							"x": 0.125,
							"y": 15,
							"count": 4
						},
						{
							"x": 0.125,
							"y": 16,
							"count": 3
						},
						{
							"x": 0.125,
							"y": 17,
							"count": 4
						},
						{
							"x": 0.125,
							"y": 19,
							"count": 4
						},
						{
							"x": 0.125,
							"y": 20,
							"count": 3
						},
						{
							"x": 0.125,
							"y": 21,
							"count": 1
						},
						{
							"x": 0.125,
							"y": 22,
							"count": 1
						},
						{
							"x": 0.125,
							"y": 25,
							"count": 1
						},
						{
							"x": 0.125,
							"y": 27,
							"count": 1
						},
						{
							"x": 0.15625,
							"y": 1,
							"count": 5
						},
						{
							"x": 0.15625,
							"y": 2,
							"count": 8
						},
						{
							"x": 0.15625,
							"y": 3,
							"count": 14
						},
						{
							"x": 0.15625,
							"y": 4,
							"count": 10
						},
						{
							"x": 0.15625,
							"y": 5,
							"count": 4
						},
						{
							"x": 0.15625,
							"y": 6,
							"count": 2
						},
						{
							"x": 0.15625,
							"y": 7,
							"count": 5
						},
						{
							"x": 0.15625,
							"y": 8,
							"count": 2
						},
						{
							"x": 0.15625,
							"y": 9,
							"count": 5
						},
						{
							"x": 0.15625,
							"y": 10,
							"count": 1
						},
						{
							"x": 0.15625,
							"y": 11,
							"count": 1
						},
						{
							"x": 0.15625,
							"y": 12,
							"count": 4
						},
						{
							"x": 0.15625,
							"y": 13,
							"count": 3
						},
						{
							"x": 0.15625,
							"y": 14,
							"count": 1
						},
						{
							"x": 0.15625,
							"y": 15,
							"count": 1
						},
						{
							"x": 0.15625,
							"y": 16,
							"count": 2
						},
						{
							"x": 0.15625,
							"y": 17,
							"count": 2
						},
						{
							"x": 0.15625,
							"y": 18,
							"count": 1
						},
						{
							"x": 0.15625,
							"y": 19,
							"count": 1
						},
						{
							"x": 0.15625,
							"y": 21,
							"count": 1
						},
						{
							"x": 0.15625,
							"y": 24,
							"count": 1
						},
						{
							"x": 0.1875,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.1875,
							"y": 1,
							"count": 7
						},
						{
							"x": 0.1875,
							"y": 2,
							"count": 14
						},
						{
							"x": 0.1875,
							"y": 3,
							"count": 6
						},
						{
							"x": 0.1875,
							"y": 4,
							"count": 5
						},
						{
							"x": 0.1875,
							"y": 5,
							"count": 4
						},
						{
							"x": 0.1875,
							"y": 6,
							"count": 3
						},
						{
							"x": 0.1875,
							"y": 7,
							"count": 1
						},
						{
							"x": 0.1875,
							"y": 9,
							"count": 2
						},
						{
							"x": 0.1875,
							"y": 10,
							"count": 1
						},
						{
							"x": 0.1875,
							"y": 11,
							"count": 1
						},
						{
							"x": 0.1875,
							"y": 13,
							"count": 1
						},
						{
							"x": 0.21875,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.21875,
							"y": 1,
							"count": 2
						},
						{
							"x": 0.21875,
							"y": 2,
							"count": 8
						},
						{
							"x": 0.21875,
							"y": 3,
							"count": 7
						},
						{
							"x": 0.21875,
							"y": 4,
							"count": 1
						},
						{
							"x": 0.21875,
							"y": 6,
							"count": 1
						},
						{
							"x": 0.21875,
							"y": 9,
							"count": 1
						},
						{
							"x": 0.25,
							"y": 1,
							"count": 1
						},
						{
							"x": 0.25,
							"y": 2,
							"count": 2
						},
						{
							"x": 0.25,
							"y": 3,
							"count": 3
						},
						{
							"x": 0.25,
							"y": 5,
							"count": 1
						},
						{
							"x": 0.25,
							"y": 8,
							"count": 1
						},
						{
							"x": 0.28125,
							"y": 1,
							"count": 3
						},
						{
							"x": 0.28125,
							"y": 3,
							"count": 1
						},
						{
							"x": 0.28125,
							"y": 13,
							"count": 1
						},
						{
							"x": 0.34375,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.34375,
							"y": 1,
							"count": 2
						},
						{
							"x": 0.375,
							"y": 1,
							"count": 1
						},
						{
							"x": 0.375,
							"y": 2,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 0,
							"count": 1
						}
					],
					"x": {
						"extent": [
							0,
							1
						],
						"delta": 0.03125
					},
					"y": {
						"extent": [
							0,
							32
						],
						"delta": 1
					}
				}
			},
			"free throw attempts": {
				"2 point shots attempts": {
					"y": {
						"extent": [
							0,
							1408
						],
						"delta": 44
					},
					"x": {
						"extent": [
							0,
							805
						],
						"delta": 25.15625
					},
					"bins": [
						{
							"y": 0,
							"x": 0,
							"count": 93
						},
						{
							"y": 0,
							"x": 25.15625,
							"count": 1
						},
						{
							"y": 44,
							"x": 0,
							"count": 45
						},
						{
							"y": 44,
							"x": 25.15625,
							"count": 14
						},
						{
							"y": 44,
							"x": 50.3125,
							"count": 4
						},
						{
							"y": 88,
							"x": 0,
							"count": 11
						},
						{
							"y": 88,
							"x": 25.15625,
							"count": 25
						},
						{
							"y": 88,
							"x": 50.3125,
							"count": 10
						},
						{
							"y": 88,
							"x": 75.46875,
							"count": 1
						},
						{
							"y": 132,
							"x": 0,
							"count": 3
						},
						{
							"y": 132,
							"x": 25.15625,
							"count": 12
						},
						{
							"y": 132,
							"x": 50.3125,
							"count": 11
						},
						{
							"y": 132,
							"x": 75.46875,
							"count": 2
						},
						{
							"y": 132,
							"x": 100.625,
							"count": 3
						},
						{
							"y": 176,
							"x": 25.15625,
							"count": 3
						},
						{
							"y": 176,
							"x": 50.3125,
							"count": 15
						},
						{
							"y": 176,
							"x": 75.46875,
							"count": 3
						},
						{
							"y": 176,
							"x": 100.625,
							"count": 3
						},
						{
							"y": 176,
							"x": 125.78125,
							"count": 3
						},
						{
							"y": 176,
							"x": 176.09375,
							"count": 1
						},
						{
							"y": 220,
							"x": 25.15625,
							"count": 5
						},
						{
							"y": 220,
							"x": 50.3125,
							"count": 7
						},
						{
							"y": 220,
							"x": 75.46875,
							"count": 7
						},
						{
							"y": 220,
							"x": 100.625,
							"count": 6
						},
						{
							"y": 220,
							"x": 125.78125,
							"count": 2
						},
						{
							"y": 220,
							"x": 150.9375,
							"count": 2
						},
						{
							"y": 220,
							"x": 176.09375,
							"count": 1
						},
						{
							"y": 264,
							"x": 25.15625,
							"count": 1
						},
						{
							"y": 264,
							"x": 50.3125,
							"count": 3
						},
						{
							"y": 264,
							"x": 75.46875,
							"count": 7
						},
						{
							"y": 264,
							"x": 100.625,
							"count": 4
						},
						{
							"y": 264,
							"x": 125.78125,
							"count": 2
						},
						{
							"y": 264,
							"x": 176.09375,
							"count": 2
						},
						{
							"y": 264,
							"x": 201.25,
							"count": 1
						},
						{
							"y": 308,
							"x": 50.3125,
							"count": 7
						},
						{
							"y": 308,
							"x": 75.46875,
							"count": 6
						},
						{
							"y": 308,
							"x": 125.78125,
							"count": 3
						},
						{
							"y": 308,
							"x": 150.9375,
							"count": 3
						},
						{
							"y": 308,
							"x": 176.09375,
							"count": 1
						},
						{
							"y": 308,
							"x": 226.40625,
							"count": 1
						},
						{
							"y": 352,
							"x": 25.15625,
							"count": 1
						},
						{
							"y": 352,
							"x": 50.3125,
							"count": 3
						},
						{
							"y": 352,
							"x": 75.46875,
							"count": 2
						},
						{
							"y": 352,
							"x": 100.625,
							"count": 9
						},
						{
							"y": 352,
							"x": 125.78125,
							"count": 4
						},
						{
							"y": 352,
							"x": 150.9375,
							"count": 5
						},
						{
							"y": 352,
							"x": 176.09375,
							"count": 3
						},
						{
							"y": 352,
							"x": 201.25,
							"count": 1
						},
						{
							"y": 396,
							"x": 50.3125,
							"count": 1
						},
						{
							"y": 396,
							"x": 75.46875,
							"count": 3
						},
						{
							"y": 396,
							"x": 100.625,
							"count": 1
						},
						{
							"y": 396,
							"x": 125.78125,
							"count": 4
						},
						{
							"y": 396,
							"x": 176.09375,
							"count": 2
						},
						{
							"y": 396,
							"x": 201.25,
							"count": 1
						},
						{
							"y": 396,
							"x": 226.40625,
							"count": 2
						},
						{
							"y": 396,
							"x": 251.5625,
							"count": 1
						},
						{
							"y": 396,
							"x": 301.875,
							"count": 1
						},
						{
							"y": 440,
							"x": 75.46875,
							"count": 2
						},
						{
							"y": 440,
							"x": 125.78125,
							"count": 6
						},
						{
							"y": 440,
							"x": 150.9375,
							"count": 1
						},
						{
							"y": 440,
							"x": 176.09375,
							"count": 2
						},
						{
							"y": 440,
							"x": 201.25,
							"count": 1
						},
						{
							"y": 440,
							"x": 327.03125,
							"count": 1
						},
						{
							"y": 484,
							"x": 50.3125,
							"count": 1
						},
						{
							"y": 484,
							"x": 100.625,
							"count": 1
						},
						{
							"y": 484,
							"x": 125.78125,
							"count": 2
						},
						{
							"y": 484,
							"x": 176.09375,
							"count": 2
						},
						{
							"y": 484,
							"x": 201.25,
							"count": 1
						},
						{
							"y": 484,
							"x": 226.40625,
							"count": 1
						},
						{
							"y": 484,
							"x": 251.5625,
							"count": 2
						},
						{
							"y": 484,
							"x": 276.71875,
							"count": 1
						},
						{
							"y": 484,
							"x": 352.1875,
							"count": 1
						},
						{
							"y": 528,
							"x": 50.3125,
							"count": 1
						},
						{
							"y": 528,
							"x": 100.625,
							"count": 1
						},
						{
							"y": 528,
							"x": 125.78125,
							"count": 4
						},
						{
							"y": 528,
							"x": 201.25,
							"count": 2
						},
						{
							"y": 528,
							"x": 276.71875,
							"count": 1
						},
						{
							"y": 528,
							"x": 301.875,
							"count": 1
						},
						{
							"y": 572,
							"x": 176.09375,
							"count": 2
						},
						{
							"y": 572,
							"x": 226.40625,
							"count": 2
						},
						{
							"y": 572,
							"x": 251.5625,
							"count": 1
						},
						{
							"y": 572,
							"x": 276.71875,
							"count": 1
						},
						{
							"y": 572,
							"x": 377.34375,
							"count": 1
						},
						{
							"y": 572,
							"x": 402.5,
							"count": 1
						},
						{
							"y": 616,
							"x": 100.625,
							"count": 1
						},
						{
							"y": 616,
							"x": 176.09375,
							"count": 2
						},
						{
							"y": 616,
							"x": 201.25,
							"count": 2
						},
						{
							"y": 616,
							"x": 226.40625,
							"count": 1
						},
						{
							"y": 616,
							"x": 276.71875,
							"count": 1
						},
						{
							"y": 616,
							"x": 327.03125,
							"count": 1
						},
						{
							"y": 660,
							"x": 125.78125,
							"count": 1
						},
						{
							"y": 660,
							"x": 176.09375,
							"count": 1
						},
						{
							"y": 660,
							"x": 201.25,
							"count": 1
						},
						{
							"y": 660,
							"x": 226.40625,
							"count": 3
						},
						{
							"y": 660,
							"x": 251.5625,
							"count": 1
						},
						{
							"y": 660,
							"x": 301.875,
							"count": 1
						},
						{
							"y": 660,
							"x": 352.1875,
							"count": 1
						},
						{
							"y": 704,
							"x": 176.09375,
							"count": 1
						},
						{
							"y": 704,
							"x": 226.40625,
							"count": 2
						},
						{
							"y": 704,
							"x": 251.5625,
							"count": 3
						},
						{
							"y": 704,
							"x": 276.71875,
							"count": 2
						},
						{
							"y": 704,
							"x": 301.875,
							"count": 2
						},
						{
							"y": 704,
							"x": 327.03125,
							"count": 2
						},
						{
							"y": 704,
							"x": 402.5,
							"count": 1
						},
						{
							"y": 704,
							"x": 654.0625,
							"count": 1
						},
						{
							"y": 748,
							"x": 251.5625,
							"count": 1
						},
						{
							"y": 748,
							"x": 276.71875,
							"count": 1
						},
						{
							"y": 748,
							"x": 301.875,
							"count": 1
						},
						{
							"y": 748,
							"x": 327.03125,
							"count": 3
						},
						{
							"y": 748,
							"x": 352.1875,
							"count": 1
						},
						{
							"y": 748,
							"x": 377.34375,
							"count": 1
						},
						{
							"y": 748,
							"x": 402.5,
							"count": 1
						},
						{
							"y": 792,
							"x": 176.09375,
							"count": 1
						},
						{
							"y": 792,
							"x": 301.875,
							"count": 3
						},
						{
							"y": 792,
							"x": 327.03125,
							"count": 2
						},
						{
							"y": 792,
							"x": 352.1875,
							"count": 1
						},
						{
							"y": 792,
							"x": 377.34375,
							"count": 1
						},
						{
							"y": 792,
							"x": 402.5,
							"count": 1
						},
						{
							"y": 792,
							"x": 628.90625,
							"count": 1
						},
						{
							"y": 836,
							"x": 201.25,
							"count": 1
						},
						{
							"y": 836,
							"x": 226.40625,
							"count": 2
						},
						{
							"y": 836,
							"x": 251.5625,
							"count": 1
						},
						{
							"y": 836,
							"x": 352.1875,
							"count": 1
						},
						{
							"y": 836,
							"x": 452.8125,
							"count": 1
						},
						{
							"y": 880,
							"x": 176.09375,
							"count": 1
						},
						{
							"y": 880,
							"x": 276.71875,
							"count": 1
						},
						{
							"y": 880,
							"x": 301.875,
							"count": 1
						},
						{
							"y": 880,
							"x": 327.03125,
							"count": 1
						},
						{
							"y": 880,
							"x": 628.90625,
							"count": 1
						},
						{
							"y": 924,
							"x": 226.40625,
							"count": 1
						},
						{
							"y": 924,
							"x": 352.1875,
							"count": 1
						},
						{
							"y": 968,
							"x": 176.09375,
							"count": 1
						},
						{
							"y": 968,
							"x": 276.71875,
							"count": 2
						},
						{
							"y": 968,
							"x": 427.65625,
							"count": 1
						},
						{
							"y": 1012,
							"x": 352.1875,
							"count": 1
						},
						{
							"y": 1012,
							"x": 377.34375,
							"count": 1
						},
						{
							"y": 1012,
							"x": 578.59375,
							"count": 1
						},
						{
							"y": 1056,
							"x": 427.65625,
							"count": 1
						},
						{
							"y": 1144,
							"x": 327.03125,
							"count": 1
						},
						{
							"y": 1144,
							"x": 578.59375,
							"count": 1
						},
						{
							"y": 1188,
							"x": 528.28125,
							"count": 1
						},
						{
							"y": 1188,
							"x": 628.90625,
							"count": 1
						},
						{
							"y": 1188,
							"x": 779.84375,
							"count": 1
						},
						{
							"y": 1276,
							"x": 654.0625,
							"count": 1
						},
						{
							"y": 1320,
							"x": 276.71875,
							"count": 1
						},
						{
							"y": 1364,
							"x": 352.1875,
							"count": 1
						}
					],
					"maxCount": 93
				},
				"turnover per pocession": {
					"bins": [
						{
							"x": 0,
							"y": 0,
							"count": 7
						},
						{
							"x": 0,
							"y": 0.03125,
							"count": 6
						},
						{
							"x": 0,
							"y": 0.0625,
							"count": 19
						},
						{
							"x": 0,
							"y": 0.09375,
							"count": 26
						},
						{
							"x": 0,
							"y": 0.125,
							"count": 19
						},
						{
							"x": 0,
							"y": 0.15625,
							"count": 25
						},
						{
							"x": 0,
							"y": 0.1875,
							"count": 25
						},
						{
							"x": 0,
							"y": 0.21875,
							"count": 8
						},
						{
							"x": 0,
							"y": 0.25,
							"count": 6
						},
						{
							"x": 0,
							"y": 0.28125,
							"count": 4
						},
						{
							"x": 0,
							"y": 0.34375,
							"count": 3
						},
						{
							"x": 0,
							"y": 0.375,
							"count": 2
						},
						{
							"x": 0,
							"y": 0.5625,
							"count": 1
						},
						{
							"x": 0,
							"y": 0.96875,
							"count": 1
						},
						{
							"x": 25.15625,
							"y": 0.0625,
							"count": 6
						},
						{
							"x": 25.15625,
							"y": 0.09375,
							"count": 15
						},
						{
							"x": 25.15625,
							"y": 0.125,
							"count": 15
						},
						{
							"x": 25.15625,
							"y": 0.15625,
							"count": 10
						},
						{
							"x": 25.15625,
							"y": 0.1875,
							"count": 8
						},
						{
							"x": 25.15625,
							"y": 0.21875,
							"count": 7
						},
						{
							"x": 25.15625,
							"y": 0.25,
							"count": 1
						},
						{
							"x": 50.3125,
							"y": 0.03125,
							"count": 2
						},
						{
							"x": 50.3125,
							"y": 0.0625,
							"count": 10
						},
						{
							"x": 50.3125,
							"y": 0.09375,
							"count": 16
						},
						{
							"x": 50.3125,
							"y": 0.125,
							"count": 15
						},
						{
							"x": 50.3125,
							"y": 0.15625,
							"count": 8
						},
						{
							"x": 50.3125,
							"y": 0.1875,
							"count": 6
						},
						{
							"x": 50.3125,
							"y": 0.21875,
							"count": 5
						},
						{
							"x": 50.3125,
							"y": 0.28125,
							"count": 1
						},
						{
							"x": 75.46875,
							"y": 0.0625,
							"count": 3
						},
						{
							"x": 75.46875,
							"y": 0.09375,
							"count": 13
						},
						{
							"x": 75.46875,
							"y": 0.125,
							"count": 10
						},
						{
							"x": 75.46875,
							"y": 0.15625,
							"count": 6
						},
						{
							"x": 75.46875,
							"y": 0.1875,
							"count": 1
						},
						{
							"x": 100.625,
							"y": 0.0625,
							"count": 3
						},
						{
							"x": 100.625,
							"y": 0.09375,
							"count": 9
						},
						{
							"x": 100.625,
							"y": 0.125,
							"count": 8
						},
						{
							"x": 100.625,
							"y": 0.15625,
							"count": 7
						},
						{
							"x": 100.625,
							"y": 0.1875,
							"count": 1
						},
						{
							"x": 100.625,
							"y": 0.25,
							"count": 1
						},
						{
							"x": 125.78125,
							"y": 0.03125,
							"count": 1
						},
						{
							"x": 125.78125,
							"y": 0.0625,
							"count": 2
						},
						{
							"x": 125.78125,
							"y": 0.09375,
							"count": 11
						},
						{
							"x": 125.78125,
							"y": 0.125,
							"count": 11
						},
						{
							"x": 125.78125,
							"y": 0.15625,
							"count": 4
						},
						{
							"x": 125.78125,
							"y": 0.1875,
							"count": 1
						},
						{
							"x": 125.78125,
							"y": 0.21875,
							"count": 1
						},
						{
							"x": 150.9375,
							"y": 0.0625,
							"count": 1
						},
						{
							"x": 150.9375,
							"y": 0.09375,
							"count": 5
						},
						{
							"x": 150.9375,
							"y": 0.125,
							"count": 4
						},
						{
							"x": 150.9375,
							"y": 0.1875,
							"count": 1
						},
						{
							"x": 176.09375,
							"y": 0.0625,
							"count": 2
						},
						{
							"x": 176.09375,
							"y": 0.09375,
							"count": 10
						},
						{
							"x": 176.09375,
							"y": 0.125,
							"count": 8
						},
						{
							"x": 176.09375,
							"y": 0.15625,
							"count": 3
						},
						{
							"x": 201.25,
							"y": 0.09375,
							"count": 3
						},
						{
							"x": 201.25,
							"y": 0.125,
							"count": 6
						},
						{
							"x": 201.25,
							"y": 0.15625,
							"count": 1
						},
						{
							"x": 201.25,
							"y": 0.1875,
							"count": 1
						},
						{
							"x": 226.40625,
							"y": 0.0625,
							"count": 1
						},
						{
							"x": 226.40625,
							"y": 0.09375,
							"count": 10
						},
						{
							"x": 226.40625,
							"y": 0.125,
							"count": 3
						},
						{
							"x": 226.40625,
							"y": 0.15625,
							"count": 1
						},
						{
							"x": 251.5625,
							"y": 0.09375,
							"count": 4
						},
						{
							"x": 251.5625,
							"y": 0.125,
							"count": 5
						},
						{
							"x": 251.5625,
							"y": 0.15625,
							"count": 1
						},
						{
							"x": 276.71875,
							"y": 0.0625,
							"count": 2
						},
						{
							"x": 276.71875,
							"y": 0.09375,
							"count": 2
						},
						{
							"x": 276.71875,
							"y": 0.125,
							"count": 5
						},
						{
							"x": 276.71875,
							"y": 0.15625,
							"count": 1
						},
						{
							"x": 276.71875,
							"y": 0.1875,
							"count": 1
						},
						{
							"x": 301.875,
							"y": 0.09375,
							"count": 3
						},
						{
							"x": 301.875,
							"y": 0.125,
							"count": 6
						},
						{
							"x": 301.875,
							"y": 0.1875,
							"count": 1
						},
						{
							"x": 327.03125,
							"y": 0.0625,
							"count": 1
						},
						{
							"x": 327.03125,
							"y": 0.09375,
							"count": 8
						},
						{
							"x": 327.03125,
							"y": 0.15625,
							"count": 2
						},
						{
							"x": 352.1875,
							"y": 0.0625,
							"count": 2
						},
						{
							"x": 352.1875,
							"y": 0.09375,
							"count": 2
						},
						{
							"x": 352.1875,
							"y": 0.125,
							"count": 2
						},
						{
							"x": 352.1875,
							"y": 0.15625,
							"count": 2
						},
						{
							"x": 377.34375,
							"y": 0.125,
							"count": 3
						},
						{
							"x": 377.34375,
							"y": 0.15625,
							"count": 1
						},
						{
							"x": 402.5,
							"y": 0.09375,
							"count": 1
						},
						{
							"x": 402.5,
							"y": 0.125,
							"count": 2
						},
						{
							"x": 402.5,
							"y": 0.15625,
							"count": 1
						},
						{
							"x": 427.65625,
							"y": 0.0625,
							"count": 1
						},
						{
							"x": 427.65625,
							"y": 0.125,
							"count": 1
						},
						{
							"x": 452.8125,
							"y": 0.125,
							"count": 1
						},
						{
							"x": 528.28125,
							"y": 0.09375,
							"count": 1
						},
						{
							"x": 578.59375,
							"y": 0.125,
							"count": 2
						},
						{
							"x": 628.90625,
							"y": 0.09375,
							"count": 2
						},
						{
							"x": 628.90625,
							"y": 0.15625,
							"count": 1
						},
						{
							"x": 654.0625,
							"y": 0.09375,
							"count": 1
						},
						{
							"x": 654.0625,
							"y": 0.125,
							"count": 1
						},
						{
							"x": 779.84375,
							"y": 0.09375,
							"count": 1
						}
					],
					"x": {
						"extent": [
							0,
							805
						],
						"delta": 25.15625
					},
					"y": {
						"extent": [
							0,
							1
						],
						"delta": 0.03125
					}
				}
			},
			"2 point shots attempts": {
				"percentage of team minutes": {
					"y": {
						"extent": [
							7.2,
							79.5
						],
						"delta": 2.259375
					},
					"x": {
						"extent": [
							0,
							1408
						],
						"delta": 44
					},
					"bins": [
						{
							"y": 7.2,
							"x": 0,
							"count": 4
						},
						{
							"y": 9.459375,
							"x": 0,
							"count": 11
						},
						{
							"y": 11.71875,
							"x": 0,
							"count": 17
						},
						{
							"y": 11.71875,
							"x": 44,
							"count": 1
						},
						{
							"y": 13.978124999999999,
							"x": 0,
							"count": 17
						},
						{
							"y": 13.978124999999999,
							"x": 44,
							"count": 4
						},
						{
							"y": 13.978124999999999,
							"x": 88,
							"count": 3
						},
						{
							"y": 16.2375,
							"x": 0,
							"count": 9
						},
						{
							"y": 16.2375,
							"x": 44,
							"count": 11
						},
						{
							"y": 16.2375,
							"x": 88,
							"count": 1
						},
						{
							"y": 18.496875,
							"x": 0,
							"count": 10
						},
						{
							"y": 18.496875,
							"x": 44,
							"count": 8
						},
						{
							"y": 18.496875,
							"x": 88,
							"count": 4
						},
						{
							"y": 18.496875,
							"x": 132,
							"count": 1
						},
						{
							"y": 20.756249999999998,
							"x": 0,
							"count": 5
						},
						{
							"y": 20.756249999999998,
							"x": 44,
							"count": 7
						},
						{
							"y": 20.756249999999998,
							"x": 88,
							"count": 3
						},
						{
							"y": 20.756249999999998,
							"x": 132,
							"count": 1
						},
						{
							"y": 20.756249999999998,
							"x": 220,
							"count": 1
						},
						{
							"y": 23.015625,
							"x": 0,
							"count": 8
						},
						{
							"y": 23.015625,
							"x": 44,
							"count": 4
						},
						{
							"y": 23.015625,
							"x": 88,
							"count": 3
						},
						{
							"y": 23.015625,
							"x": 132,
							"count": 1
						},
						{
							"y": 25.275,
							"x": 0,
							"count": 4
						},
						{
							"y": 25.275,
							"x": 44,
							"count": 6
						},
						{
							"y": 25.275,
							"x": 88,
							"count": 3
						},
						{
							"y": 25.275,
							"x": 132,
							"count": 3
						},
						{
							"y": 25.275,
							"x": 176,
							"count": 1
						},
						{
							"y": 25.275,
							"x": 264,
							"count": 1
						},
						{
							"y": 25.275,
							"x": 396,
							"count": 1
						},
						{
							"y": 27.534374999999997,
							"x": 0,
							"count": 1
						},
						{
							"y": 27.534374999999997,
							"x": 44,
							"count": 5
						},
						{
							"y": 27.534374999999997,
							"x": 88,
							"count": 5
						},
						{
							"y": 27.534374999999997,
							"x": 132,
							"count": 3
						},
						{
							"y": 27.534374999999997,
							"x": 220,
							"count": 3
						},
						{
							"y": 29.79375,
							"x": 0,
							"count": 5
						},
						{
							"y": 29.79375,
							"x": 44,
							"count": 2
						},
						{
							"y": 29.79375,
							"x": 88,
							"count": 2
						},
						{
							"y": 29.79375,
							"x": 132,
							"count": 4
						},
						{
							"y": 29.79375,
							"x": 176,
							"count": 5
						},
						{
							"y": 29.79375,
							"x": 264,
							"count": 2
						},
						{
							"y": 29.79375,
							"x": 308,
							"count": 1
						},
						{
							"y": 29.79375,
							"x": 352,
							"count": 1
						},
						{
							"y": 32.053125,
							"x": 0,
							"count": 1
						},
						{
							"y": 32.053125,
							"x": 44,
							"count": 3
						},
						{
							"y": 32.053125,
							"x": 88,
							"count": 4
						},
						{
							"y": 32.053125,
							"x": 132,
							"count": 3
						},
						{
							"y": 32.053125,
							"x": 176,
							"count": 1
						},
						{
							"y": 32.053125,
							"x": 220,
							"count": 2
						},
						{
							"y": 34.3125,
							"x": 44,
							"count": 2
						},
						{
							"y": 34.3125,
							"x": 88,
							"count": 3
						},
						{
							"y": 34.3125,
							"x": 132,
							"count": 2
						},
						{
							"y": 34.3125,
							"x": 176,
							"count": 2
						},
						{
							"y": 34.3125,
							"x": 220,
							"count": 1
						},
						{
							"y": 34.3125,
							"x": 264,
							"count": 1
						},
						{
							"y": 34.3125,
							"x": 308,
							"count": 1
						},
						{
							"y": 34.3125,
							"x": 352,
							"count": 1
						},
						{
							"y": 34.3125,
							"x": 440,
							"count": 1
						},
						{
							"y": 34.3125,
							"x": 528,
							"count": 1
						},
						{
							"y": 36.571875,
							"x": 88,
							"count": 5
						},
						{
							"y": 36.571875,
							"x": 132,
							"count": 3
						},
						{
							"y": 36.571875,
							"x": 176,
							"count": 1
						},
						{
							"y": 36.571875,
							"x": 220,
							"count": 3
						},
						{
							"y": 36.571875,
							"x": 264,
							"count": 2
						},
						{
							"y": 36.571875,
							"x": 308,
							"count": 3
						},
						{
							"y": 36.571875,
							"x": 352,
							"count": 1
						},
						{
							"y": 36.571875,
							"x": 396,
							"count": 2
						},
						{
							"y": 38.83125,
							"x": 44,
							"count": 4
						},
						{
							"y": 38.83125,
							"x": 88,
							"count": 3
						},
						{
							"y": 38.83125,
							"x": 132,
							"count": 1
						},
						{
							"y": 38.83125,
							"x": 176,
							"count": 4
						},
						{
							"y": 38.83125,
							"x": 220,
							"count": 4
						},
						{
							"y": 38.83125,
							"x": 264,
							"count": 2
						},
						{
							"y": 38.83125,
							"x": 308,
							"count": 2
						},
						{
							"y": 38.83125,
							"x": 352,
							"count": 2
						},
						{
							"y": 38.83125,
							"x": 440,
							"count": 1
						},
						{
							"y": 41.090625,
							"x": 0,
							"count": 1
						},
						{
							"y": 41.090625,
							"x": 44,
							"count": 2
						},
						{
							"y": 41.090625,
							"x": 88,
							"count": 2
						},
						{
							"y": 41.090625,
							"x": 132,
							"count": 5
						},
						{
							"y": 41.090625,
							"x": 176,
							"count": 2
						},
						{
							"y": 41.090625,
							"x": 308,
							"count": 1
						},
						{
							"y": 41.090625,
							"x": 352,
							"count": 3
						},
						{
							"y": 41.090625,
							"x": 484,
							"count": 2
						},
						{
							"y": 43.35,
							"x": 0,
							"count": 1
						},
						{
							"y": 43.35,
							"x": 264,
							"count": 3
						},
						{
							"y": 43.35,
							"x": 308,
							"count": 1
						},
						{
							"y": 43.35,
							"x": 352,
							"count": 1
						},
						{
							"y": 43.35,
							"x": 396,
							"count": 1
						},
						{
							"y": 43.35,
							"x": 484,
							"count": 1
						},
						{
							"y": 43.35,
							"x": 616,
							"count": 1
						},
						{
							"y": 45.609375,
							"x": 88,
							"count": 3
						},
						{
							"y": 45.609375,
							"x": 176,
							"count": 2
						},
						{
							"y": 45.609375,
							"x": 220,
							"count": 3
						},
						{
							"y": 45.609375,
							"x": 308,
							"count": 1
						},
						{
							"y": 45.609375,
							"x": 352,
							"count": 2
						},
						{
							"y": 45.609375,
							"x": 396,
							"count": 1
						},
						{
							"y": 45.609375,
							"x": 528,
							"count": 1
						},
						{
							"y": 47.86875,
							"x": 44,
							"count": 2
						},
						{
							"y": 47.86875,
							"x": 132,
							"count": 1
						},
						{
							"y": 47.86875,
							"x": 176,
							"count": 3
						},
						{
							"y": 47.86875,
							"x": 220,
							"count": 2
						},
						{
							"y": 47.86875,
							"x": 308,
							"count": 2
						},
						{
							"y": 47.86875,
							"x": 396,
							"count": 1
						},
						{
							"y": 47.86875,
							"x": 440,
							"count": 1
						},
						{
							"y": 50.128125000000004,
							"x": 88,
							"count": 1
						},
						{
							"y": 50.128125000000004,
							"x": 132,
							"count": 2
						},
						{
							"y": 50.128125000000004,
							"x": 220,
							"count": 2
						},
						{
							"y": 50.128125000000004,
							"x": 264,
							"count": 2
						},
						{
							"y": 50.128125000000004,
							"x": 308,
							"count": 3
						},
						{
							"y": 50.128125000000004,
							"x": 396,
							"count": 1
						},
						{
							"y": 50.128125000000004,
							"x": 440,
							"count": 1
						},
						{
							"y": 50.128125000000004,
							"x": 484,
							"count": 1
						},
						{
							"y": 50.128125000000004,
							"x": 528,
							"count": 1
						},
						{
							"y": 52.3875,
							"x": 176,
							"count": 1
						},
						{
							"y": 52.3875,
							"x": 220,
							"count": 2
						},
						{
							"y": 52.3875,
							"x": 264,
							"count": 1
						},
						{
							"y": 52.3875,
							"x": 308,
							"count": 2
						},
						{
							"y": 52.3875,
							"x": 352,
							"count": 1
						},
						{
							"y": 52.3875,
							"x": 396,
							"count": 1
						},
						{
							"y": 52.3875,
							"x": 440,
							"count": 2
						},
						{
							"y": 52.3875,
							"x": 484,
							"count": 1
						},
						{
							"y": 52.3875,
							"x": 616,
							"count": 1
						},
						{
							"y": 54.646875,
							"x": 44,
							"count": 1
						},
						{
							"y": 54.646875,
							"x": 176,
							"count": 1
						},
						{
							"y": 54.646875,
							"x": 220,
							"count": 2
						},
						{
							"y": 54.646875,
							"x": 352,
							"count": 2
						},
						{
							"y": 54.646875,
							"x": 440,
							"count": 2
						},
						{
							"y": 54.646875,
							"x": 572,
							"count": 1
						},
						{
							"y": 54.646875,
							"x": 616,
							"count": 1
						},
						{
							"y": 54.646875,
							"x": 660,
							"count": 1
						},
						{
							"y": 54.646875,
							"x": 704,
							"count": 1
						},
						{
							"y": 54.646875,
							"x": 748,
							"count": 1
						},
						{
							"y": 54.646875,
							"x": 792,
							"count": 1
						},
						{
							"y": 54.646875,
							"x": 836,
							"count": 1
						},
						{
							"y": 56.90625,
							"x": 88,
							"count": 1
						},
						{
							"y": 56.90625,
							"x": 132,
							"count": 1
						},
						{
							"y": 56.90625,
							"x": 176,
							"count": 1
						},
						{
							"y": 56.90625,
							"x": 308,
							"count": 1
						},
						{
							"y": 56.90625,
							"x": 352,
							"count": 4
						},
						{
							"y": 56.90625,
							"x": 396,
							"count": 1
						},
						{
							"y": 56.90625,
							"x": 484,
							"count": 3
						},
						{
							"y": 56.90625,
							"x": 528,
							"count": 1
						},
						{
							"y": 56.90625,
							"x": 660,
							"count": 3
						},
						{
							"y": 56.90625,
							"x": 704,
							"count": 1
						},
						{
							"y": 56.90625,
							"x": 792,
							"count": 1
						},
						{
							"y": 56.90625,
							"x": 880,
							"count": 1
						},
						{
							"y": 56.90625,
							"x": 968,
							"count": 1
						},
						{
							"y": 59.165625,
							"x": 44,
							"count": 1
						},
						{
							"y": 59.165625,
							"x": 176,
							"count": 2
						},
						{
							"y": 59.165625,
							"x": 220,
							"count": 1
						},
						{
							"y": 59.165625,
							"x": 264,
							"count": 1
						},
						{
							"y": 59.165625,
							"x": 308,
							"count": 1
						},
						{
							"y": 59.165625,
							"x": 352,
							"count": 1
						},
						{
							"y": 59.165625,
							"x": 396,
							"count": 1
						},
						{
							"y": 59.165625,
							"x": 440,
							"count": 1
						},
						{
							"y": 59.165625,
							"x": 484,
							"count": 1
						},
						{
							"y": 59.165625,
							"x": 528,
							"count": 1
						},
						{
							"y": 59.165625,
							"x": 572,
							"count": 1
						},
						{
							"y": 59.165625,
							"x": 704,
							"count": 1
						},
						{
							"y": 59.165625,
							"x": 748,
							"count": 1
						},
						{
							"y": 59.165625,
							"x": 836,
							"count": 1
						},
						{
							"y": 59.165625,
							"x": 880,
							"count": 1
						},
						{
							"y": 61.425,
							"x": 220,
							"count": 1
						},
						{
							"y": 61.425,
							"x": 264,
							"count": 2
						},
						{
							"y": 61.425,
							"x": 308,
							"count": 2
						},
						{
							"y": 61.425,
							"x": 352,
							"count": 2
						},
						{
							"y": 61.425,
							"x": 396,
							"count": 2
						},
						{
							"y": 61.425,
							"x": 528,
							"count": 1
						},
						{
							"y": 61.425,
							"x": 572,
							"count": 2
						},
						{
							"y": 61.425,
							"x": 660,
							"count": 1
						},
						{
							"y": 61.425,
							"x": 704,
							"count": 2
						},
						{
							"y": 63.684375,
							"x": 220,
							"count": 2
						},
						{
							"y": 63.684375,
							"x": 352,
							"count": 5
						},
						{
							"y": 63.684375,
							"x": 440,
							"count": 2
						},
						{
							"y": 63.684375,
							"x": 528,
							"count": 2
						},
						{
							"y": 63.684375,
							"x": 616,
							"count": 2
						},
						{
							"y": 63.684375,
							"x": 660,
							"count": 1
						},
						{
							"y": 63.684375,
							"x": 704,
							"count": 2
						},
						{
							"y": 63.684375,
							"x": 748,
							"count": 1
						},
						{
							"y": 63.684375,
							"x": 792,
							"count": 1
						},
						{
							"y": 63.684375,
							"x": 836,
							"count": 1
						},
						{
							"y": 63.684375,
							"x": 924,
							"count": 1
						},
						{
							"y": 65.94375,
							"x": 88,
							"count": 1
						},
						{
							"y": 65.94375,
							"x": 264,
							"count": 1
						},
						{
							"y": 65.94375,
							"x": 352,
							"count": 1
						},
						{
							"y": 65.94375,
							"x": 396,
							"count": 2
						},
						{
							"y": 65.94375,
							"x": 440,
							"count": 1
						},
						{
							"y": 65.94375,
							"x": 528,
							"count": 2
						},
						{
							"y": 65.94375,
							"x": 572,
							"count": 2
						},
						{
							"y": 65.94375,
							"x": 704,
							"count": 1
						},
						{
							"y": 65.94375,
							"x": 748,
							"count": 2
						},
						{
							"y": 65.94375,
							"x": 792,
							"count": 1
						},
						{
							"y": 65.94375,
							"x": 836,
							"count": 1
						},
						{
							"y": 65.94375,
							"x": 880,
							"count": 1
						},
						{
							"y": 65.94375,
							"x": 924,
							"count": 1
						},
						{
							"y": 65.94375,
							"x": 968,
							"count": 1
						},
						{
							"y": 65.94375,
							"x": 1012,
							"count": 1
						},
						{
							"y": 65.94375,
							"x": 1144,
							"count": 1
						},
						{
							"y": 68.203125,
							"x": 176,
							"count": 1
						},
						{
							"y": 68.203125,
							"x": 220,
							"count": 1
						},
						{
							"y": 68.203125,
							"x": 264,
							"count": 1
						},
						{
							"y": 68.203125,
							"x": 352,
							"count": 1
						},
						{
							"y": 68.203125,
							"x": 484,
							"count": 2
						},
						{
							"y": 68.203125,
							"x": 660,
							"count": 2
						},
						{
							"y": 68.203125,
							"x": 704,
							"count": 2
						},
						{
							"y": 68.203125,
							"x": 792,
							"count": 3
						},
						{
							"y": 70.46249999999999,
							"x": 176,
							"count": 1
						},
						{
							"y": 70.46249999999999,
							"x": 396,
							"count": 1
						},
						{
							"y": 70.46249999999999,
							"x": 484,
							"count": 1
						},
						{
							"y": 70.46249999999999,
							"x": 616,
							"count": 2
						},
						{
							"y": 70.46249999999999,
							"x": 660,
							"count": 1
						},
						{
							"y": 70.46249999999999,
							"x": 704,
							"count": 2
						},
						{
							"y": 70.46249999999999,
							"x": 748,
							"count": 1
						},
						{
							"y": 70.46249999999999,
							"x": 792,
							"count": 2
						},
						{
							"y": 70.46249999999999,
							"x": 836,
							"count": 1
						},
						{
							"y": 70.46249999999999,
							"x": 880,
							"count": 1
						},
						{
							"y": 70.46249999999999,
							"x": 968,
							"count": 1
						},
						{
							"y": 70.46249999999999,
							"x": 1144,
							"count": 1
						},
						{
							"y": 70.46249999999999,
							"x": 1320,
							"count": 1
						},
						{
							"y": 72.721875,
							"x": 264,
							"count": 1
						},
						{
							"y": 72.721875,
							"x": 396,
							"count": 1
						},
						{
							"y": 72.721875,
							"x": 572,
							"count": 2
						},
						{
							"y": 72.721875,
							"x": 704,
							"count": 1
						},
						{
							"y": 72.721875,
							"x": 748,
							"count": 1
						},
						{
							"y": 72.721875,
							"x": 792,
							"count": 1
						},
						{
							"y": 72.721875,
							"x": 836,
							"count": 1
						},
						{
							"y": 72.721875,
							"x": 880,
							"count": 1
						},
						{
							"y": 72.721875,
							"x": 968,
							"count": 1
						},
						{
							"y": 72.721875,
							"x": 1012,
							"count": 1
						},
						{
							"y": 72.721875,
							"x": 1276,
							"count": 1
						},
						{
							"y": 72.721875,
							"x": 1364,
							"count": 1
						},
						{
							"y": 74.98125,
							"x": 616,
							"count": 1
						},
						{
							"y": 74.98125,
							"x": 748,
							"count": 2
						},
						{
							"y": 74.98125,
							"x": 1056,
							"count": 1
						},
						{
							"y": 77.240625,
							"x": 440,
							"count": 1
						},
						{
							"y": 77.240625,
							"x": 704,
							"count": 1
						},
						{
							"y": 77.240625,
							"x": 1012,
							"count": 1
						},
						{
							"y": 77.240625,
							"x": 1188,
							"count": 3
						}
					],
					"maxCount": 17
				},
				"free throw attempts": {
					"bins": [
						{
							"x": 0,
							"y": 0,
							"count": 93
						},
						{
							"x": 0,
							"y": 25.15625,
							"count": 1
						},
						{
							"x": 44,
							"y": 0,
							"count": 45
						},
						{
							"x": 44,
							"y": 25.15625,
							"count": 14
						},
						{
							"x": 44,
							"y": 50.3125,
							"count": 4
						},
						{
							"x": 88,
							"y": 0,
							"count": 11
						},
						{
							"x": 88,
							"y": 25.15625,
							"count": 25
						},
						{
							"x": 88,
							"y": 50.3125,
							"count": 10
						},
						{
							"x": 88,
							"y": 75.46875,
							"count": 1
						},
						{
							"x": 132,
							"y": 0,
							"count": 3
						},
						{
							"x": 132,
							"y": 25.15625,
							"count": 12
						},
						{
							"x": 132,
							"y": 50.3125,
							"count": 11
						},
						{
							"x": 132,
							"y": 75.46875,
							"count": 2
						},
						{
							"x": 132,
							"y": 100.625,
							"count": 3
						},
						{
							"x": 176,
							"y": 25.15625,
							"count": 3
						},
						{
							"x": 176,
							"y": 50.3125,
							"count": 15
						},
						{
							"x": 176,
							"y": 75.46875,
							"count": 3
						},
						{
							"x": 176,
							"y": 100.625,
							"count": 3
						},
						{
							"x": 176,
							"y": 125.78125,
							"count": 3
						},
						{
							"x": 176,
							"y": 176.09375,
							"count": 1
						},
						{
							"x": 220,
							"y": 25.15625,
							"count": 5
						},
						{
							"x": 220,
							"y": 50.3125,
							"count": 7
						},
						{
							"x": 220,
							"y": 75.46875,
							"count": 7
						},
						{
							"x": 220,
							"y": 100.625,
							"count": 6
						},
						{
							"x": 220,
							"y": 125.78125,
							"count": 2
						},
						{
							"x": 220,
							"y": 150.9375,
							"count": 2
						},
						{
							"x": 220,
							"y": 176.09375,
							"count": 1
						},
						{
							"x": 264,
							"y": 25.15625,
							"count": 1
						},
						{
							"x": 264,
							"y": 50.3125,
							"count": 3
						},
						{
							"x": 264,
							"y": 75.46875,
							"count": 7
						},
						{
							"x": 264,
							"y": 100.625,
							"count": 4
						},
						{
							"x": 264,
							"y": 125.78125,
							"count": 2
						},
						{
							"x": 264,
							"y": 176.09375,
							"count": 2
						},
						{
							"x": 264,
							"y": 201.25,
							"count": 1
						},
						{
							"x": 308,
							"y": 50.3125,
							"count": 7
						},
						{
							"x": 308,
							"y": 75.46875,
							"count": 6
						},
						{
							"x": 308,
							"y": 125.78125,
							"count": 3
						},
						{
							"x": 308,
							"y": 150.9375,
							"count": 3
						},
						{
							"x": 308,
							"y": 176.09375,
							"count": 1
						},
						{
							"x": 308,
							"y": 226.40625,
							"count": 1
						},
						{
							"x": 352,
							"y": 25.15625,
							"count": 1
						},
						{
							"x": 352,
							"y": 50.3125,
							"count": 3
						},
						{
							"x": 352,
							"y": 75.46875,
							"count": 2
						},
						{
							"x": 352,
							"y": 100.625,
							"count": 9
						},
						{
							"x": 352,
							"y": 125.78125,
							"count": 4
						},
						{
							"x": 352,
							"y": 150.9375,
							"count": 5
						},
						{
							"x": 352,
							"y": 176.09375,
							"count": 3
						},
						{
							"x": 352,
							"y": 201.25,
							"count": 1
						},
						{
							"x": 396,
							"y": 50.3125,
							"count": 1
						},
						{
							"x": 396,
							"y": 75.46875,
							"count": 3
						},
						{
							"x": 396,
							"y": 100.625,
							"count": 1
						},
						{
							"x": 396,
							"y": 125.78125,
							"count": 4
						},
						{
							"x": 396,
							"y": 176.09375,
							"count": 2
						},
						{
							"x": 396,
							"y": 201.25,
							"count": 1
						},
						{
							"x": 396,
							"y": 226.40625,
							"count": 2
						},
						{
							"x": 396,
							"y": 251.5625,
							"count": 1
						},
						{
							"x": 396,
							"y": 301.875,
							"count": 1
						},
						{
							"x": 440,
							"y": 75.46875,
							"count": 2
						},
						{
							"x": 440,
							"y": 125.78125,
							"count": 6
						},
						{
							"x": 440,
							"y": 150.9375,
							"count": 1
						},
						{
							"x": 440,
							"y": 176.09375,
							"count": 2
						},
						{
							"x": 440,
							"y": 201.25,
							"count": 1
						},
						{
							"x": 440,
							"y": 327.03125,
							"count": 1
						},
						{
							"x": 484,
							"y": 50.3125,
							"count": 1
						},
						{
							"x": 484,
							"y": 100.625,
							"count": 1
						},
						{
							"x": 484,
							"y": 125.78125,
							"count": 2
						},
						{
							"x": 484,
							"y": 176.09375,
							"count": 2
						},
						{
							"x": 484,
							"y": 201.25,
							"count": 1
						},
						{
							"x": 484,
							"y": 226.40625,
							"count": 1
						},
						{
							"x": 484,
							"y": 251.5625,
							"count": 2
						},
						{
							"x": 484,
							"y": 276.71875,
							"count": 1
						},
						{
							"x": 484,
							"y": 352.1875,
							"count": 1
						},
						{
							"x": 528,
							"y": 50.3125,
							"count": 1
						},
						{
							"x": 528,
							"y": 100.625,
							"count": 1
						},
						{
							"x": 528,
							"y": 125.78125,
							"count": 4
						},
						{
							"x": 528,
							"y": 201.25,
							"count": 2
						},
						{
							"x": 528,
							"y": 276.71875,
							"count": 1
						},
						{
							"x": 528,
							"y": 301.875,
							"count": 1
						},
						{
							"x": 572,
							"y": 176.09375,
							"count": 2
						},
						{
							"x": 572,
							"y": 226.40625,
							"count": 2
						},
						{
							"x": 572,
							"y": 251.5625,
							"count": 1
						},
						{
							"x": 572,
							"y": 276.71875,
							"count": 1
						},
						{
							"x": 572,
							"y": 377.34375,
							"count": 1
						},
						{
							"x": 572,
							"y": 402.5,
							"count": 1
						},
						{
							"x": 616,
							"y": 100.625,
							"count": 1
						},
						{
							"x": 616,
							"y": 176.09375,
							"count": 2
						},
						{
							"x": 616,
							"y": 201.25,
							"count": 2
						},
						{
							"x": 616,
							"y": 226.40625,
							"count": 1
						},
						{
							"x": 616,
							"y": 276.71875,
							"count": 1
						},
						{
							"x": 616,
							"y": 327.03125,
							"count": 1
						},
						{
							"x": 660,
							"y": 125.78125,
							"count": 1
						},
						{
							"x": 660,
							"y": 176.09375,
							"count": 1
						},
						{
							"x": 660,
							"y": 201.25,
							"count": 1
						},
						{
							"x": 660,
							"y": 226.40625,
							"count": 3
						},
						{
							"x": 660,
							"y": 251.5625,
							"count": 1
						},
						{
							"x": 660,
							"y": 301.875,
							"count": 1
						},
						{
							"x": 660,
							"y": 352.1875,
							"count": 1
						},
						{
							"x": 704,
							"y": 176.09375,
							"count": 1
						},
						{
							"x": 704,
							"y": 226.40625,
							"count": 2
						},
						{
							"x": 704,
							"y": 251.5625,
							"count": 3
						},
						{
							"x": 704,
							"y": 276.71875,
							"count": 2
						},
						{
							"x": 704,
							"y": 301.875,
							"count": 2
						},
						{
							"x": 704,
							"y": 327.03125,
							"count": 2
						},
						{
							"x": 704,
							"y": 402.5,
							"count": 1
						},
						{
							"x": 704,
							"y": 654.0625,
							"count": 1
						},
						{
							"x": 748,
							"y": 251.5625,
							"count": 1
						},
						{
							"x": 748,
							"y": 276.71875,
							"count": 1
						},
						{
							"x": 748,
							"y": 301.875,
							"count": 1
						},
						{
							"x": 748,
							"y": 327.03125,
							"count": 3
						},
						{
							"x": 748,
							"y": 352.1875,
							"count": 1
						},
						{
							"x": 748,
							"y": 377.34375,
							"count": 1
						},
						{
							"x": 748,
							"y": 402.5,
							"count": 1
						},
						{
							"x": 792,
							"y": 176.09375,
							"count": 1
						},
						{
							"x": 792,
							"y": 301.875,
							"count": 3
						},
						{
							"x": 792,
							"y": 327.03125,
							"count": 2
						},
						{
							"x": 792,
							"y": 352.1875,
							"count": 1
						},
						{
							"x": 792,
							"y": 377.34375,
							"count": 1
						},
						{
							"x": 792,
							"y": 402.5,
							"count": 1
						},
						{
							"x": 792,
							"y": 628.90625,
							"count": 1
						},
						{
							"x": 836,
							"y": 201.25,
							"count": 1
						},
						{
							"x": 836,
							"y": 226.40625,
							"count": 2
						},
						{
							"x": 836,
							"y": 251.5625,
							"count": 1
						},
						{
							"x": 836,
							"y": 352.1875,
							"count": 1
						},
						{
							"x": 836,
							"y": 452.8125,
							"count": 1
						},
						{
							"x": 880,
							"y": 176.09375,
							"count": 1
						},
						{
							"x": 880,
							"y": 276.71875,
							"count": 1
						},
						{
							"x": 880,
							"y": 301.875,
							"count": 1
						},
						{
							"x": 880,
							"y": 327.03125,
							"count": 1
						},
						{
							"x": 880,
							"y": 628.90625,
							"count": 1
						},
						{
							"x": 924,
							"y": 226.40625,
							"count": 1
						},
						{
							"x": 924,
							"y": 352.1875,
							"count": 1
						},
						{
							"x": 968,
							"y": 176.09375,
							"count": 1
						},
						{
							"x": 968,
							"y": 276.71875,
							"count": 2
						},
						{
							"x": 968,
							"y": 427.65625,
							"count": 1
						},
						{
							"x": 1012,
							"y": 352.1875,
							"count": 1
						},
						{
							"x": 1012,
							"y": 377.34375,
							"count": 1
						},
						{
							"x": 1012,
							"y": 578.59375,
							"count": 1
						},
						{
							"x": 1056,
							"y": 427.65625,
							"count": 1
						},
						{
							"x": 1144,
							"y": 327.03125,
							"count": 1
						},
						{
							"x": 1144,
							"y": 578.59375,
							"count": 1
						},
						{
							"x": 1188,
							"y": 528.28125,
							"count": 1
						},
						{
							"x": 1188,
							"y": 628.90625,
							"count": 1
						},
						{
							"x": 1188,
							"y": 779.84375,
							"count": 1
						},
						{
							"x": 1276,
							"y": 654.0625,
							"count": 1
						},
						{
							"x": 1320,
							"y": 276.71875,
							"count": 1
						},
						{
							"x": 1364,
							"y": 352.1875,
							"count": 1
						}
					],
					"x": {
						"extent": [
							0,
							1408
						],
						"delta": 44
					},
					"y": {
						"extent": [
							0,
							805
						],
						"delta": 25.15625
					}
				}
			},
			"percentage of team minutes": {
				"percentage of team assists": {
					"y": {
						"extent": [
							0,
							49.2
						],
						"delta": 1.5375
					},
					"x": {
						"extent": [
							7.2,
							79.5
						],
						"delta": 2.259375
					},
					"bins": [
						{
							"y": 0,
							"x": 7.2,
							"count": 4
						},
						{
							"y": 0,
							"x": 9.459375,
							"count": 1
						},
						{
							"y": 0,
							"x": 11.71875,
							"count": 1
						},
						{
							"y": 0,
							"x": 13.978124999999999,
							"count": 2
						},
						{
							"y": 0,
							"x": 16.2375,
							"count": 4
						},
						{
							"y": 0,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 0,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 0,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0,
							"x": 27.534374999999997,
							"count": 3
						},
						{
							"y": 1.5375,
							"x": 13.978124999999999,
							"count": 2
						},
						{
							"y": 1.5375,
							"x": 16.2375,
							"count": 1
						},
						{
							"y": 1.5375,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 1.5375,
							"x": 25.275,
							"count": 2
						},
						{
							"y": 1.5375,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 1.5375,
							"x": 29.79375,
							"count": 2
						},
						{
							"y": 1.5375,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 1.5375,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 1.5375,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 3.075,
							"x": 11.71875,
							"count": 1
						},
						{
							"y": 3.075,
							"x": 13.978124999999999,
							"count": 6
						},
						{
							"y": 3.075,
							"x": 18.496875,
							"count": 6
						},
						{
							"y": 3.075,
							"x": 20.756249999999998,
							"count": 2
						},
						{
							"y": 3.075,
							"x": 25.275,
							"count": 3
						},
						{
							"y": 3.075,
							"x": 27.534374999999997,
							"count": 3
						},
						{
							"y": 3.075,
							"x": 29.79375,
							"count": 5
						},
						{
							"y": 3.075,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 3.075,
							"x": 41.090625,
							"count": 2
						},
						{
							"y": 3.075,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 3.075,
							"x": 50.128125000000004,
							"count": 2
						},
						{
							"y": 3.075,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 3.075,
							"x": 63.684375,
							"count": 2
						},
						{
							"y": 3.075,
							"x": 70.46249999999999,
							"count": 2
						},
						{
							"y": 4.612500000000001,
							"x": 9.459375,
							"count": 1
						},
						{
							"y": 4.612500000000001,
							"x": 11.71875,
							"count": 3
						},
						{
							"y": 4.612500000000001,
							"x": 13.978124999999999,
							"count": 2
						},
						{
							"y": 4.612500000000001,
							"x": 16.2375,
							"count": 3
						},
						{
							"y": 4.612500000000001,
							"x": 18.496875,
							"count": 2
						},
						{
							"y": 4.612500000000001,
							"x": 20.756249999999998,
							"count": 4
						},
						{
							"y": 4.612500000000001,
							"x": 23.015625,
							"count": 4
						},
						{
							"y": 4.612500000000001,
							"x": 25.275,
							"count": 4
						},
						{
							"y": 4.612500000000001,
							"x": 27.534374999999997,
							"count": 2
						},
						{
							"y": 4.612500000000001,
							"x": 29.79375,
							"count": 4
						},
						{
							"y": 4.612500000000001,
							"x": 34.3125,
							"count": 1
						},
						{
							"y": 4.612500000000001,
							"x": 36.571875,
							"count": 3
						},
						{
							"y": 4.612500000000001,
							"x": 38.83125,
							"count": 3
						},
						{
							"y": 4.612500000000001,
							"x": 41.090625,
							"count": 3
						},
						{
							"y": 4.612500000000001,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 4.612500000000001,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 4.612500000000001,
							"x": 47.86875,
							"count": 3
						},
						{
							"y": 4.612500000000001,
							"x": 50.128125000000004,
							"count": 2
						},
						{
							"y": 4.612500000000001,
							"x": 52.3875,
							"count": 2
						},
						{
							"y": 4.612500000000001,
							"x": 54.646875,
							"count": 1
						},
						{
							"y": 4.612500000000001,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 4.612500000000001,
							"x": 61.425,
							"count": 3
						},
						{
							"y": 4.612500000000001,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 4.612500000000001,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 6.15,
							"x": 11.71875,
							"count": 3
						},
						{
							"y": 6.15,
							"x": 13.978124999999999,
							"count": 3
						},
						{
							"y": 6.15,
							"x": 16.2375,
							"count": 3
						},
						{
							"y": 6.15,
							"x": 18.496875,
							"count": 3
						},
						{
							"y": 6.15,
							"x": 20.756249999999998,
							"count": 2
						},
						{
							"y": 6.15,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 6.15,
							"x": 25.275,
							"count": 2
						},
						{
							"y": 6.15,
							"x": 27.534374999999997,
							"count": 2
						},
						{
							"y": 6.15,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 6.15,
							"x": 32.053125,
							"count": 2
						},
						{
							"y": 6.15,
							"x": 34.3125,
							"count": 4
						},
						{
							"y": 6.15,
							"x": 36.571875,
							"count": 2
						},
						{
							"y": 6.15,
							"x": 38.83125,
							"count": 2
						},
						{
							"y": 6.15,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 6.15,
							"x": 45.609375,
							"count": 2
						},
						{
							"y": 6.15,
							"x": 47.86875,
							"count": 2
						},
						{
							"y": 6.15,
							"x": 54.646875,
							"count": 5
						},
						{
							"y": 6.15,
							"x": 56.90625,
							"count": 3
						},
						{
							"y": 6.15,
							"x": 59.165625,
							"count": 2
						},
						{
							"y": 6.15,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 6.15,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 7.6875,
							"x": 11.71875,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 13.978124999999999,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 16.2375,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 18.496875,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 20.756249999999998,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 23.015625,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 25.275,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 7.6875,
							"x": 29.79375,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 32.053125,
							"count": 5
						},
						{
							"y": 7.6875,
							"x": 34.3125,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 36.571875,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 38.83125,
							"count": 5
						},
						{
							"y": 7.6875,
							"x": 41.090625,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 43.35,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 45.609375,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 47.86875,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 50.128125000000004,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 52.3875,
							"count": 3
						},
						{
							"y": 7.6875,
							"x": 54.646875,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 56.90625,
							"count": 4
						},
						{
							"y": 7.6875,
							"x": 59.165625,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 61.425,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 63.684375,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 65.94375,
							"count": 2
						},
						{
							"y": 7.6875,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 7.6875,
							"x": 70.46249999999999,
							"count": 2
						},
						{
							"y": 9.225000000000001,
							"x": 13.978124999999999,
							"count": 3
						},
						{
							"y": 9.225000000000001,
							"x": 16.2375,
							"count": 2
						},
						{
							"y": 9.225000000000001,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 9.225000000000001,
							"x": 20.756249999999998,
							"count": 2
						},
						{
							"y": 9.225000000000001,
							"x": 23.015625,
							"count": 2
						},
						{
							"y": 9.225000000000001,
							"x": 25.275,
							"count": 1
						},
						{
							"y": 9.225000000000001,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 9.225000000000001,
							"x": 34.3125,
							"count": 3
						},
						{
							"y": 9.225000000000001,
							"x": 36.571875,
							"count": 2
						},
						{
							"y": 9.225000000000001,
							"x": 38.83125,
							"count": 2
						},
						{
							"y": 9.225000000000001,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 9.225000000000001,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 9.225000000000001,
							"x": 52.3875,
							"count": 2
						},
						{
							"y": 9.225000000000001,
							"x": 54.646875,
							"count": 3
						},
						{
							"y": 9.225000000000001,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 9.225000000000001,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 9.225000000000001,
							"x": 63.684375,
							"count": 3
						},
						{
							"y": 9.225000000000001,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 9.225000000000001,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 9.225000000000001,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 10.762500000000001,
							"x": 9.459375,
							"count": 2
						},
						{
							"y": 10.762500000000001,
							"x": 11.71875,
							"count": 3
						},
						{
							"y": 10.762500000000001,
							"x": 18.496875,
							"count": 2
						},
						{
							"y": 10.762500000000001,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 10.762500000000001,
							"x": 25.275,
							"count": 1
						},
						{
							"y": 10.762500000000001,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 10.762500000000001,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 10.762500000000001,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 10.762500000000001,
							"x": 34.3125,
							"count": 4
						},
						{
							"y": 10.762500000000001,
							"x": 36.571875,
							"count": 2
						},
						{
							"y": 10.762500000000001,
							"x": 38.83125,
							"count": 3
						},
						{
							"y": 10.762500000000001,
							"x": 41.090625,
							"count": 3
						},
						{
							"y": 10.762500000000001,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 10.762500000000001,
							"x": 45.609375,
							"count": 2
						},
						{
							"y": 10.762500000000001,
							"x": 47.86875,
							"count": 1
						},
						{
							"y": 10.762500000000001,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 10.762500000000001,
							"x": 52.3875,
							"count": 2
						},
						{
							"y": 10.762500000000001,
							"x": 54.646875,
							"count": 2
						},
						{
							"y": 10.762500000000001,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 10.762500000000001,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 10.762500000000001,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 10.762500000000001,
							"x": 68.203125,
							"count": 3
						},
						{
							"y": 10.762500000000001,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 10.762500000000001,
							"x": 77.240625,
							"count": 1
						},
						{
							"y": 12.3,
							"x": 9.459375,
							"count": 3
						},
						{
							"y": 12.3,
							"x": 11.71875,
							"count": 2
						},
						{
							"y": 12.3,
							"x": 13.978124999999999,
							"count": 1
						},
						{
							"y": 12.3,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 12.3,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 12.3,
							"x": 36.571875,
							"count": 2
						},
						{
							"y": 12.3,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 12.3,
							"x": 41.090625,
							"count": 2
						},
						{
							"y": 12.3,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 12.3,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 12.3,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 12.3,
							"x": 54.646875,
							"count": 2
						},
						{
							"y": 12.3,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 12.3,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 12.3,
							"x": 63.684375,
							"count": 2
						},
						{
							"y": 12.3,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 12.3,
							"x": 70.46249999999999,
							"count": 2
						},
						{
							"y": 12.3,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 13.8375,
							"x": 9.459375,
							"count": 2
						},
						{
							"y": 13.8375,
							"x": 13.978124999999999,
							"count": 1
						},
						{
							"y": 13.8375,
							"x": 20.756249999999998,
							"count": 2
						},
						{
							"y": 13.8375,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 13.8375,
							"x": 25.275,
							"count": 1
						},
						{
							"y": 13.8375,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 13.8375,
							"x": 36.571875,
							"count": 1
						},
						{
							"y": 13.8375,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 13.8375,
							"x": 47.86875,
							"count": 1
						},
						{
							"y": 13.8375,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 13.8375,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 13.8375,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 13.8375,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 13.8375,
							"x": 65.94375,
							"count": 4
						},
						{
							"y": 13.8375,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 15.375,
							"x": 11.71875,
							"count": 1
						},
						{
							"y": 15.375,
							"x": 16.2375,
							"count": 1
						},
						{
							"y": 15.375,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 15.375,
							"x": 25.275,
							"count": 1
						},
						{
							"y": 15.375,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 15.375,
							"x": 36.571875,
							"count": 1
						},
						{
							"y": 15.375,
							"x": 41.090625,
							"count": 1
						},
						{
							"y": 15.375,
							"x": 47.86875,
							"count": 1
						},
						{
							"y": 15.375,
							"x": 50.128125000000004,
							"count": 2
						},
						{
							"y": 15.375,
							"x": 59.165625,
							"count": 2
						},
						{
							"y": 15.375,
							"x": 63.684375,
							"count": 2
						},
						{
							"y": 15.375,
							"x": 68.203125,
							"count": 3
						},
						{
							"y": 15.375,
							"x": 77.240625,
							"count": 1
						},
						{
							"y": 16.9125,
							"x": 23.015625,
							"count": 2
						},
						{
							"y": 16.9125,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 16.9125,
							"x": 29.79375,
							"count": 2
						},
						{
							"y": 16.9125,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 16.9125,
							"x": 36.571875,
							"count": 1
						},
						{
							"y": 16.9125,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 16.9125,
							"x": 56.90625,
							"count": 2
						},
						{
							"y": 16.9125,
							"x": 61.425,
							"count": 2
						},
						{
							"y": 16.9125,
							"x": 63.684375,
							"count": 2
						},
						{
							"y": 16.9125,
							"x": 65.94375,
							"count": 2
						},
						{
							"y": 16.9125,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 16.9125,
							"x": 70.46249999999999,
							"count": 2
						},
						{
							"y": 16.9125,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 16.9125,
							"x": 74.98125,
							"count": 1
						},
						{
							"y": 18.450000000000003,
							"x": 9.459375,
							"count": 2
						},
						{
							"y": 18.450000000000003,
							"x": 13.978124999999999,
							"count": 1
						},
						{
							"y": 18.450000000000003,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 18.450000000000003,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 18.450000000000003,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 18.450000000000003,
							"x": 41.090625,
							"count": 1
						},
						{
							"y": 18.450000000000003,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 18.450000000000003,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 18.450000000000003,
							"x": 72.721875,
							"count": 2
						},
						{
							"y": 18.450000000000003,
							"x": 77.240625,
							"count": 1
						},
						{
							"y": 19.9875,
							"x": 16.2375,
							"count": 1
						},
						{
							"y": 19.9875,
							"x": 18.496875,
							"count": 2
						},
						{
							"y": 19.9875,
							"x": 38.83125,
							"count": 2
						},
						{
							"y": 19.9875,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 19.9875,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 19.9875,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 21.525000000000002,
							"x": 11.71875,
							"count": 1
						},
						{
							"y": 21.525000000000002,
							"x": 13.978124999999999,
							"count": 1
						},
						{
							"y": 21.525000000000002,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 21.525000000000002,
							"x": 25.275,
							"count": 1
						},
						{
							"y": 21.525000000000002,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 21.525000000000002,
							"x": 34.3125,
							"count": 1
						},
						{
							"y": 21.525000000000002,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 21.525000000000002,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 21.525000000000002,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 21.525000000000002,
							"x": 56.90625,
							"count": 2
						},
						{
							"y": 21.525000000000002,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 21.525000000000002,
							"x": 61.425,
							"count": 3
						},
						{
							"y": 21.525000000000002,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 21.525000000000002,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 23.0625,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 23.0625,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 23.0625,
							"x": 47.86875,
							"count": 1
						},
						{
							"y": 23.0625,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 23.0625,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 23.0625,
							"x": 74.98125,
							"count": 1
						},
						{
							"y": 24.6,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 24.6,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 24.6,
							"x": 36.571875,
							"count": 1
						},
						{
							"y": 24.6,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 24.6,
							"x": 41.090625,
							"count": 1
						},
						{
							"y": 24.6,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 24.6,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 24.6,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 24.6,
							"x": 74.98125,
							"count": 1
						},
						{
							"y": 26.137500000000003,
							"x": 16.2375,
							"count": 3
						},
						{
							"y": 26.137500000000003,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 26.137500000000003,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 26.137500000000003,
							"x": 47.86875,
							"count": 1
						},
						{
							"y": 26.137500000000003,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 26.137500000000003,
							"x": 65.94375,
							"count": 2
						},
						{
							"y": 26.137500000000003,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 26.137500000000003,
							"x": 77.240625,
							"count": 2
						},
						{
							"y": 27.675,
							"x": 41.090625,
							"count": 1
						},
						{
							"y": 27.675,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 27.675,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 27.675,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 27.675,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 29.212500000000002,
							"x": 25.275,
							"count": 1
						},
						{
							"y": 29.212500000000002,
							"x": 36.571875,
							"count": 1
						},
						{
							"y": 29.212500000000002,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 29.212500000000002,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 29.212500000000002,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 29.212500000000002,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 29.212500000000002,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 29.212500000000002,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 29.212500000000002,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 30.75,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 30.75,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 30.75,
							"x": 41.090625,
							"count": 1
						},
						{
							"y": 30.75,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 30.75,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 30.75,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 30.75,
							"x": 77.240625,
							"count": 1
						},
						{
							"y": 32.2875,
							"x": 36.571875,
							"count": 2
						},
						{
							"y": 32.2875,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 32.2875,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 32.2875,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 32.2875,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 33.825,
							"x": 11.71875,
							"count": 1
						},
						{
							"y": 33.825,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 33.825,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 33.825,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 33.825,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 33.825,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 33.825,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 33.825,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 36.900000000000006,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 36.900000000000006,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 38.4375,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 39.975,
							"x": 41.090625,
							"count": 1
						},
						{
							"y": 39.975,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 39.975,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 39.975,
							"x": 74.98125,
							"count": 1
						},
						{
							"y": 41.5125,
							"x": 16.2375,
							"count": 1
						},
						{
							"y": 44.587500000000006,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 47.6625,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 47.6625,
							"x": 70.46249999999999,
							"count": 1
						}
					],
					"maxCount": 6
				},
				"2 point shots attempts": {
					"bins": [
						{
							"x": 7.2,
							"y": 0,
							"count": 4
						},
						{
							"x": 9.459375,
							"y": 0,
							"count": 11
						},
						{
							"x": 11.71875,
							"y": 0,
							"count": 17
						},
						{
							"x": 11.71875,
							"y": 44,
							"count": 1
						},
						{
							"x": 13.978124999999999,
							"y": 0,
							"count": 17
						},
						{
							"x": 13.978124999999999,
							"y": 44,
							"count": 4
						},
						{
							"x": 13.978124999999999,
							"y": 88,
							"count": 3
						},
						{
							"x": 16.2375,
							"y": 0,
							"count": 9
						},
						{
							"x": 16.2375,
							"y": 44,
							"count": 11
						},
						{
							"x": 16.2375,
							"y": 88,
							"count": 1
						},
						{
							"x": 18.496875,
							"y": 0,
							"count": 10
						},
						{
							"x": 18.496875,
							"y": 44,
							"count": 8
						},
						{
							"x": 18.496875,
							"y": 88,
							"count": 4
						},
						{
							"x": 18.496875,
							"y": 132,
							"count": 1
						},
						{
							"x": 20.756249999999998,
							"y": 0,
							"count": 5
						},
						{
							"x": 20.756249999999998,
							"y": 44,
							"count": 7
						},
						{
							"x": 20.756249999999998,
							"y": 88,
							"count": 3
						},
						{
							"x": 20.756249999999998,
							"y": 132,
							"count": 1
						},
						{
							"x": 20.756249999999998,
							"y": 220,
							"count": 1
						},
						{
							"x": 23.015625,
							"y": 0,
							"count": 8
						},
						{
							"x": 23.015625,
							"y": 44,
							"count": 4
						},
						{
							"x": 23.015625,
							"y": 88,
							"count": 3
						},
						{
							"x": 23.015625,
							"y": 132,
							"count": 1
						},
						{
							"x": 25.275,
							"y": 0,
							"count": 4
						},
						{
							"x": 25.275,
							"y": 44,
							"count": 6
						},
						{
							"x": 25.275,
							"y": 88,
							"count": 3
						},
						{
							"x": 25.275,
							"y": 132,
							"count": 3
						},
						{
							"x": 25.275,
							"y": 176,
							"count": 1
						},
						{
							"x": 25.275,
							"y": 264,
							"count": 1
						},
						{
							"x": 25.275,
							"y": 396,
							"count": 1
						},
						{
							"x": 27.534374999999997,
							"y": 0,
							"count": 1
						},
						{
							"x": 27.534374999999997,
							"y": 44,
							"count": 5
						},
						{
							"x": 27.534374999999997,
							"y": 88,
							"count": 5
						},
						{
							"x": 27.534374999999997,
							"y": 132,
							"count": 3
						},
						{
							"x": 27.534374999999997,
							"y": 220,
							"count": 3
						},
						{
							"x": 29.79375,
							"y": 0,
							"count": 5
						},
						{
							"x": 29.79375,
							"y": 44,
							"count": 2
						},
						{
							"x": 29.79375,
							"y": 88,
							"count": 2
						},
						{
							"x": 29.79375,
							"y": 132,
							"count": 4
						},
						{
							"x": 29.79375,
							"y": 176,
							"count": 5
						},
						{
							"x": 29.79375,
							"y": 264,
							"count": 2
						},
						{
							"x": 29.79375,
							"y": 308,
							"count": 1
						},
						{
							"x": 29.79375,
							"y": 352,
							"count": 1
						},
						{
							"x": 32.053125,
							"y": 0,
							"count": 1
						},
						{
							"x": 32.053125,
							"y": 44,
							"count": 3
						},
						{
							"x": 32.053125,
							"y": 88,
							"count": 4
						},
						{
							"x": 32.053125,
							"y": 132,
							"count": 3
						},
						{
							"x": 32.053125,
							"y": 176,
							"count": 1
						},
						{
							"x": 32.053125,
							"y": 220,
							"count": 2
						},
						{
							"x": 34.3125,
							"y": 44,
							"count": 2
						},
						{
							"x": 34.3125,
							"y": 88,
							"count": 3
						},
						{
							"x": 34.3125,
							"y": 132,
							"count": 2
						},
						{
							"x": 34.3125,
							"y": 176,
							"count": 2
						},
						{
							"x": 34.3125,
							"y": 220,
							"count": 1
						},
						{
							"x": 34.3125,
							"y": 264,
							"count": 1
						},
						{
							"x": 34.3125,
							"y": 308,
							"count": 1
						},
						{
							"x": 34.3125,
							"y": 352,
							"count": 1
						},
						{
							"x": 34.3125,
							"y": 440,
							"count": 1
						},
						{
							"x": 34.3125,
							"y": 528,
							"count": 1
						},
						{
							"x": 36.571875,
							"y": 88,
							"count": 5
						},
						{
							"x": 36.571875,
							"y": 132,
							"count": 3
						},
						{
							"x": 36.571875,
							"y": 176,
							"count": 1
						},
						{
							"x": 36.571875,
							"y": 220,
							"count": 3
						},
						{
							"x": 36.571875,
							"y": 264,
							"count": 2
						},
						{
							"x": 36.571875,
							"y": 308,
							"count": 3
						},
						{
							"x": 36.571875,
							"y": 352,
							"count": 1
						},
						{
							"x": 36.571875,
							"y": 396,
							"count": 2
						},
						{
							"x": 38.83125,
							"y": 44,
							"count": 4
						},
						{
							"x": 38.83125,
							"y": 88,
							"count": 3
						},
						{
							"x": 38.83125,
							"y": 132,
							"count": 1
						},
						{
							"x": 38.83125,
							"y": 176,
							"count": 4
						},
						{
							"x": 38.83125,
							"y": 220,
							"count": 4
						},
						{
							"x": 38.83125,
							"y": 264,
							"count": 2
						},
						{
							"x": 38.83125,
							"y": 308,
							"count": 2
						},
						{
							"x": 38.83125,
							"y": 352,
							"count": 2
						},
						{
							"x": 38.83125,
							"y": 440,
							"count": 1
						},
						{
							"x": 41.090625,
							"y": 0,
							"count": 1
						},
						{
							"x": 41.090625,
							"y": 44,
							"count": 2
						},
						{
							"x": 41.090625,
							"y": 88,
							"count": 2
						},
						{
							"x": 41.090625,
							"y": 132,
							"count": 5
						},
						{
							"x": 41.090625,
							"y": 176,
							"count": 2
						},
						{
							"x": 41.090625,
							"y": 308,
							"count": 1
						},
						{
							"x": 41.090625,
							"y": 352,
							"count": 3
						},
						{
							"x": 41.090625,
							"y": 484,
							"count": 2
						},
						{
							"x": 43.35,
							"y": 0,
							"count": 1
						},
						{
							"x": 43.35,
							"y": 264,
							"count": 3
						},
						{
							"x": 43.35,
							"y": 308,
							"count": 1
						},
						{
							"x": 43.35,
							"y": 352,
							"count": 1
						},
						{
							"x": 43.35,
							"y": 396,
							"count": 1
						},
						{
							"x": 43.35,
							"y": 484,
							"count": 1
						},
						{
							"x": 43.35,
							"y": 616,
							"count": 1
						},
						{
							"x": 45.609375,
							"y": 88,
							"count": 3
						},
						{
							"x": 45.609375,
							"y": 176,
							"count": 2
						},
						{
							"x": 45.609375,
							"y": 220,
							"count": 3
						},
						{
							"x": 45.609375,
							"y": 308,
							"count": 1
						},
						{
							"x": 45.609375,
							"y": 352,
							"count": 2
						},
						{
							"x": 45.609375,
							"y": 396,
							"count": 1
						},
						{
							"x": 45.609375,
							"y": 528,
							"count": 1
						},
						{
							"x": 47.86875,
							"y": 44,
							"count": 2
						},
						{
							"x": 47.86875,
							"y": 132,
							"count": 1
						},
						{
							"x": 47.86875,
							"y": 176,
							"count": 3
						},
						{
							"x": 47.86875,
							"y": 220,
							"count": 2
						},
						{
							"x": 47.86875,
							"y": 308,
							"count": 2
						},
						{
							"x": 47.86875,
							"y": 396,
							"count": 1
						},
						{
							"x": 47.86875,
							"y": 440,
							"count": 1
						},
						{
							"x": 50.128125000000004,
							"y": 88,
							"count": 1
						},
						{
							"x": 50.128125000000004,
							"y": 132,
							"count": 2
						},
						{
							"x": 50.128125000000004,
							"y": 220,
							"count": 2
						},
						{
							"x": 50.128125000000004,
							"y": 264,
							"count": 2
						},
						{
							"x": 50.128125000000004,
							"y": 308,
							"count": 3
						},
						{
							"x": 50.128125000000004,
							"y": 396,
							"count": 1
						},
						{
							"x": 50.128125000000004,
							"y": 440,
							"count": 1
						},
						{
							"x": 50.128125000000004,
							"y": 484,
							"count": 1
						},
						{
							"x": 50.128125000000004,
							"y": 528,
							"count": 1
						},
						{
							"x": 52.3875,
							"y": 176,
							"count": 1
						},
						{
							"x": 52.3875,
							"y": 220,
							"count": 2
						},
						{
							"x": 52.3875,
							"y": 264,
							"count": 1
						},
						{
							"x": 52.3875,
							"y": 308,
							"count": 2
						},
						{
							"x": 52.3875,
							"y": 352,
							"count": 1
						},
						{
							"x": 52.3875,
							"y": 396,
							"count": 1
						},
						{
							"x": 52.3875,
							"y": 440,
							"count": 2
						},
						{
							"x": 52.3875,
							"y": 484,
							"count": 1
						},
						{
							"x": 52.3875,
							"y": 616,
							"count": 1
						},
						{
							"x": 54.646875,
							"y": 44,
							"count": 1
						},
						{
							"x": 54.646875,
							"y": 176,
							"count": 1
						},
						{
							"x": 54.646875,
							"y": 220,
							"count": 2
						},
						{
							"x": 54.646875,
							"y": 352,
							"count": 2
						},
						{
							"x": 54.646875,
							"y": 440,
							"count": 2
						},
						{
							"x": 54.646875,
							"y": 572,
							"count": 1
						},
						{
							"x": 54.646875,
							"y": 616,
							"count": 1
						},
						{
							"x": 54.646875,
							"y": 660,
							"count": 1
						},
						{
							"x": 54.646875,
							"y": 704,
							"count": 1
						},
						{
							"x": 54.646875,
							"y": 748,
							"count": 1
						},
						{
							"x": 54.646875,
							"y": 792,
							"count": 1
						},
						{
							"x": 54.646875,
							"y": 836,
							"count": 1
						},
						{
							"x": 56.90625,
							"y": 88,
							"count": 1
						},
						{
							"x": 56.90625,
							"y": 132,
							"count": 1
						},
						{
							"x": 56.90625,
							"y": 176,
							"count": 1
						},
						{
							"x": 56.90625,
							"y": 308,
							"count": 1
						},
						{
							"x": 56.90625,
							"y": 352,
							"count": 4
						},
						{
							"x": 56.90625,
							"y": 396,
							"count": 1
						},
						{
							"x": 56.90625,
							"y": 484,
							"count": 3
						},
						{
							"x": 56.90625,
							"y": 528,
							"count": 1
						},
						{
							"x": 56.90625,
							"y": 660,
							"count": 3
						},
						{
							"x": 56.90625,
							"y": 704,
							"count": 1
						},
						{
							"x": 56.90625,
							"y": 792,
							"count": 1
						},
						{
							"x": 56.90625,
							"y": 880,
							"count": 1
						},
						{
							"x": 56.90625,
							"y": 968,
							"count": 1
						},
						{
							"x": 59.165625,
							"y": 44,
							"count": 1
						},
						{
							"x": 59.165625,
							"y": 176,
							"count": 2
						},
						{
							"x": 59.165625,
							"y": 220,
							"count": 1
						},
						{
							"x": 59.165625,
							"y": 264,
							"count": 1
						},
						{
							"x": 59.165625,
							"y": 308,
							"count": 1
						},
						{
							"x": 59.165625,
							"y": 352,
							"count": 1
						},
						{
							"x": 59.165625,
							"y": 396,
							"count": 1
						},
						{
							"x": 59.165625,
							"y": 440,
							"count": 1
						},
						{
							"x": 59.165625,
							"y": 484,
							"count": 1
						},
						{
							"x": 59.165625,
							"y": 528,
							"count": 1
						},
						{
							"x": 59.165625,
							"y": 572,
							"count": 1
						},
						{
							"x": 59.165625,
							"y": 704,
							"count": 1
						},
						{
							"x": 59.165625,
							"y": 748,
							"count": 1
						},
						{
							"x": 59.165625,
							"y": 836,
							"count": 1
						},
						{
							"x": 59.165625,
							"y": 880,
							"count": 1
						},
						{
							"x": 61.425,
							"y": 220,
							"count": 1
						},
						{
							"x": 61.425,
							"y": 264,
							"count": 2
						},
						{
							"x": 61.425,
							"y": 308,
							"count": 2
						},
						{
							"x": 61.425,
							"y": 352,
							"count": 2
						},
						{
							"x": 61.425,
							"y": 396,
							"count": 2
						},
						{
							"x": 61.425,
							"y": 528,
							"count": 1
						},
						{
							"x": 61.425,
							"y": 572,
							"count": 2
						},
						{
							"x": 61.425,
							"y": 660,
							"count": 1
						},
						{
							"x": 61.425,
							"y": 704,
							"count": 2
						},
						{
							"x": 63.684375,
							"y": 220,
							"count": 2
						},
						{
							"x": 63.684375,
							"y": 352,
							"count": 5
						},
						{
							"x": 63.684375,
							"y": 440,
							"count": 2
						},
						{
							"x": 63.684375,
							"y": 528,
							"count": 2
						},
						{
							"x": 63.684375,
							"y": 616,
							"count": 2
						},
						{
							"x": 63.684375,
							"y": 660,
							"count": 1
						},
						{
							"x": 63.684375,
							"y": 704,
							"count": 2
						},
						{
							"x": 63.684375,
							"y": 748,
							"count": 1
						},
						{
							"x": 63.684375,
							"y": 792,
							"count": 1
						},
						{
							"x": 63.684375,
							"y": 836,
							"count": 1
						},
						{
							"x": 63.684375,
							"y": 924,
							"count": 1
						},
						{
							"x": 65.94375,
							"y": 88,
							"count": 1
						},
						{
							"x": 65.94375,
							"y": 264,
							"count": 1
						},
						{
							"x": 65.94375,
							"y": 352,
							"count": 1
						},
						{
							"x": 65.94375,
							"y": 396,
							"count": 2
						},
						{
							"x": 65.94375,
							"y": 440,
							"count": 1
						},
						{
							"x": 65.94375,
							"y": 528,
							"count": 2
						},
						{
							"x": 65.94375,
							"y": 572,
							"count": 2
						},
						{
							"x": 65.94375,
							"y": 704,
							"count": 1
						},
						{
							"x": 65.94375,
							"y": 748,
							"count": 2
						},
						{
							"x": 65.94375,
							"y": 792,
							"count": 1
						},
						{
							"x": 65.94375,
							"y": 836,
							"count": 1
						},
						{
							"x": 65.94375,
							"y": 880,
							"count": 1
						},
						{
							"x": 65.94375,
							"y": 924,
							"count": 1
						},
						{
							"x": 65.94375,
							"y": 968,
							"count": 1
						},
						{
							"x": 65.94375,
							"y": 1012,
							"count": 1
						},
						{
							"x": 65.94375,
							"y": 1144,
							"count": 1
						},
						{
							"x": 68.203125,
							"y": 176,
							"count": 1
						},
						{
							"x": 68.203125,
							"y": 220,
							"count": 1
						},
						{
							"x": 68.203125,
							"y": 264,
							"count": 1
						},
						{
							"x": 68.203125,
							"y": 352,
							"count": 1
						},
						{
							"x": 68.203125,
							"y": 484,
							"count": 2
						},
						{
							"x": 68.203125,
							"y": 660,
							"count": 2
						},
						{
							"x": 68.203125,
							"y": 704,
							"count": 2
						},
						{
							"x": 68.203125,
							"y": 792,
							"count": 3
						},
						{
							"x": 70.46249999999999,
							"y": 176,
							"count": 1
						},
						{
							"x": 70.46249999999999,
							"y": 396,
							"count": 1
						},
						{
							"x": 70.46249999999999,
							"y": 484,
							"count": 1
						},
						{
							"x": 70.46249999999999,
							"y": 616,
							"count": 2
						},
						{
							"x": 70.46249999999999,
							"y": 660,
							"count": 1
						},
						{
							"x": 70.46249999999999,
							"y": 704,
							"count": 2
						},
						{
							"x": 70.46249999999999,
							"y": 748,
							"count": 1
						},
						{
							"x": 70.46249999999999,
							"y": 792,
							"count": 2
						},
						{
							"x": 70.46249999999999,
							"y": 836,
							"count": 1
						},
						{
							"x": 70.46249999999999,
							"y": 880,
							"count": 1
						},
						{
							"x": 70.46249999999999,
							"y": 968,
							"count": 1
						},
						{
							"x": 70.46249999999999,
							"y": 1144,
							"count": 1
						},
						{
							"x": 70.46249999999999,
							"y": 1320,
							"count": 1
						},
						{
							"x": 72.721875,
							"y": 264,
							"count": 1
						},
						{
							"x": 72.721875,
							"y": 396,
							"count": 1
						},
						{
							"x": 72.721875,
							"y": 572,
							"count": 2
						},
						{
							"x": 72.721875,
							"y": 704,
							"count": 1
						},
						{
							"x": 72.721875,
							"y": 748,
							"count": 1
						},
						{
							"x": 72.721875,
							"y": 792,
							"count": 1
						},
						{
							"x": 72.721875,
							"y": 836,
							"count": 1
						},
						{
							"x": 72.721875,
							"y": 880,
							"count": 1
						},
						{
							"x": 72.721875,
							"y": 968,
							"count": 1
						},
						{
							"x": 72.721875,
							"y": 1012,
							"count": 1
						},
						{
							"x": 72.721875,
							"y": 1276,
							"count": 1
						},
						{
							"x": 72.721875,
							"y": 1364,
							"count": 1
						},
						{
							"x": 74.98125,
							"y": 616,
							"count": 1
						},
						{
							"x": 74.98125,
							"y": 748,
							"count": 2
						},
						{
							"x": 74.98125,
							"y": 1056,
							"count": 1
						},
						{
							"x": 77.240625,
							"y": 440,
							"count": 1
						},
						{
							"x": 77.240625,
							"y": 704,
							"count": 1
						},
						{
							"x": 77.240625,
							"y": 1012,
							"count": 1
						},
						{
							"x": 77.240625,
							"y": 1188,
							"count": 3
						}
					],
					"x": {
						"extent": [
							7.2,
							79.5
						],
						"delta": 2.259375
					},
					"y": {
						"extent": [
							0,
							1408
						],
						"delta": 44
					}
				},
				"steals per game": {
					"y": {
						"extent": [
							0,
							2.48
						],
						"delta": 0.0775
					},
					"x": {
						"extent": [
							7.2,
							79.5
						],
						"delta": 2.259375
					},
					"bins": [
						{
							"y": 0,
							"x": 7.2,
							"count": 1
						},
						{
							"y": 0,
							"x": 9.459375,
							"count": 6
						},
						{
							"y": 0,
							"x": 11.71875,
							"count": 7
						},
						{
							"y": 0,
							"x": 13.978124999999999,
							"count": 3
						},
						{
							"y": 0,
							"x": 18.496875,
							"count": 3
						},
						{
							"y": 0,
							"x": 20.756249999999998,
							"count": 2
						},
						{
							"y": 0,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0,
							"x": 25.275,
							"count": 2
						},
						{
							"y": 0,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 0.0775,
							"x": 9.459375,
							"count": 2
						},
						{
							"y": 0.0775,
							"x": 11.71875,
							"count": 2
						},
						{
							"y": 0.0775,
							"x": 13.978124999999999,
							"count": 8
						},
						{
							"y": 0.0775,
							"x": 16.2375,
							"count": 3
						},
						{
							"y": 0.0775,
							"x": 18.496875,
							"count": 4
						},
						{
							"y": 0.0775,
							"x": 20.756249999999998,
							"count": 2
						},
						{
							"y": 0.0775,
							"x": 23.015625,
							"count": 3
						},
						{
							"y": 0.0775,
							"x": 25.275,
							"count": 1
						},
						{
							"y": 0.0775,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 0.155,
							"x": 9.459375,
							"count": 1
						},
						{
							"y": 0.155,
							"x": 11.71875,
							"count": 5
						},
						{
							"y": 0.155,
							"x": 13.978124999999999,
							"count": 7
						},
						{
							"y": 0.155,
							"x": 16.2375,
							"count": 8
						},
						{
							"y": 0.155,
							"x": 18.496875,
							"count": 5
						},
						{
							"y": 0.155,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.155,
							"x": 25.275,
							"count": 3
						},
						{
							"y": 0.155,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 0.155,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 0.155,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 0.23249999999999998,
							"x": 9.459375,
							"count": 1
						},
						{
							"y": 0.23249999999999998,
							"x": 11.71875,
							"count": 3
						},
						{
							"y": 0.23249999999999998,
							"x": 16.2375,
							"count": 3
						},
						{
							"y": 0.23249999999999998,
							"x": 18.496875,
							"count": 3
						},
						{
							"y": 0.23249999999999998,
							"x": 20.756249999999998,
							"count": 3
						},
						{
							"y": 0.23249999999999998,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.23249999999999998,
							"x": 25.275,
							"count": 1
						},
						{
							"y": 0.23249999999999998,
							"x": 27.534374999999997,
							"count": 2
						},
						{
							"y": 0.23249999999999998,
							"x": 29.79375,
							"count": 2
						},
						{
							"y": 0.23249999999999998,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 0.23249999999999998,
							"x": 34.3125,
							"count": 1
						},
						{
							"y": 0.23249999999999998,
							"x": 38.83125,
							"count": 3
						},
						{
							"y": 0.23249999999999998,
							"x": 41.090625,
							"count": 2
						},
						{
							"y": 0.23249999999999998,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 0.31,
							"x": 11.71875,
							"count": 1
						},
						{
							"y": 0.31,
							"x": 13.978124999999999,
							"count": 4
						},
						{
							"y": 0.31,
							"x": 16.2375,
							"count": 2
						},
						{
							"y": 0.31,
							"x": 18.496875,
							"count": 3
						},
						{
							"y": 0.31,
							"x": 20.756249999999998,
							"count": 4
						},
						{
							"y": 0.31,
							"x": 23.015625,
							"count": 2
						},
						{
							"y": 0.31,
							"x": 25.275,
							"count": 5
						},
						{
							"y": 0.31,
							"x": 27.534374999999997,
							"count": 3
						},
						{
							"y": 0.31,
							"x": 29.79375,
							"count": 4
						},
						{
							"y": 0.31,
							"x": 32.053125,
							"count": 3
						},
						{
							"y": 0.31,
							"x": 34.3125,
							"count": 4
						},
						{
							"y": 0.31,
							"x": 36.571875,
							"count": 5
						},
						{
							"y": 0.31,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 0.31,
							"x": 41.090625,
							"count": 1
						},
						{
							"y": 0.31,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 0.31,
							"x": 45.609375,
							"count": 2
						},
						{
							"y": 0.31,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 0.31,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 0.31,
							"x": 54.646875,
							"count": 1
						},
						{
							"y": 0.31,
							"x": 59.165625,
							"count": 2
						},
						{
							"y": 0.31,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 0.3875,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 0.3875,
							"x": 20.756249999999998,
							"count": 2
						},
						{
							"y": 0.3875,
							"x": 25.275,
							"count": 2
						},
						{
							"y": 0.3875,
							"x": 27.534374999999997,
							"count": 3
						},
						{
							"y": 0.3875,
							"x": 29.79375,
							"count": 4
						},
						{
							"y": 0.3875,
							"x": 32.053125,
							"count": 2
						},
						{
							"y": 0.3875,
							"x": 34.3125,
							"count": 3
						},
						{
							"y": 0.3875,
							"x": 36.571875,
							"count": 2
						},
						{
							"y": 0.3875,
							"x": 38.83125,
							"count": 6
						},
						{
							"y": 0.3875,
							"x": 41.090625,
							"count": 2
						},
						{
							"y": 0.3875,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 0.3875,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 0.3875,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 0.3875,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 0.3875,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 0.46499999999999997,
							"x": 7.2,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 9.459375,
							"count": 1
						},
						{
							"y": 0.46499999999999997,
							"x": 16.2375,
							"count": 3
						},
						{
							"y": 0.46499999999999997,
							"x": 18.496875,
							"count": 3
						},
						{
							"y": 0.46499999999999997,
							"x": 20.756249999999998,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.46499999999999997,
							"x": 25.275,
							"count": 4
						},
						{
							"y": 0.46499999999999997,
							"x": 27.534374999999997,
							"count": 3
						},
						{
							"y": 0.46499999999999997,
							"x": 29.79375,
							"count": 3
						},
						{
							"y": 0.46499999999999997,
							"x": 32.053125,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 34.3125,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 36.571875,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 38.83125,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 41.090625,
							"count": 3
						},
						{
							"y": 0.46499999999999997,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 0.46499999999999997,
							"x": 45.609375,
							"count": 3
						},
						{
							"y": 0.46499999999999997,
							"x": 47.86875,
							"count": 1
						},
						{
							"y": 0.46499999999999997,
							"x": 52.3875,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 54.646875,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 56.90625,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 59.165625,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 0.46499999999999997,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 0.46499999999999997,
							"x": 65.94375,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 13.978124999999999,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 16.2375,
							"count": 2
						},
						{
							"y": 0.5425,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 23.015625,
							"count": 4
						},
						{
							"y": 0.5425,
							"x": 29.79375,
							"count": 2
						},
						{
							"y": 0.5425,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 34.3125,
							"count": 2
						},
						{
							"y": 0.5425,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 41.090625,
							"count": 2
						},
						{
							"y": 0.5425,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 47.86875,
							"count": 2
						},
						{
							"y": 0.5425,
							"x": 50.128125000000004,
							"count": 2
						},
						{
							"y": 0.5425,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 54.646875,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 63.684375,
							"count": 2
						},
						{
							"y": 0.5425,
							"x": 65.94375,
							"count": 2
						},
						{
							"y": 0.62,
							"x": 13.978124999999999,
							"count": 1
						},
						{
							"y": 0.62,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 0.62,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.62,
							"x": 25.275,
							"count": 1
						},
						{
							"y": 0.62,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 0.62,
							"x": 29.79375,
							"count": 3
						},
						{
							"y": 0.62,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 0.62,
							"x": 34.3125,
							"count": 1
						},
						{
							"y": 0.62,
							"x": 36.571875,
							"count": 3
						},
						{
							"y": 0.62,
							"x": 38.83125,
							"count": 2
						},
						{
							"y": 0.62,
							"x": 41.090625,
							"count": 3
						},
						{
							"y": 0.62,
							"x": 45.609375,
							"count": 2
						},
						{
							"y": 0.62,
							"x": 47.86875,
							"count": 4
						},
						{
							"y": 0.62,
							"x": 50.128125000000004,
							"count": 3
						},
						{
							"y": 0.62,
							"x": 54.646875,
							"count": 1
						},
						{
							"y": 0.62,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 0.62,
							"x": 61.425,
							"count": 2
						},
						{
							"y": 0.62,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 0.62,
							"x": 70.46249999999999,
							"count": 2
						},
						{
							"y": 0.6975,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 0.6975,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 0.6975,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 0.6975,
							"x": 36.571875,
							"count": 4
						},
						{
							"y": 0.6975,
							"x": 38.83125,
							"count": 2
						},
						{
							"y": 0.6975,
							"x": 41.090625,
							"count": 2
						},
						{
							"y": 0.6975,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 0.6975,
							"x": 47.86875,
							"count": 3
						},
						{
							"y": 0.6975,
							"x": 52.3875,
							"count": 2
						},
						{
							"y": 0.6975,
							"x": 54.646875,
							"count": 3
						},
						{
							"y": 0.6975,
							"x": 56.90625,
							"count": 4
						},
						{
							"y": 0.6975,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 0.6975,
							"x": 63.684375,
							"count": 3
						},
						{
							"y": 0.6975,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 0.6975,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 0.6975,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 0.775,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 0.775,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.775,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 0.775,
							"x": 34.3125,
							"count": 1
						},
						{
							"y": 0.775,
							"x": 36.571875,
							"count": 2
						},
						{
							"y": 0.775,
							"x": 38.83125,
							"count": 2
						},
						{
							"y": 0.775,
							"x": 41.090625,
							"count": 1
						},
						{
							"y": 0.775,
							"x": 50.128125000000004,
							"count": 4
						},
						{
							"y": 0.775,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 0.775,
							"x": 54.646875,
							"count": 2
						},
						{
							"y": 0.775,
							"x": 56.90625,
							"count": 3
						},
						{
							"y": 0.775,
							"x": 61.425,
							"count": 3
						},
						{
							"y": 0.775,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 0.775,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 0.775,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 32.053125,
							"count": 2
						},
						{
							"y": 0.8525,
							"x": 34.3125,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 36.571875,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 54.646875,
							"count": 3
						},
						{
							"y": 0.8525,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 59.165625,
							"count": 3
						},
						{
							"y": 0.8525,
							"x": 61.425,
							"count": 2
						},
						{
							"y": 0.8525,
							"x": 65.94375,
							"count": 2
						},
						{
							"y": 0.8525,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 36.571875,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 41.090625,
							"count": 2
						},
						{
							"y": 0.9299999999999999,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 47.86875,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 50.128125000000004,
							"count": 2
						},
						{
							"y": 0.9299999999999999,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 59.165625,
							"count": 2
						},
						{
							"y": 0.9299999999999999,
							"x": 63.684375,
							"count": 2
						},
						{
							"y": 0.9299999999999999,
							"x": 65.94375,
							"count": 2
						},
						{
							"y": 0.9299999999999999,
							"x": 68.203125,
							"count": 5
						},
						{
							"y": 0.9299999999999999,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 72.721875,
							"count": 2
						},
						{
							"y": 1.0075,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 43.35,
							"count": 2
						},
						{
							"y": 1.0075,
							"x": 45.609375,
							"count": 2
						},
						{
							"y": 1.0075,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 54.646875,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 59.165625,
							"count": 2
						},
						{
							"y": 1.0075,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 63.684375,
							"count": 3
						},
						{
							"y": 1.0075,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 1.085,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 1.085,
							"x": 54.646875,
							"count": 1
						},
						{
							"y": 1.085,
							"x": 56.90625,
							"count": 3
						},
						{
							"y": 1.085,
							"x": 65.94375,
							"count": 2
						},
						{
							"y": 1.085,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 1.085,
							"x": 77.240625,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 47.86875,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 59.165625,
							"count": 2
						},
						{
							"y": 1.1625,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 63.684375,
							"count": 2
						},
						{
							"y": 1.1625,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 74.98125,
							"count": 1
						},
						{
							"y": 1.24,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 1.24,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 1.24,
							"x": 52.3875,
							"count": 2
						},
						{
							"y": 1.24,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 1.24,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 1.24,
							"x": 70.46249999999999,
							"count": 2
						},
						{
							"y": 1.24,
							"x": 77.240625,
							"count": 2
						},
						{
							"y": 1.3175,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 1.3175,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 1.3175,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 1.3175,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 1.3175,
							"x": 70.46249999999999,
							"count": 2
						},
						{
							"y": 1.3175,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 1.395,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 1.395,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 1.395,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 1.395,
							"x": 74.98125,
							"count": 1
						},
						{
							"y": 1.4725,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 1.4725,
							"x": 65.94375,
							"count": 2
						},
						{
							"y": 1.4725,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 1.4725,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 1.4725,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 1.55,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 1.55,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 1.55,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 1.55,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 1.55,
							"x": 77.240625,
							"count": 2
						},
						{
							"y": 1.6275,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 1.6275,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 1.6275,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 1.6275,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 1.6275,
							"x": 74.98125,
							"count": 1
						},
						{
							"y": 1.705,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 1.705,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 1.705,
							"x": 74.98125,
							"count": 1
						},
						{
							"y": 1.7825,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 1.7825,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 1.7825,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 1.8599999999999999,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 1.8599999999999999,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 1.8599999999999999,
							"x": 77.240625,
							"count": 1
						},
						{
							"y": 1.9375,
							"x": 7.2,
							"count": 1
						},
						{
							"y": 2.2475,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 2.4025,
							"x": 70.46249999999999,
							"count": 1
						}
					],
					"maxCount": 8
				},
				"minutes": {
					"y": {
						"extent": [
							5.1000000000000005,
							38.5
						],
						"delta": 1.04375
					},
					"x": {
						"extent": [
							7.2,
							79.5
						],
						"delta": 2.259375
					},
					"bins": [
						{
							"y": 5.1000000000000005,
							"x": 7.2,
							"count": 3
						},
						{
							"y": 5.1000000000000005,
							"x": 9.459375,
							"count": 9
						},
						{
							"y": 5.1000000000000005,
							"x": 11.71875,
							"count": 2
						},
						{
							"y": 6.143750000000001,
							"x": 9.459375,
							"count": 2
						},
						{
							"y": 6.143750000000001,
							"x": 11.71875,
							"count": 14
						},
						{
							"y": 6.143750000000001,
							"x": 13.978124999999999,
							"count": 6
						},
						{
							"y": 7.1875,
							"x": 11.71875,
							"count": 1
						},
						{
							"y": 7.1875,
							"x": 13.978124999999999,
							"count": 14
						},
						{
							"y": 7.1875,
							"x": 16.2375,
							"count": 5
						},
						{
							"y": 8.23125,
							"x": 7.2,
							"count": 1
						},
						{
							"y": 8.23125,
							"x": 11.71875,
							"count": 1
						},
						{
							"y": 8.23125,
							"x": 13.978124999999999,
							"count": 4
						},
						{
							"y": 8.23125,
							"x": 16.2375,
							"count": 14
						},
						{
							"y": 8.23125,
							"x": 18.496875,
							"count": 6
						},
						{
							"y": 9.275,
							"x": 16.2375,
							"count": 2
						},
						{
							"y": 9.275,
							"x": 18.496875,
							"count": 16
						},
						{
							"y": 9.275,
							"x": 20.756249999999998,
							"count": 2
						},
						{
							"y": 10.318750000000001,
							"x": 20.756249999999998,
							"count": 14
						},
						{
							"y": 10.318750000000001,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 11.3625,
							"x": 23.015625,
							"count": 11
						},
						{
							"y": 11.3625,
							"x": 25.275,
							"count": 3
						},
						{
							"y": 12.40625,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 12.40625,
							"x": 23.015625,
							"count": 2
						},
						{
							"y": 12.40625,
							"x": 25.275,
							"count": 11
						},
						{
							"y": 12.40625,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 25.275,
							"count": 4
						},
						{
							"y": 13.45,
							"x": 27.534374999999997,
							"count": 13
						},
						{
							"y": 14.493749999999999,
							"x": 25.275,
							"count": 1
						},
						{
							"y": 14.493749999999999,
							"x": 27.534374999999997,
							"count": 3
						},
						{
							"y": 14.493749999999999,
							"x": 29.79375,
							"count": 17
						},
						{
							"y": 15.537500000000001,
							"x": 29.79375,
							"count": 4
						},
						{
							"y": 15.537500000000001,
							"x": 32.053125,
							"count": 14
						},
						{
							"y": 15.537500000000001,
							"x": 34.3125,
							"count": 1
						},
						{
							"y": 16.58125,
							"x": 34.3125,
							"count": 12
						},
						{
							"y": 17.625,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 17.625,
							"x": 34.3125,
							"count": 2
						},
						{
							"y": 17.625,
							"x": 36.571875,
							"count": 12
						},
						{
							"y": 18.66875,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 18.66875,
							"x": 36.571875,
							"count": 8
						},
						{
							"y": 18.66875,
							"x": 38.83125,
							"count": 18
						},
						{
							"y": 19.7125,
							"x": 38.83125,
							"count": 5
						},
						{
							"y": 19.7125,
							"x": 41.090625,
							"count": 14
						},
						{
							"y": 20.75625,
							"x": 41.090625,
							"count": 4
						},
						{
							"y": 20.75625,
							"x": 43.35,
							"count": 7
						},
						{
							"y": 21.8,
							"x": 43.35,
							"count": 2
						},
						{
							"y": 21.8,
							"x": 45.609375,
							"count": 7
						},
						{
							"y": 22.84375,
							"x": 45.609375,
							"count": 6
						},
						{
							"y": 22.84375,
							"x": 47.86875,
							"count": 2
						},
						{
							"y": 23.8875,
							"x": 47.86875,
							"count": 10
						},
						{
							"y": 23.8875,
							"x": 50.128125000000004,
							"count": 8
						},
						{
							"y": 24.931250000000002,
							"x": 50.128125000000004,
							"count": 6
						},
						{
							"y": 24.931250000000002,
							"x": 52.3875,
							"count": 6
						},
						{
							"y": 25.975,
							"x": 52.3875,
							"count": 6
						},
						{
							"y": 25.975,
							"x": 54.646875,
							"count": 10
						},
						{
							"y": 27.01875,
							"x": 54.646875,
							"count": 5
						},
						{
							"y": 27.01875,
							"x": 56.90625,
							"count": 11
						},
						{
							"y": 28.0625,
							"x": 56.90625,
							"count": 8
						},
						{
							"y": 28.0625,
							"x": 59.165625,
							"count": 5
						},
						{
							"y": 29.10625,
							"x": 59.165625,
							"count": 11
						},
						{
							"y": 29.10625,
							"x": 61.425,
							"count": 4
						},
						{
							"y": 30.15,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 61.425,
							"count": 10
						},
						{
							"y": 30.15,
							"x": 63.684375,
							"count": 4
						},
						{
							"y": 31.19375,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 63.684375,
							"count": 15
						},
						{
							"y": 31.19375,
							"x": 65.94375,
							"count": 7
						},
						{
							"y": 32.2375,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 32.2375,
							"x": 65.94375,
							"count": 12
						},
						{
							"y": 32.2375,
							"x": 68.203125,
							"count": 3
						},
						{
							"y": 33.28125,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 33.28125,
							"x": 68.203125,
							"count": 8
						},
						{
							"y": 33.28125,
							"x": 70.46249999999999,
							"count": 3
						},
						{
							"y": 34.324999999999996,
							"x": 68.203125,
							"count": 2
						},
						{
							"y": 34.324999999999996,
							"x": 70.46249999999999,
							"count": 12
						},
						{
							"y": 34.324999999999996,
							"x": 72.721875,
							"count": 2
						},
						{
							"y": 35.36875,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 72.721875,
							"count": 10
						},
						{
							"y": 35.36875,
							"x": 74.98125,
							"count": 2
						},
						{
							"y": 36.4125,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 36.4125,
							"x": 74.98125,
							"count": 2
						},
						{
							"y": 37.45625,
							"x": 77.240625,
							"count": 6
						}
					],
					"maxCount": 18
				},
				"free throw percent": {
					"y": {
						"extent": [
							0,
							1
						],
						"delta": 0.03125
					},
					"x": {
						"extent": [
							7.2,
							79.5
						],
						"delta": 2.259375
					},
					"bins": [
						{
							"y": 0,
							"x": 7.2,
							"count": 4
						},
						{
							"y": 0,
							"x": 9.459375,
							"count": 4
						},
						{
							"y": 0,
							"x": 11.71875,
							"count": 4
						},
						{
							"y": 0,
							"x": 18.496875,
							"count": 2
						},
						{
							"y": 0,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 0,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0,
							"x": 25.275,
							"count": 2
						},
						{
							"y": 0.15625,
							"x": 13.978124999999999,
							"count": 1
						},
						{
							"y": 0.1875,
							"x": 16.2375,
							"count": 1
						},
						{
							"y": 0.25,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 0.25,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 0.3125,
							"x": 11.71875,
							"count": 1
						},
						{
							"y": 0.3125,
							"x": 13.978124999999999,
							"count": 1
						},
						{
							"y": 0.3125,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.34375,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 0.375,
							"x": 13.978124999999999,
							"count": 1
						},
						{
							"y": 0.375,
							"x": 16.2375,
							"count": 1
						},
						{
							"y": 0.375,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 0.40625,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 0.40625,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 0.40625,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 0.40625,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 0.4375,
							"x": 11.71875,
							"count": 1
						},
						{
							"y": 0.4375,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 0.46875,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 0.46875,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 0.46875,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 9.459375,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 11.71875,
							"count": 4
						},
						{
							"y": 0.5,
							"x": 13.978124999999999,
							"count": 4
						},
						{
							"y": 0.5,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 25.275,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 27.534374999999997,
							"count": 2
						},
						{
							"y": 0.5,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 36.571875,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 54.646875,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 11.71875,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 13.978124999999999,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 18.496875,
							"count": 2
						},
						{
							"y": 0.53125,
							"x": 25.275,
							"count": 2
						},
						{
							"y": 0.53125,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 47.86875,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 13.978124999999999,
							"count": 2
						},
						{
							"y": 0.5625,
							"x": 16.2375,
							"count": 4
						},
						{
							"y": 0.5625,
							"x": 25.275,
							"count": 2
						},
						{
							"y": 0.5625,
							"x": 27.534374999999997,
							"count": 2
						},
						{
							"y": 0.5625,
							"x": 29.79375,
							"count": 3
						},
						{
							"y": 0.5625,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 41.090625,
							"count": 2
						},
						{
							"y": 0.5625,
							"x": 47.86875,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 13.978124999999999,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 16.2375,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 32.053125,
							"count": 2
						},
						{
							"y": 0.59375,
							"x": 36.571875,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 41.090625,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 47.86875,
							"count": 2
						},
						{
							"y": 0.59375,
							"x": 54.646875,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 13.978124999999999,
							"count": 3
						},
						{
							"y": 0.625,
							"x": 16.2375,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 20.756249999999998,
							"count": 3
						},
						{
							"y": 0.625,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 25.275,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 27.534374999999997,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 29.79375,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 34.3125,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 36.571875,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 38.83125,
							"count": 3
						},
						{
							"y": 0.625,
							"x": 43.35,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 47.86875,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 54.646875,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 56.90625,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 65.94375,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 9.459375,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 13.978124999999999,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 16.2375,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 25.275,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 29.79375,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 34.3125,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 36.571875,
							"count": 3
						},
						{
							"y": 0.65625,
							"x": 41.090625,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 50.128125000000004,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 54.646875,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 59.165625,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 65.94375,
							"count": 3
						},
						{
							"y": 0.6875,
							"x": 11.71875,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 13.978124999999999,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 16.2375,
							"count": 3
						},
						{
							"y": 0.6875,
							"x": 18.496875,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 23.015625,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 25.275,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 29.79375,
							"count": 4
						},
						{
							"y": 0.6875,
							"x": 32.053125,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 38.83125,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 41.090625,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 70.46249999999999,
							"count": 3
						},
						{
							"y": 0.6875,
							"x": 72.721875,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 16.2375,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 18.496875,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 20.756249999999998,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 34.3125,
							"count": 3
						},
						{
							"y": 0.71875,
							"x": 36.571875,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 41.090625,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 45.609375,
							"count": 3
						},
						{
							"y": 0.71875,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 54.646875,
							"count": 3
						},
						{
							"y": 0.71875,
							"x": 56.90625,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 59.165625,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 61.425,
							"count": 3
						},
						{
							"y": 0.71875,
							"x": 63.684375,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 65.94375,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 70.46249999999999,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 74.98125,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 9.459375,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 11.71875,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 13.978124999999999,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 16.2375,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 18.496875,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 20.756249999999998,
							"count": 3
						},
						{
							"y": 0.75,
							"x": 23.015625,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 27.534374999999997,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 29.79375,
							"count": 4
						},
						{
							"y": 0.75,
							"x": 32.053125,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 34.3125,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 36.571875,
							"count": 3
						},
						{
							"y": 0.75,
							"x": 38.83125,
							"count": 5
						},
						{
							"y": 0.75,
							"x": 43.35,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 50.128125000000004,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 52.3875,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 54.646875,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 56.90625,
							"count": 5
						},
						{
							"y": 0.75,
							"x": 59.165625,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 61.425,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 63.684375,
							"count": 3
						},
						{
							"y": 0.75,
							"x": 65.94375,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 68.203125,
							"count": 4
						},
						{
							"y": 0.75,
							"x": 70.46249999999999,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 77.240625,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 13.978124999999999,
							"count": 3
						},
						{
							"y": 0.78125,
							"x": 18.496875,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 25.275,
							"count": 3
						},
						{
							"y": 0.78125,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 32.053125,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 34.3125,
							"count": 3
						},
						{
							"y": 0.78125,
							"x": 36.571875,
							"count": 4
						},
						{
							"y": 0.78125,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 41.090625,
							"count": 6
						},
						{
							"y": 0.78125,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 47.86875,
							"count": 3
						},
						{
							"y": 0.78125,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 54.646875,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 59.165625,
							"count": 3
						},
						{
							"y": 0.78125,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 63.684375,
							"count": 7
						},
						{
							"y": 0.78125,
							"x": 65.94375,
							"count": 5
						},
						{
							"y": 0.78125,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 70.46249999999999,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 72.721875,
							"count": 4
						},
						{
							"y": 0.78125,
							"x": 74.98125,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 9.459375,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 18.496875,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 23.015625,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 25.275,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 27.534374999999997,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 29.79375,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 32.053125,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 34.3125,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 36.571875,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 38.83125,
							"count": 4
						},
						{
							"y": 0.8125,
							"x": 41.090625,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 45.609375,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 47.86875,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 52.3875,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 54.646875,
							"count": 4
						},
						{
							"y": 0.8125,
							"x": 56.90625,
							"count": 4
						},
						{
							"y": 0.8125,
							"x": 59.165625,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 61.425,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 63.684375,
							"count": 4
						},
						{
							"y": 0.8125,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 68.203125,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 70.46249999999999,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 72.721875,
							"count": 5
						},
						{
							"y": 0.8125,
							"x": 74.98125,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 77.240625,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 13.978124999999999,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 32.053125,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 34.3125,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 36.571875,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 38.83125,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 41.090625,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 43.35,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 45.609375,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 47.86875,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 50.128125000000004,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 52.3875,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 56.90625,
							"count": 3
						},
						{
							"y": 0.84375,
							"x": 59.165625,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 61.425,
							"count": 3
						},
						{
							"y": 0.84375,
							"x": 63.684375,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 65.94375,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 70.46249999999999,
							"count": 3
						},
						{
							"y": 0.84375,
							"x": 72.721875,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 77.240625,
							"count": 3
						},
						{
							"y": 0.875,
							"x": 9.459375,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 11.71875,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 18.496875,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 27.534374999999997,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 34.3125,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 36.571875,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 52.3875,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 59.165625,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 61.425,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 63.684375,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 65.94375,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 74.98125,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 11.71875,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 16.2375,
							"count": 2
						},
						{
							"y": 0.90625,
							"x": 38.83125,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 41.090625,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 56.90625,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 68.203125,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 45.609375,
							"count": 3
						},
						{
							"y": 0.9375,
							"x": 50.128125000000004,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 70.46249999999999,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 9.459375,
							"count": 2
						},
						{
							"y": 0.96875,
							"x": 11.71875,
							"count": 2
						},
						{
							"y": 0.96875,
							"x": 13.978124999999999,
							"count": 2
						},
						{
							"y": 0.96875,
							"x": 16.2375,
							"count": 3
						},
						{
							"y": 0.96875,
							"x": 18.496875,
							"count": 3
						},
						{
							"y": 0.96875,
							"x": 20.756249999999998,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 23.015625,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 29.79375,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 47.86875,
							"count": 1
						}
					],
					"maxCount": 7
				}
			},
			"percentage of team assists": {
				"steals per game": {
					"y": {
						"extent": [
							0,
							2.48
						],
						"delta": 0.0775
					},
					"x": {
						"extent": [
							0,
							49.2
						],
						"delta": 1.5375
					},
					"bins": [
						{
							"y": 0,
							"x": 0,
							"count": 6
						},
						{
							"y": 0,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 0,
							"x": 3.075,
							"count": 2
						},
						{
							"y": 0,
							"x": 4.612500000000001,
							"count": 3
						},
						{
							"y": 0,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 0,
							"x": 9.225000000000001,
							"count": 2
						},
						{
							"y": 0,
							"x": 10.762500000000001,
							"count": 4
						},
						{
							"y": 0,
							"x": 12.3,
							"count": 3
						},
						{
							"y": 0,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 0,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 0.0775,
							"x": 0,
							"count": 2
						},
						{
							"y": 0.0775,
							"x": 1.5375,
							"count": 3
						},
						{
							"y": 0.0775,
							"x": 3.075,
							"count": 2
						},
						{
							"y": 0.0775,
							"x": 4.612500000000001,
							"count": 4
						},
						{
							"y": 0.0775,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 0.0775,
							"x": 7.6875,
							"count": 4
						},
						{
							"y": 0.0775,
							"x": 9.225000000000001,
							"count": 3
						},
						{
							"y": 0.0775,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 0.0775,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0.0775,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 0.0775,
							"x": 18.450000000000003,
							"count": 2
						},
						{
							"y": 0.0775,
							"x": 30.75,
							"count": 1
						},
						{
							"y": 0.155,
							"x": 0,
							"count": 2
						},
						{
							"y": 0.155,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 0.155,
							"x": 3.075,
							"count": 6
						},
						{
							"y": 0.155,
							"x": 4.612500000000001,
							"count": 6
						},
						{
							"y": 0.155,
							"x": 6.15,
							"count": 7
						},
						{
							"y": 0.155,
							"x": 7.6875,
							"count": 3
						},
						{
							"y": 0.155,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 0.155,
							"x": 12.3,
							"count": 3
						},
						{
							"y": 0.155,
							"x": 19.9875,
							"count": 1
						},
						{
							"y": 0.155,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 0.155,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 0.155,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 0.23249999999999998,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.23249999999999998,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 0.23249999999999998,
							"x": 3.075,
							"count": 6
						},
						{
							"y": 0.23249999999999998,
							"x": 4.612500000000001,
							"count": 4
						},
						{
							"y": 0.23249999999999998,
							"x": 6.15,
							"count": 3
						},
						{
							"y": 0.23249999999999998,
							"x": 7.6875,
							"count": 4
						},
						{
							"y": 0.23249999999999998,
							"x": 9.225000000000001,
							"count": 3
						},
						{
							"y": 0.23249999999999998,
							"x": 10.762500000000001,
							"count": 3
						},
						{
							"y": 0.23249999999999998,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0.23249999999999998,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 0.31,
							"x": 0,
							"count": 2
						},
						{
							"y": 0.31,
							"x": 3.075,
							"count": 7
						},
						{
							"y": 0.31,
							"x": 4.612500000000001,
							"count": 8
						},
						{
							"y": 0.31,
							"x": 6.15,
							"count": 7
						},
						{
							"y": 0.31,
							"x": 7.6875,
							"count": 5
						},
						{
							"y": 0.31,
							"x": 9.225000000000001,
							"count": 3
						},
						{
							"y": 0.31,
							"x": 10.762500000000001,
							"count": 4
						},
						{
							"y": 0.31,
							"x": 12.3,
							"count": 2
						},
						{
							"y": 0.31,
							"x": 13.8375,
							"count": 3
						},
						{
							"y": 0.31,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 0.31,
							"x": 19.9875,
							"count": 1
						},
						{
							"y": 0.31,
							"x": 21.525000000000002,
							"count": 3
						},
						{
							"y": 0.31,
							"x": 23.0625,
							"count": 2
						},
						{
							"y": 0.31,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 0.31,
							"x": 32.2875,
							"count": 2
						},
						{
							"y": 0.3875,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.3875,
							"x": 1.5375,
							"count": 3
						},
						{
							"y": 0.3875,
							"x": 3.075,
							"count": 6
						},
						{
							"y": 0.3875,
							"x": 4.612500000000001,
							"count": 4
						},
						{
							"y": 0.3875,
							"x": 6.15,
							"count": 5
						},
						{
							"y": 0.3875,
							"x": 7.6875,
							"count": 5
						},
						{
							"y": 0.3875,
							"x": 9.225000000000001,
							"count": 2
						},
						{
							"y": 0.3875,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 0.3875,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0.3875,
							"x": 18.450000000000003,
							"count": 3
						},
						{
							"y": 0.3875,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 0.46499999999999997,
							"x": 0,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 0.46499999999999997,
							"x": 3.075,
							"count": 3
						},
						{
							"y": 0.46499999999999997,
							"x": 4.612500000000001,
							"count": 9
						},
						{
							"y": 0.46499999999999997,
							"x": 6.15,
							"count": 6
						},
						{
							"y": 0.46499999999999997,
							"x": 7.6875,
							"count": 4
						},
						{
							"y": 0.46499999999999997,
							"x": 9.225000000000001,
							"count": 3
						},
						{
							"y": 0.46499999999999997,
							"x": 10.762500000000001,
							"count": 3
						},
						{
							"y": 0.46499999999999997,
							"x": 12.3,
							"count": 4
						},
						{
							"y": 0.46499999999999997,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0.46499999999999997,
							"x": 15.375,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 16.9125,
							"count": 3
						},
						{
							"y": 0.46499999999999997,
							"x": 19.9875,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 21.525000000000002,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 0.46499999999999997,
							"x": 26.137500000000003,
							"count": 2
						},
						{
							"y": 0.46499999999999997,
							"x": 30.75,
							"count": 1
						},
						{
							"y": 0.46499999999999997,
							"x": 39.975,
							"count": 1
						},
						{
							"y": 0.46499999999999997,
							"x": 41.5125,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 4.612500000000001,
							"count": 2
						},
						{
							"y": 0.5425,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 0.5425,
							"x": 7.6875,
							"count": 6
						},
						{
							"y": 0.5425,
							"x": 9.225000000000001,
							"count": 3
						},
						{
							"y": 0.5425,
							"x": 10.762500000000001,
							"count": 4
						},
						{
							"y": 0.5425,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 15.375,
							"count": 3
						},
						{
							"y": 0.5425,
							"x": 16.9125,
							"count": 4
						},
						{
							"y": 0.5425,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 0.5425,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 0.62,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 0.62,
							"x": 3.075,
							"count": 2
						},
						{
							"y": 0.62,
							"x": 4.612500000000001,
							"count": 7
						},
						{
							"y": 0.62,
							"x": 6.15,
							"count": 4
						},
						{
							"y": 0.62,
							"x": 7.6875,
							"count": 3
						},
						{
							"y": 0.62,
							"x": 10.762500000000001,
							"count": 3
						},
						{
							"y": 0.62,
							"x": 12.3,
							"count": 2
						},
						{
							"y": 0.62,
							"x": 13.8375,
							"count": 3
						},
						{
							"y": 0.62,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 0.62,
							"x": 18.450000000000003,
							"count": 2
						},
						{
							"y": 0.62,
							"x": 21.525000000000002,
							"count": 2
						},
						{
							"y": 0.62,
							"x": 24.6,
							"count": 2
						},
						{
							"y": 0.62,
							"x": 27.675,
							"count": 1
						},
						{
							"y": 0.62,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 0.6975,
							"x": 4.612500000000001,
							"count": 2
						},
						{
							"y": 0.6975,
							"x": 6.15,
							"count": 4
						},
						{
							"y": 0.6975,
							"x": 7.6875,
							"count": 5
						},
						{
							"y": 0.6975,
							"x": 9.225000000000001,
							"count": 3
						},
						{
							"y": 0.6975,
							"x": 10.762500000000001,
							"count": 5
						},
						{
							"y": 0.6975,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 0.6975,
							"x": 15.375,
							"count": 2
						},
						{
							"y": 0.6975,
							"x": 21.525000000000002,
							"count": 3
						},
						{
							"y": 0.6975,
							"x": 23.0625,
							"count": 1
						},
						{
							"y": 0.6975,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 0.6975,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 0.6975,
							"x": 30.75,
							"count": 1
						},
						{
							"y": 0.6975,
							"x": 32.2875,
							"count": 1
						},
						{
							"y": 0.6975,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 0.775,
							"x": 3.075,
							"count": 2
						},
						{
							"y": 0.775,
							"x": 4.612500000000001,
							"count": 2
						},
						{
							"y": 0.775,
							"x": 7.6875,
							"count": 5
						},
						{
							"y": 0.775,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 0.775,
							"x": 10.762500000000001,
							"count": 3
						},
						{
							"y": 0.775,
							"x": 12.3,
							"count": 3
						},
						{
							"y": 0.775,
							"x": 15.375,
							"count": 2
						},
						{
							"y": 0.775,
							"x": 16.9125,
							"count": 2
						},
						{
							"y": 0.775,
							"x": 19.9875,
							"count": 1
						},
						{
							"y": 0.775,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 0.775,
							"x": 24.6,
							"count": 2
						},
						{
							"y": 0.775,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 6.15,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 7.6875,
							"count": 4
						},
						{
							"y": 0.8525,
							"x": 9.225000000000001,
							"count": 2
						},
						{
							"y": 0.8525,
							"x": 10.762500000000001,
							"count": 2
						},
						{
							"y": 0.8525,
							"x": 12.3,
							"count": 2
						},
						{
							"y": 0.8525,
							"x": 13.8375,
							"count": 3
						},
						{
							"y": 0.8525,
							"x": 16.9125,
							"count": 2
						},
						{
							"y": 0.8525,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 19.9875,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 0.8525,
							"x": 30.75,
							"count": 2
						},
						{
							"y": 0.8525,
							"x": 44.587500000000006,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 3.075,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 4.612500000000001,
							"count": 2
						},
						{
							"y": 0.9299999999999999,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 9.225000000000001,
							"count": 4
						},
						{
							"y": 0.9299999999999999,
							"x": 10.762500000000001,
							"count": 3
						},
						{
							"y": 0.9299999999999999,
							"x": 12.3,
							"count": 2
						},
						{
							"y": 0.9299999999999999,
							"x": 13.8375,
							"count": 2
						},
						{
							"y": 0.9299999999999999,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 16.9125,
							"count": 3
						},
						{
							"y": 0.9299999999999999,
							"x": 19.9875,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 27.675,
							"count": 1
						},
						{
							"y": 0.9299999999999999,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 6.15,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 7.6875,
							"count": 5
						},
						{
							"y": 1.0075,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 12.3,
							"count": 2
						},
						{
							"y": 1.0075,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 23.0625,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 1.0075,
							"x": 27.675,
							"count": 1
						},
						{
							"y": 1.085,
							"x": 6.15,
							"count": 1
						},
						{
							"y": 1.085,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 1.085,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 1.085,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 1.085,
							"x": 18.450000000000003,
							"count": 2
						},
						{
							"y": 1.085,
							"x": 21.525000000000002,
							"count": 2
						},
						{
							"y": 1.085,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 1.1625,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 15.375,
							"count": 3
						},
						{
							"y": 1.1625,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 19.9875,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 27.675,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 29.212500000000002,
							"count": 2
						},
						{
							"y": 1.1625,
							"x": 32.2875,
							"count": 1
						},
						{
							"y": 1.1625,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 1.24,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 1.24,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 1.24,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 1.24,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 1.24,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 1.24,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 1.24,
							"x": 26.137500000000003,
							"count": 2
						},
						{
							"y": 1.24,
							"x": 32.2875,
							"count": 1
						},
						{
							"y": 1.24,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 1.3175,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 1.3175,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 1.3175,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 1.3175,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 1.3175,
							"x": 27.675,
							"count": 1
						},
						{
							"y": 1.3175,
							"x": 47.6625,
							"count": 1
						},
						{
							"y": 1.395,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 1.395,
							"x": 23.0625,
							"count": 1
						},
						{
							"y": 1.395,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 1.395,
							"x": 32.2875,
							"count": 1
						},
						{
							"y": 1.4725,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 1.4725,
							"x": 16.9125,
							"count": 2
						},
						{
							"y": 1.4725,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 1.4725,
							"x": 30.75,
							"count": 1
						},
						{
							"y": 1.4725,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 1.55,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 1.55,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 1.55,
							"x": 26.137500000000003,
							"count": 2
						},
						{
							"y": 1.55,
							"x": 30.75,
							"count": 1
						},
						{
							"y": 1.55,
							"x": 36.900000000000006,
							"count": 1
						},
						{
							"y": 1.6275,
							"x": 10.762500000000001,
							"count": 2
						},
						{
							"y": 1.6275,
							"x": 23.0625,
							"count": 1
						},
						{
							"y": 1.6275,
							"x": 38.4375,
							"count": 1
						},
						{
							"y": 1.6275,
							"x": 39.975,
							"count": 1
						},
						{
							"y": 1.705,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 1.705,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 1.705,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 1.7825,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 1.7825,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 1.7825,
							"x": 39.975,
							"count": 1
						},
						{
							"y": 1.8599999999999999,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 1.8599999999999999,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 1.8599999999999999,
							"x": 39.975,
							"count": 1
						},
						{
							"y": 1.9375,
							"x": 0,
							"count": 1
						},
						{
							"y": 2.2475,
							"x": 36.900000000000006,
							"count": 1
						},
						{
							"y": 2.4025,
							"x": 47.6625,
							"count": 1
						}
					],
					"maxCount": 9
				},
				"percentage of team minutes": {
					"bins": [
						{
							"x": 0,
							"y": 7.2,
							"count": 4
						},
						{
							"x": 0,
							"y": 9.459375,
							"count": 1
						},
						{
							"x": 0,
							"y": 11.71875,
							"count": 1
						},
						{
							"x": 0,
							"y": 13.978124999999999,
							"count": 2
						},
						{
							"x": 0,
							"y": 16.2375,
							"count": 4
						},
						{
							"x": 0,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 0,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 0,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0,
							"y": 27.534374999999997,
							"count": 3
						},
						{
							"x": 1.5375,
							"y": 13.978124999999999,
							"count": 2
						},
						{
							"x": 1.5375,
							"y": 16.2375,
							"count": 1
						},
						{
							"x": 1.5375,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 1.5375,
							"y": 25.275,
							"count": 2
						},
						{
							"x": 1.5375,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 1.5375,
							"y": 29.79375,
							"count": 2
						},
						{
							"x": 1.5375,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 1.5375,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 1.5375,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 3.075,
							"y": 11.71875,
							"count": 1
						},
						{
							"x": 3.075,
							"y": 13.978124999999999,
							"count": 6
						},
						{
							"x": 3.075,
							"y": 18.496875,
							"count": 6
						},
						{
							"x": 3.075,
							"y": 20.756249999999998,
							"count": 2
						},
						{
							"x": 3.075,
							"y": 25.275,
							"count": 3
						},
						{
							"x": 3.075,
							"y": 27.534374999999997,
							"count": 3
						},
						{
							"x": 3.075,
							"y": 29.79375,
							"count": 5
						},
						{
							"x": 3.075,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 3.075,
							"y": 41.090625,
							"count": 2
						},
						{
							"x": 3.075,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 3.075,
							"y": 50.128125000000004,
							"count": 2
						},
						{
							"x": 3.075,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 3.075,
							"y": 63.684375,
							"count": 2
						},
						{
							"x": 3.075,
							"y": 70.46249999999999,
							"count": 2
						},
						{
							"x": 4.612500000000001,
							"y": 9.459375,
							"count": 1
						},
						{
							"x": 4.612500000000001,
							"y": 11.71875,
							"count": 3
						},
						{
							"x": 4.612500000000001,
							"y": 13.978124999999999,
							"count": 2
						},
						{
							"x": 4.612500000000001,
							"y": 16.2375,
							"count": 3
						},
						{
							"x": 4.612500000000001,
							"y": 18.496875,
							"count": 2
						},
						{
							"x": 4.612500000000001,
							"y": 20.756249999999998,
							"count": 4
						},
						{
							"x": 4.612500000000001,
							"y": 23.015625,
							"count": 4
						},
						{
							"x": 4.612500000000001,
							"y": 25.275,
							"count": 4
						},
						{
							"x": 4.612500000000001,
							"y": 27.534374999999997,
							"count": 2
						},
						{
							"x": 4.612500000000001,
							"y": 29.79375,
							"count": 4
						},
						{
							"x": 4.612500000000001,
							"y": 34.3125,
							"count": 1
						},
						{
							"x": 4.612500000000001,
							"y": 36.571875,
							"count": 3
						},
						{
							"x": 4.612500000000001,
							"y": 38.83125,
							"count": 3
						},
						{
							"x": 4.612500000000001,
							"y": 41.090625,
							"count": 3
						},
						{
							"x": 4.612500000000001,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 4.612500000000001,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 4.612500000000001,
							"y": 47.86875,
							"count": 3
						},
						{
							"x": 4.612500000000001,
							"y": 50.128125000000004,
							"count": 2
						},
						{
							"x": 4.612500000000001,
							"y": 52.3875,
							"count": 2
						},
						{
							"x": 4.612500000000001,
							"y": 54.646875,
							"count": 1
						},
						{
							"x": 4.612500000000001,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 4.612500000000001,
							"y": 61.425,
							"count": 3
						},
						{
							"x": 4.612500000000001,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 4.612500000000001,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 6.15,
							"y": 11.71875,
							"count": 3
						},
						{
							"x": 6.15,
							"y": 13.978124999999999,
							"count": 3
						},
						{
							"x": 6.15,
							"y": 16.2375,
							"count": 3
						},
						{
							"x": 6.15,
							"y": 18.496875,
							"count": 3
						},
						{
							"x": 6.15,
							"y": 20.756249999999998,
							"count": 2
						},
						{
							"x": 6.15,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 6.15,
							"y": 25.275,
							"count": 2
						},
						{
							"x": 6.15,
							"y": 27.534374999999997,
							"count": 2
						},
						{
							"x": 6.15,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 6.15,
							"y": 32.053125,
							"count": 2
						},
						{
							"x": 6.15,
							"y": 34.3125,
							"count": 4
						},
						{
							"x": 6.15,
							"y": 36.571875,
							"count": 2
						},
						{
							"x": 6.15,
							"y": 38.83125,
							"count": 2
						},
						{
							"x": 6.15,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 6.15,
							"y": 45.609375,
							"count": 2
						},
						{
							"x": 6.15,
							"y": 47.86875,
							"count": 2
						},
						{
							"x": 6.15,
							"y": 54.646875,
							"count": 5
						},
						{
							"x": 6.15,
							"y": 56.90625,
							"count": 3
						},
						{
							"x": 6.15,
							"y": 59.165625,
							"count": 2
						},
						{
							"x": 6.15,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 6.15,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 7.6875,
							"y": 11.71875,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 13.978124999999999,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 16.2375,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 18.496875,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 20.756249999999998,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 23.015625,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 25.275,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 7.6875,
							"y": 29.79375,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 32.053125,
							"count": 5
						},
						{
							"x": 7.6875,
							"y": 34.3125,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 36.571875,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 38.83125,
							"count": 5
						},
						{
							"x": 7.6875,
							"y": 41.090625,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 43.35,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 45.609375,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 47.86875,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 50.128125000000004,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 52.3875,
							"count": 3
						},
						{
							"x": 7.6875,
							"y": 54.646875,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 56.90625,
							"count": 4
						},
						{
							"x": 7.6875,
							"y": 59.165625,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 61.425,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 63.684375,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 65.94375,
							"count": 2
						},
						{
							"x": 7.6875,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 7.6875,
							"y": 70.46249999999999,
							"count": 2
						},
						{
							"x": 9.225000000000001,
							"y": 13.978124999999999,
							"count": 3
						},
						{
							"x": 9.225000000000001,
							"y": 16.2375,
							"count": 2
						},
						{
							"x": 9.225000000000001,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 9.225000000000001,
							"y": 20.756249999999998,
							"count": 2
						},
						{
							"x": 9.225000000000001,
							"y": 23.015625,
							"count": 2
						},
						{
							"x": 9.225000000000001,
							"y": 25.275,
							"count": 1
						},
						{
							"x": 9.225000000000001,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 9.225000000000001,
							"y": 34.3125,
							"count": 3
						},
						{
							"x": 9.225000000000001,
							"y": 36.571875,
							"count": 2
						},
						{
							"x": 9.225000000000001,
							"y": 38.83125,
							"count": 2
						},
						{
							"x": 9.225000000000001,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 9.225000000000001,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 9.225000000000001,
							"y": 52.3875,
							"count": 2
						},
						{
							"x": 9.225000000000001,
							"y": 54.646875,
							"count": 3
						},
						{
							"x": 9.225000000000001,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 9.225000000000001,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 9.225000000000001,
							"y": 63.684375,
							"count": 3
						},
						{
							"x": 9.225000000000001,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 9.225000000000001,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 9.225000000000001,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 10.762500000000001,
							"y": 9.459375,
							"count": 2
						},
						{
							"x": 10.762500000000001,
							"y": 11.71875,
							"count": 3
						},
						{
							"x": 10.762500000000001,
							"y": 18.496875,
							"count": 2
						},
						{
							"x": 10.762500000000001,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 10.762500000000001,
							"y": 25.275,
							"count": 1
						},
						{
							"x": 10.762500000000001,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 10.762500000000001,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 10.762500000000001,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 10.762500000000001,
							"y": 34.3125,
							"count": 4
						},
						{
							"x": 10.762500000000001,
							"y": 36.571875,
							"count": 2
						},
						{
							"x": 10.762500000000001,
							"y": 38.83125,
							"count": 3
						},
						{
							"x": 10.762500000000001,
							"y": 41.090625,
							"count": 3
						},
						{
							"x": 10.762500000000001,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 10.762500000000001,
							"y": 45.609375,
							"count": 2
						},
						{
							"x": 10.762500000000001,
							"y": 47.86875,
							"count": 1
						},
						{
							"x": 10.762500000000001,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 10.762500000000001,
							"y": 52.3875,
							"count": 2
						},
						{
							"x": 10.762500000000001,
							"y": 54.646875,
							"count": 2
						},
						{
							"x": 10.762500000000001,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 10.762500000000001,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 10.762500000000001,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 10.762500000000001,
							"y": 68.203125,
							"count": 3
						},
						{
							"x": 10.762500000000001,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 10.762500000000001,
							"y": 77.240625,
							"count": 1
						},
						{
							"x": 12.3,
							"y": 9.459375,
							"count": 3
						},
						{
							"x": 12.3,
							"y": 11.71875,
							"count": 2
						},
						{
							"x": 12.3,
							"y": 13.978124999999999,
							"count": 1
						},
						{
							"x": 12.3,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 12.3,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 12.3,
							"y": 36.571875,
							"count": 2
						},
						{
							"x": 12.3,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 12.3,
							"y": 41.090625,
							"count": 2
						},
						{
							"x": 12.3,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 12.3,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 12.3,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 12.3,
							"y": 54.646875,
							"count": 2
						},
						{
							"x": 12.3,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 12.3,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 12.3,
							"y": 63.684375,
							"count": 2
						},
						{
							"x": 12.3,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 12.3,
							"y": 70.46249999999999,
							"count": 2
						},
						{
							"x": 12.3,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 13.8375,
							"y": 9.459375,
							"count": 2
						},
						{
							"x": 13.8375,
							"y": 13.978124999999999,
							"count": 1
						},
						{
							"x": 13.8375,
							"y": 20.756249999999998,
							"count": 2
						},
						{
							"x": 13.8375,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 13.8375,
							"y": 25.275,
							"count": 1
						},
						{
							"x": 13.8375,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 13.8375,
							"y": 36.571875,
							"count": 1
						},
						{
							"x": 13.8375,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 13.8375,
							"y": 47.86875,
							"count": 1
						},
						{
							"x": 13.8375,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 13.8375,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 13.8375,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 13.8375,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 13.8375,
							"y": 65.94375,
							"count": 4
						},
						{
							"x": 13.8375,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 15.375,
							"y": 11.71875,
							"count": 1
						},
						{
							"x": 15.375,
							"y": 16.2375,
							"count": 1
						},
						{
							"x": 15.375,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 15.375,
							"y": 25.275,
							"count": 1
						},
						{
							"x": 15.375,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 15.375,
							"y": 36.571875,
							"count": 1
						},
						{
							"x": 15.375,
							"y": 41.090625,
							"count": 1
						},
						{
							"x": 15.375,
							"y": 47.86875,
							"count": 1
						},
						{
							"x": 15.375,
							"y": 50.128125000000004,
							"count": 2
						},
						{
							"x": 15.375,
							"y": 59.165625,
							"count": 2
						},
						{
							"x": 15.375,
							"y": 63.684375,
							"count": 2
						},
						{
							"x": 15.375,
							"y": 68.203125,
							"count": 3
						},
						{
							"x": 15.375,
							"y": 77.240625,
							"count": 1
						},
						{
							"x": 16.9125,
							"y": 23.015625,
							"count": 2
						},
						{
							"x": 16.9125,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 16.9125,
							"y": 29.79375,
							"count": 2
						},
						{
							"x": 16.9125,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 16.9125,
							"y": 36.571875,
							"count": 1
						},
						{
							"x": 16.9125,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 16.9125,
							"y": 56.90625,
							"count": 2
						},
						{
							"x": 16.9125,
							"y": 61.425,
							"count": 2
						},
						{
							"x": 16.9125,
							"y": 63.684375,
							"count": 2
						},
						{
							"x": 16.9125,
							"y": 65.94375,
							"count": 2
						},
						{
							"x": 16.9125,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 16.9125,
							"y": 70.46249999999999,
							"count": 2
						},
						{
							"x": 16.9125,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 16.9125,
							"y": 74.98125,
							"count": 1
						},
						{
							"x": 18.450000000000003,
							"y": 9.459375,
							"count": 2
						},
						{
							"x": 18.450000000000003,
							"y": 13.978124999999999,
							"count": 1
						},
						{
							"x": 18.450000000000003,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 18.450000000000003,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 18.450000000000003,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 18.450000000000003,
							"y": 41.090625,
							"count": 1
						},
						{
							"x": 18.450000000000003,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 18.450000000000003,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 18.450000000000003,
							"y": 72.721875,
							"count": 2
						},
						{
							"x": 18.450000000000003,
							"y": 77.240625,
							"count": 1
						},
						{
							"x": 19.9875,
							"y": 16.2375,
							"count": 1
						},
						{
							"x": 19.9875,
							"y": 18.496875,
							"count": 2
						},
						{
							"x": 19.9875,
							"y": 38.83125,
							"count": 2
						},
						{
							"x": 19.9875,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 19.9875,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 19.9875,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 21.525000000000002,
							"y": 11.71875,
							"count": 1
						},
						{
							"x": 21.525000000000002,
							"y": 13.978124999999999,
							"count": 1
						},
						{
							"x": 21.525000000000002,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 21.525000000000002,
							"y": 25.275,
							"count": 1
						},
						{
							"x": 21.525000000000002,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 21.525000000000002,
							"y": 34.3125,
							"count": 1
						},
						{
							"x": 21.525000000000002,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 21.525000000000002,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 21.525000000000002,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 21.525000000000002,
							"y": 56.90625,
							"count": 2
						},
						{
							"x": 21.525000000000002,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 21.525000000000002,
							"y": 61.425,
							"count": 3
						},
						{
							"x": 21.525000000000002,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 21.525000000000002,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 23.0625,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 23.0625,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 23.0625,
							"y": 47.86875,
							"count": 1
						},
						{
							"x": 23.0625,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 23.0625,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 23.0625,
							"y": 74.98125,
							"count": 1
						},
						{
							"x": 24.6,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 24.6,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 24.6,
							"y": 36.571875,
							"count": 1
						},
						{
							"x": 24.6,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 24.6,
							"y": 41.090625,
							"count": 1
						},
						{
							"x": 24.6,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 24.6,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 24.6,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 24.6,
							"y": 74.98125,
							"count": 1
						},
						{
							"x": 26.137500000000003,
							"y": 16.2375,
							"count": 3
						},
						{
							"x": 26.137500000000003,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 26.137500000000003,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 26.137500000000003,
							"y": 47.86875,
							"count": 1
						},
						{
							"x": 26.137500000000003,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 26.137500000000003,
							"y": 65.94375,
							"count": 2
						},
						{
							"x": 26.137500000000003,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 26.137500000000003,
							"y": 77.240625,
							"count": 2
						},
						{
							"x": 27.675,
							"y": 41.090625,
							"count": 1
						},
						{
							"x": 27.675,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 27.675,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 27.675,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 27.675,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 29.212500000000002,
							"y": 25.275,
							"count": 1
						},
						{
							"x": 29.212500000000002,
							"y": 36.571875,
							"count": 1
						},
						{
							"x": 29.212500000000002,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 29.212500000000002,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 29.212500000000002,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 29.212500000000002,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 29.212500000000002,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 29.212500000000002,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 29.212500000000002,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 30.75,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 30.75,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 30.75,
							"y": 41.090625,
							"count": 1
						},
						{
							"x": 30.75,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 30.75,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 30.75,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 30.75,
							"y": 77.240625,
							"count": 1
						},
						{
							"x": 32.2875,
							"y": 36.571875,
							"count": 2
						},
						{
							"x": 32.2875,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 32.2875,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 32.2875,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 32.2875,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 33.825,
							"y": 11.71875,
							"count": 1
						},
						{
							"x": 33.825,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 33.825,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 33.825,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 33.825,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 33.825,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 33.825,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 33.825,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 36.900000000000006,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 36.900000000000006,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 38.4375,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 39.975,
							"y": 41.090625,
							"count": 1
						},
						{
							"x": 39.975,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 39.975,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 39.975,
							"y": 74.98125,
							"count": 1
						},
						{
							"x": 41.5125,
							"y": 16.2375,
							"count": 1
						},
						{
							"x": 44.587500000000006,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 47.6625,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 47.6625,
							"y": 70.46249999999999,
							"count": 1
						}
					],
					"x": {
						"extent": [
							0,
							49.2
						],
						"delta": 1.5375
					},
					"y": {
						"extent": [
							7.2,
							79.5
						],
						"delta": 2.259375
					},
					"maxCount": 6
				},
				"free throw percent": {
					"y": {
						"extent": [
							0,
							1
						],
						"delta": 0.03125
					},
					"x": {
						"extent": [
							0,
							49.2
						],
						"delta": 1.5375
					},
					"bins": [
						{
							"y": 0,
							"x": 0,
							"count": 7
						},
						{
							"y": 0,
							"x": 3.075,
							"count": 2
						},
						{
							"y": 0,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 0,
							"x": 6.15,
							"count": 1
						},
						{
							"y": 0,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 0,
							"x": 10.762500000000001,
							"count": 3
						},
						{
							"y": 0,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 0,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 0.15625,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.1875,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.25,
							"x": 3.075,
							"count": 1
						},
						{
							"y": 0.25,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 0.3125,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 0.3125,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 0.3125,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 0.34375,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 0.375,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.375,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 0.375,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 0.40625,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 0.40625,
							"x": 3.075,
							"count": 1
						},
						{
							"y": 0.40625,
							"x": 4.612500000000001,
							"count": 2
						},
						{
							"y": 0.4375,
							"x": 6.15,
							"count": 1
						},
						{
							"y": 0.4375,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0.46875,
							"x": 1.5375,
							"count": 2
						},
						{
							"y": 0.46875,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 0,
							"count": 2
						},
						{
							"y": 0.5,
							"x": 3.075,
							"count": 4
						},
						{
							"y": 0.5,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 0.5,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 0.5,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 10.762500000000001,
							"count": 4
						},
						{
							"y": 0.5,
							"x": 12.3,
							"count": 2
						},
						{
							"y": 0.5,
							"x": 15.375,
							"count": 2
						},
						{
							"y": 0.5,
							"x": 44.587500000000006,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 1.5375,
							"count": 2
						},
						{
							"y": 0.53125,
							"x": 3.075,
							"count": 2
						},
						{
							"y": 0.53125,
							"x": 4.612500000000001,
							"count": 2
						},
						{
							"y": 0.53125,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 0.53125,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 3.075,
							"count": 3
						},
						{
							"y": 0.5625,
							"x": 4.612500000000001,
							"count": 6
						},
						{
							"y": 0.5625,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 0.5625,
							"x": 7.6875,
							"count": 3
						},
						{
							"y": 0.5625,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 21.525000000000002,
							"count": 2
						},
						{
							"y": 0.5625,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 3.075,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 4.612500000000001,
							"count": 3
						},
						{
							"y": 0.59375,
							"x": 6.15,
							"count": 3
						},
						{
							"y": 0.59375,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 0.59375,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 19.9875,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 1.5375,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 3.075,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 4.612500000000001,
							"count": 6
						},
						{
							"y": 0.625,
							"x": 6.15,
							"count": 3
						},
						{
							"y": 0.625,
							"x": 7.6875,
							"count": 6
						},
						{
							"y": 0.625,
							"x": 9.225000000000001,
							"count": 3
						},
						{
							"y": 0.625,
							"x": 10.762500000000001,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 16.9125,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 19.9875,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 30.75,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 47.6625,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 3.075,
							"count": 3
						},
						{
							"y": 0.65625,
							"x": 4.612500000000001,
							"count": 5
						},
						{
							"y": 0.65625,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 7.6875,
							"count": 5
						},
						{
							"y": 0.65625,
							"x": 9.225000000000001,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 10.762500000000001,
							"count": 4
						},
						{
							"y": 0.65625,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 13.8375,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 30.75,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 3.075,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 4.612500000000001,
							"count": 4
						},
						{
							"y": 0.6875,
							"x": 6.15,
							"count": 5
						},
						{
							"y": 0.6875,
							"x": 7.6875,
							"count": 3
						},
						{
							"y": 0.6875,
							"x": 9.225000000000001,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 10.762500000000001,
							"count": 3
						},
						{
							"y": 0.6875,
							"x": 12.3,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 13.8375,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 18.450000000000003,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 24.6,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 3.075,
							"count": 4
						},
						{
							"y": 0.71875,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 6.15,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 9.225000000000001,
							"count": 8
						},
						{
							"y": 0.71875,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 12.3,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 15.375,
							"count": 3
						},
						{
							"y": 0.71875,
							"x": 16.9125,
							"count": 3
						},
						{
							"y": 0.71875,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 19.9875,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 23.0625,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 24.6,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 27.675,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 41.5125,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 3.075,
							"count": 4
						},
						{
							"y": 0.75,
							"x": 4.612500000000001,
							"count": 6
						},
						{
							"y": 0.75,
							"x": 6.15,
							"count": 8
						},
						{
							"y": 0.75,
							"x": 7.6875,
							"count": 11
						},
						{
							"y": 0.75,
							"x": 9.225000000000001,
							"count": 6
						},
						{
							"y": 0.75,
							"x": 10.762500000000001,
							"count": 10
						},
						{
							"y": 0.75,
							"x": 13.8375,
							"count": 3
						},
						{
							"y": 0.75,
							"x": 16.9125,
							"count": 3
						},
						{
							"y": 0.75,
							"x": 18.450000000000003,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 21.525000000000002,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 27.675,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 30.75,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 3.075,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 4.612500000000001,
							"count": 4
						},
						{
							"y": 0.78125,
							"x": 6.15,
							"count": 4
						},
						{
							"y": 0.78125,
							"x": 7.6875,
							"count": 11
						},
						{
							"y": 0.78125,
							"x": 9.225000000000001,
							"count": 3
						},
						{
							"y": 0.78125,
							"x": 10.762500000000001,
							"count": 3
						},
						{
							"y": 0.78125,
							"x": 12.3,
							"count": 5
						},
						{
							"y": 0.78125,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 15.375,
							"count": 4
						},
						{
							"y": 0.78125,
							"x": 16.9125,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 19.9875,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 21.525000000000002,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 23.0625,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 26.137500000000003,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 30.75,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 32.2875,
							"count": 4
						},
						{
							"y": 0.78125,
							"x": 36.900000000000006,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 38.4375,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 39.975,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 3.075,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 4.612500000000001,
							"count": 6
						},
						{
							"y": 0.8125,
							"x": 6.15,
							"count": 8
						},
						{
							"y": 0.8125,
							"x": 7.6875,
							"count": 4
						},
						{
							"y": 0.8125,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 10.762500000000001,
							"count": 5
						},
						{
							"y": 0.8125,
							"x": 12.3,
							"count": 5
						},
						{
							"y": 0.8125,
							"x": 13.8375,
							"count": 4
						},
						{
							"y": 0.8125,
							"x": 15.375,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 16.9125,
							"count": 5
						},
						{
							"y": 0.8125,
							"x": 18.450000000000003,
							"count": 4
						},
						{
							"y": 0.8125,
							"x": 19.9875,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 21.525000000000002,
							"count": 4
						},
						{
							"y": 0.8125,
							"x": 23.0625,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 29.212500000000002,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 33.825,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 39.975,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 6.15,
							"count": 4
						},
						{
							"y": 0.84375,
							"x": 7.6875,
							"count": 6
						},
						{
							"y": 0.84375,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 12.3,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 15.375,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 16.9125,
							"count": 4
						},
						{
							"y": 0.84375,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 23.0625,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 26.137500000000003,
							"count": 3
						},
						{
							"y": 0.84375,
							"x": 27.675,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 30.75,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 32.2875,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 33.825,
							"count": 3
						},
						{
							"y": 0.84375,
							"x": 47.6625,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 6.15,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 9.225000000000001,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 10.762500000000001,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 23.0625,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 27.675,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 29.212500000000002,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 39.975,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 6.15,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 12.3,
							"count": 3
						},
						{
							"y": 0.90625,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 39.975,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 3.075,
							"count": 2
						},
						{
							"y": 0.9375,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 32.2875,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 0,
							"count": 2
						},
						{
							"y": 0.96875,
							"x": 3.075,
							"count": 2
						},
						{
							"y": 0.96875,
							"x": 4.612500000000001,
							"count": 2
						},
						{
							"y": 0.96875,
							"x": 6.15,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 10.762500000000001,
							"count": 2
						},
						{
							"y": 0.96875,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 26.137500000000003,
							"count": 1
						}
					],
					"maxCount": 11
				},
				"minutes": {
					"y": {
						"extent": [
							5.1000000000000005,
							38.5
						],
						"delta": 1.04375
					},
					"x": {
						"extent": [
							0,
							49.2
						],
						"delta": 1.5375
					},
					"bins": [
						{
							"y": 5.1000000000000005,
							"x": 0,
							"count": 3
						},
						{
							"y": 5.1000000000000005,
							"x": 4.612500000000001,
							"count": 2
						},
						{
							"y": 5.1000000000000005,
							"x": 10.762500000000001,
							"count": 3
						},
						{
							"y": 5.1000000000000005,
							"x": 12.3,
							"count": 3
						},
						{
							"y": 5.1000000000000005,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 5.1000000000000005,
							"x": 18.450000000000003,
							"count": 2
						},
						{
							"y": 6.143750000000001,
							"x": 0,
							"count": 2
						},
						{
							"y": 6.143750000000001,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 6.143750000000001,
							"x": 3.075,
							"count": 1
						},
						{
							"y": 6.143750000000001,
							"x": 4.612500000000001,
							"count": 3
						},
						{
							"y": 6.143750000000001,
							"x": 6.15,
							"count": 4
						},
						{
							"y": 6.143750000000001,
							"x": 7.6875,
							"count": 3
						},
						{
							"y": 6.143750000000001,
							"x": 10.762500000000001,
							"count": 2
						},
						{
							"y": 6.143750000000001,
							"x": 12.3,
							"count": 2
						},
						{
							"y": 6.143750000000001,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 6.143750000000001,
							"x": 21.525000000000002,
							"count": 2
						},
						{
							"y": 6.143750000000001,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 7.1875,
							"x": 0,
							"count": 2
						},
						{
							"y": 7.1875,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 7.1875,
							"x": 3.075,
							"count": 5
						},
						{
							"y": 7.1875,
							"x": 4.612500000000001,
							"count": 2
						},
						{
							"y": 7.1875,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 7.1875,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 7.1875,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 7.1875,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 7.1875,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 7.1875,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 7.1875,
							"x": 19.9875,
							"count": 1
						},
						{
							"y": 7.1875,
							"x": 41.5125,
							"count": 1
						},
						{
							"y": 8.23125,
							"x": 0,
							"count": 4
						},
						{
							"y": 8.23125,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 8.23125,
							"x": 3.075,
							"count": 3
						},
						{
							"y": 8.23125,
							"x": 4.612500000000001,
							"count": 2
						},
						{
							"y": 8.23125,
							"x": 6.15,
							"count": 3
						},
						{
							"y": 8.23125,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 8.23125,
							"x": 9.225000000000001,
							"count": 4
						},
						{
							"y": 8.23125,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 8.23125,
							"x": 15.375,
							"count": 2
						},
						{
							"y": 8.23125,
							"x": 19.9875,
							"count": 1
						},
						{
							"y": 8.23125,
							"x": 26.137500000000003,
							"count": 3
						},
						{
							"y": 8.23125,
							"x": 30.75,
							"count": 1
						},
						{
							"y": 9.275,
							"x": 0,
							"count": 1
						},
						{
							"y": 9.275,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 9.275,
							"x": 3.075,
							"count": 4
						},
						{
							"y": 9.275,
							"x": 4.612500000000001,
							"count": 3
						},
						{
							"y": 9.275,
							"x": 6.15,
							"count": 3
						},
						{
							"y": 9.275,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 9.275,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 9.275,
							"x": 10.762500000000001,
							"count": 3
						},
						{
							"y": 9.275,
							"x": 19.9875,
							"count": 1
						},
						{
							"y": 9.275,
							"x": 23.0625,
							"count": 1
						},
						{
							"y": 10.318750000000001,
							"x": 3.075,
							"count": 2
						},
						{
							"y": 10.318750000000001,
							"x": 4.612500000000001,
							"count": 3
						},
						{
							"y": 10.318750000000001,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 10.318750000000001,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 10.318750000000001,
							"x": 9.225000000000001,
							"count": 2
						},
						{
							"y": 10.318750000000001,
							"x": 13.8375,
							"count": 2
						},
						{
							"y": 10.318750000000001,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 10.318750000000001,
							"x": 23.0625,
							"count": 1
						},
						{
							"y": 11.3625,
							"x": 4.612500000000001,
							"count": 4
						},
						{
							"y": 11.3625,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 11.3625,
							"x": 7.6875,
							"count": 3
						},
						{
							"y": 11.3625,
							"x": 9.225000000000001,
							"count": 2
						},
						{
							"y": 11.3625,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 11.3625,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 11.3625,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 12.40625,
							"x": 0,
							"count": 1
						},
						{
							"y": 12.40625,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 12.40625,
							"x": 3.075,
							"count": 3
						},
						{
							"y": 12.40625,
							"x": 4.612500000000001,
							"count": 2
						},
						{
							"y": 12.40625,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 12.40625,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 12.40625,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 12.40625,
							"x": 13.8375,
							"count": 2
						},
						{
							"y": 12.40625,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 12.40625,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 0,
							"count": 3
						},
						{
							"y": 13.45,
							"x": 1.5375,
							"count": 2
						},
						{
							"y": 13.45,
							"x": 3.075,
							"count": 3
						},
						{
							"y": 13.45,
							"x": 4.612500000000001,
							"count": 4
						},
						{
							"y": 13.45,
							"x": 6.15,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 14.493749999999999,
							"x": 0,
							"count": 1
						},
						{
							"y": 14.493749999999999,
							"x": 1.5375,
							"count": 2
						},
						{
							"y": 14.493749999999999,
							"x": 3.075,
							"count": 4
						},
						{
							"y": 14.493749999999999,
							"x": 4.612500000000001,
							"count": 4
						},
						{
							"y": 14.493749999999999,
							"x": 6.15,
							"count": 1
						},
						{
							"y": 14.493749999999999,
							"x": 7.6875,
							"count": 3
						},
						{
							"y": 14.493749999999999,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 14.493749999999999,
							"x": 16.9125,
							"count": 2
						},
						{
							"y": 14.493749999999999,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 14.493749999999999,
							"x": 30.75,
							"count": 1
						},
						{
							"y": 14.493749999999999,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 15.537500000000001,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 15.537500000000001,
							"x": 3.075,
							"count": 1
						},
						{
							"y": 15.537500000000001,
							"x": 6.15,
							"count": 3
						},
						{
							"y": 15.537500000000001,
							"x": 7.6875,
							"count": 5
						},
						{
							"y": 15.537500000000001,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 15.537500000000001,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 15.537500000000001,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 15.537500000000001,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 15.537500000000001,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 15.537500000000001,
							"x": 18.450000000000003,
							"count": 2
						},
						{
							"y": 15.537500000000001,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 15.537500000000001,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 16.58125,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 16.58125,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 16.58125,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 16.58125,
							"x": 9.225000000000001,
							"count": 3
						},
						{
							"y": 16.58125,
							"x": 10.762500000000001,
							"count": 3
						},
						{
							"y": 16.58125,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 17.625,
							"x": 4.612500000000001,
							"count": 2
						},
						{
							"y": 17.625,
							"x": 6.15,
							"count": 3
						},
						{
							"y": 17.625,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 17.625,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 17.625,
							"x": 10.762500000000001,
							"count": 3
						},
						{
							"y": 17.625,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 17.625,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 17.625,
							"x": 32.2875,
							"count": 2
						},
						{
							"y": 18.66875,
							"x": 0,
							"count": 1
						},
						{
							"y": 18.66875,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 18.66875,
							"x": 4.612500000000001,
							"count": 3
						},
						{
							"y": 18.66875,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 18.66875,
							"x": 7.6875,
							"count": 5
						},
						{
							"y": 18.66875,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 18.66875,
							"x": 10.762500000000001,
							"count": 4
						},
						{
							"y": 18.66875,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 18.66875,
							"x": 13.8375,
							"count": 2
						},
						{
							"y": 18.66875,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 18.66875,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 18.66875,
							"x": 19.9875,
							"count": 2
						},
						{
							"y": 18.66875,
							"x": 24.6,
							"count": 2
						},
						{
							"y": 18.66875,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 19.7125,
							"x": 3.075,
							"count": 3
						},
						{
							"y": 19.7125,
							"x": 4.612500000000001,
							"count": 4
						},
						{
							"y": 19.7125,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 19.7125,
							"x": 9.225000000000001,
							"count": 2
						},
						{
							"y": 19.7125,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 19.7125,
							"x": 12.3,
							"count": 3
						},
						{
							"y": 19.7125,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 19.7125,
							"x": 27.675,
							"count": 1
						},
						{
							"y": 19.7125,
							"x": 30.75,
							"count": 1
						},
						{
							"y": 19.7125,
							"x": 39.975,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 6.15,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 10.762500000000001,
							"count": 3
						},
						{
							"y": 20.75625,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 21.8,
							"x": 3.075,
							"count": 1
						},
						{
							"y": 21.8,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 21.8,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 21.8,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 21.8,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 21.8,
							"x": 27.675,
							"count": 1
						},
						{
							"y": 21.8,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 22.84375,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 22.84375,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 22.84375,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 22.84375,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 22.84375,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 22.84375,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 22.84375,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 23.8875,
							"x": 3.075,
							"count": 2
						},
						{
							"y": 23.8875,
							"x": 4.612500000000001,
							"count": 4
						},
						{
							"y": 23.8875,
							"x": 6.15,
							"count": 2
						},
						{
							"y": 23.8875,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 23.8875,
							"x": 10.762500000000001,
							"count": 2
						},
						{
							"y": 23.8875,
							"x": 13.8375,
							"count": 2
						},
						{
							"y": 23.8875,
							"x": 15.375,
							"count": 3
						},
						{
							"y": 23.8875,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 23.8875,
							"x": 23.0625,
							"count": 1
						},
						{
							"y": 24.931250000000002,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 24.931250000000002,
							"x": 7.6875,
							"count": 5
						},
						{
							"y": 24.931250000000002,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 24.931250000000002,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 24.931250000000002,
							"x": 19.9875,
							"count": 2
						},
						{
							"y": 24.931250000000002,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 24.931250000000002,
							"x": 32.2875,
							"count": 1
						},
						{
							"y": 25.975,
							"x": 4.612500000000001,
							"count": 3
						},
						{
							"y": 25.975,
							"x": 6.15,
							"count": 3
						},
						{
							"y": 25.975,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 25.975,
							"x": 9.225000000000001,
							"count": 3
						},
						{
							"y": 25.975,
							"x": 10.762500000000001,
							"count": 4
						},
						{
							"y": 25.975,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 27.01875,
							"x": 3.075,
							"count": 1
						},
						{
							"y": 27.01875,
							"x": 6.15,
							"count": 4
						},
						{
							"y": 27.01875,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 27.01875,
							"x": 9.225000000000001,
							"count": 2
						},
						{
							"y": 27.01875,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 27.01875,
							"x": 12.3,
							"count": 2
						},
						{
							"y": 27.01875,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 27.01875,
							"x": 16.9125,
							"count": 2
						},
						{
							"y": 27.01875,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 27.01875,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 28.0625,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 28.0625,
							"x": 6.15,
							"count": 1
						},
						{
							"y": 28.0625,
							"x": 7.6875,
							"count": 3
						},
						{
							"y": 28.0625,
							"x": 9.225000000000001,
							"count": 2
						},
						{
							"y": 28.0625,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 28.0625,
							"x": 21.525000000000002,
							"count": 2
						},
						{
							"y": 28.0625,
							"x": 23.0625,
							"count": 1
						},
						{
							"y": 28.0625,
							"x": 27.675,
							"count": 1
						},
						{
							"y": 28.0625,
							"x": 44.587500000000006,
							"count": 1
						},
						{
							"y": 29.10625,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 29.10625,
							"x": 6.15,
							"count": 3
						},
						{
							"y": 29.10625,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 29.10625,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 29.10625,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 29.10625,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 29.10625,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 29.10625,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 29.10625,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 29.10625,
							"x": 23.0625,
							"count": 1
						},
						{
							"y": 29.10625,
							"x": 30.75,
							"count": 1
						},
						{
							"y": 29.10625,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 7.6875,
							"count": 3
						},
						{
							"y": 30.15,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 21.525000000000002,
							"count": 2
						},
						{
							"y": 30.15,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 27.675,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 30.75,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 39.975,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 1.5375,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 3.075,
							"count": 2
						},
						{
							"y": 31.19375,
							"x": 4.612500000000001,
							"count": 2
						},
						{
							"y": 31.19375,
							"x": 6.15,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 31.19375,
							"x": 9.225000000000001,
							"count": 2
						},
						{
							"y": 31.19375,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 16.9125,
							"count": 4
						},
						{
							"y": 31.19375,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 32.2875,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 33.825,
							"count": 2
						},
						{
							"y": 31.19375,
							"x": 36.900000000000006,
							"count": 1
						},
						{
							"y": 32.2375,
							"x": 4.612500000000001,
							"count": 1
						},
						{
							"y": 32.2375,
							"x": 7.6875,
							"count": 2
						},
						{
							"y": 32.2375,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 32.2375,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 32.2375,
							"x": 13.8375,
							"count": 4
						},
						{
							"y": 32.2375,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 32.2375,
							"x": 24.6,
							"count": 2
						},
						{
							"y": 32.2375,
							"x": 26.137500000000003,
							"count": 2
						},
						{
							"y": 32.2375,
							"x": 32.2875,
							"count": 1
						},
						{
							"y": 32.2375,
							"x": 47.6625,
							"count": 1
						},
						{
							"y": 33.28125,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 33.28125,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 33.28125,
							"x": 10.762500000000001,
							"count": 2
						},
						{
							"y": 33.28125,
							"x": 12.3,
							"count": 2
						},
						{
							"y": 33.28125,
							"x": 15.375,
							"count": 2
						},
						{
							"y": 33.28125,
							"x": 29.212500000000002,
							"count": 2
						},
						{
							"y": 33.28125,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 33.28125,
							"x": 38.4375,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 3.075,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 7.6875,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 9.225000000000001,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 10.762500000000001,
							"count": 2
						},
						{
							"y": 34.324999999999996,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 13.8375,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 16.9125,
							"count": 2
						},
						{
							"y": 34.324999999999996,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 26.137500000000003,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 27.675,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 30.75,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 32.2875,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 47.6625,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 3.075,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 12.3,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 19.9875,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 21.525000000000002,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 23.0625,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 29.212500000000002,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 33.825,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 36.900000000000006,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 39.975,
							"count": 2
						},
						{
							"y": 36.4125,
							"x": 16.9125,
							"count": 1
						},
						{
							"y": 36.4125,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 36.4125,
							"x": 24.6,
							"count": 1
						},
						{
							"y": 37.45625,
							"x": 10.762500000000001,
							"count": 1
						},
						{
							"y": 37.45625,
							"x": 15.375,
							"count": 1
						},
						{
							"y": 37.45625,
							"x": 18.450000000000003,
							"count": 1
						},
						{
							"y": 37.45625,
							"x": 26.137500000000003,
							"count": 2
						},
						{
							"y": 37.45625,
							"x": 30.75,
							"count": 1
						}
					],
					"maxCount": 5
				}
			},
			"steals per game": {
				"minutes": {
					"y": {
						"extent": [
							5.1000000000000005,
							38.5
						],
						"delta": 1.04375
					},
					"x": {
						"extent": [
							0,
							2.48
						],
						"delta": 0.0775
					},
					"bins": [
						{
							"y": 5.1000000000000005,
							"x": 0,
							"count": 5
						},
						{
							"y": 5.1000000000000005,
							"x": 0.0775,
							"count": 2
						},
						{
							"y": 5.1000000000000005,
							"x": 0.155,
							"count": 2
						},
						{
							"y": 5.1000000000000005,
							"x": 0.23249999999999998,
							"count": 2
						},
						{
							"y": 5.1000000000000005,
							"x": 0.46499999999999997,
							"count": 3
						},
						{
							"y": 6.143750000000001,
							"x": 0,
							"count": 8
						},
						{
							"y": 6.143750000000001,
							"x": 0.0775,
							"count": 4
						},
						{
							"y": 6.143750000000001,
							"x": 0.155,
							"count": 6
						},
						{
							"y": 6.143750000000001,
							"x": 0.23249999999999998,
							"count": 2
						},
						{
							"y": 6.143750000000001,
							"x": 0.31,
							"count": 2
						},
						{
							"y": 7.1875,
							"x": 0,
							"count": 1
						},
						{
							"y": 7.1875,
							"x": 0.0775,
							"count": 6
						},
						{
							"y": 7.1875,
							"x": 0.155,
							"count": 7
						},
						{
							"y": 7.1875,
							"x": 0.23249999999999998,
							"count": 2
						},
						{
							"y": 7.1875,
							"x": 0.31,
							"count": 2
						},
						{
							"y": 7.1875,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 7.1875,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 8.23125,
							"x": 0,
							"count": 4
						},
						{
							"y": 8.23125,
							"x": 0.0775,
							"count": 4
						},
						{
							"y": 8.23125,
							"x": 0.155,
							"count": 8
						},
						{
							"y": 8.23125,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 8.23125,
							"x": 0.31,
							"count": 4
						},
						{
							"y": 8.23125,
							"x": 0.3875,
							"count": 1
						},
						{
							"y": 8.23125,
							"x": 0.46499999999999997,
							"count": 2
						},
						{
							"y": 8.23125,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 8.23125,
							"x": 1.9375,
							"count": 1
						},
						{
							"y": 9.275,
							"x": 0,
							"count": 1
						},
						{
							"y": 9.275,
							"x": 0.0775,
							"count": 3
						},
						{
							"y": 9.275,
							"x": 0.155,
							"count": 3
						},
						{
							"y": 9.275,
							"x": 0.23249999999999998,
							"count": 3
						},
						{
							"y": 9.275,
							"x": 0.31,
							"count": 3
						},
						{
							"y": 9.275,
							"x": 0.46499999999999997,
							"count": 4
						},
						{
							"y": 9.275,
							"x": 0.5425,
							"count": 3
						},
						{
							"y": 10.318750000000001,
							"x": 0,
							"count": 1
						},
						{
							"y": 10.318750000000001,
							"x": 0.0775,
							"count": 2
						},
						{
							"y": 10.318750000000001,
							"x": 0.23249999999999998,
							"count": 3
						},
						{
							"y": 10.318750000000001,
							"x": 0.31,
							"count": 3
						},
						{
							"y": 10.318750000000001,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 10.318750000000001,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 10.318750000000001,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 10.318750000000001,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 10.318750000000001,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 11.3625,
							"x": 0.0775,
							"count": 4
						},
						{
							"y": 11.3625,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 11.3625,
							"x": 0.31,
							"count": 4
						},
						{
							"y": 11.3625,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 11.3625,
							"x": 0.5425,
							"count": 2
						},
						{
							"y": 11.3625,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 11.3625,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 12.40625,
							"x": 0,
							"count": 1
						},
						{
							"y": 12.40625,
							"x": 0.155,
							"count": 3
						},
						{
							"y": 12.40625,
							"x": 0.31,
							"count": 3
						},
						{
							"y": 12.40625,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 12.40625,
							"x": 0.46499999999999997,
							"count": 3
						},
						{
							"y": 12.40625,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 12.40625,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 12.40625,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 0,
							"count": 2
						},
						{
							"y": 13.45,
							"x": 0.0775,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 0.23249999999999998,
							"count": 4
						},
						{
							"y": 13.45,
							"x": 0.31,
							"count": 2
						},
						{
							"y": 13.45,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 13.45,
							"x": 0.46499999999999997,
							"count": 4
						},
						{
							"y": 13.45,
							"x": 0.6975,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 13.45,
							"x": 1.24,
							"count": 1
						},
						{
							"y": 14.493749999999999,
							"x": 0,
							"count": 1
						},
						{
							"y": 14.493749999999999,
							"x": 0.23249999999999998,
							"count": 2
						},
						{
							"y": 14.493749999999999,
							"x": 0.31,
							"count": 4
						},
						{
							"y": 14.493749999999999,
							"x": 0.3875,
							"count": 5
						},
						{
							"y": 14.493749999999999,
							"x": 0.46499999999999997,
							"count": 3
						},
						{
							"y": 14.493749999999999,
							"x": 0.5425,
							"count": 2
						},
						{
							"y": 14.493749999999999,
							"x": 0.62,
							"count": 2
						},
						{
							"y": 14.493749999999999,
							"x": 0.6975,
							"count": 1
						},
						{
							"y": 14.493749999999999,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 15.537500000000001,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 15.537500000000001,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 15.537500000000001,
							"x": 0.31,
							"count": 5
						},
						{
							"y": 15.537500000000001,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 15.537500000000001,
							"x": 0.46499999999999997,
							"count": 2
						},
						{
							"y": 15.537500000000001,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 15.537500000000001,
							"x": 0.62,
							"count": 3
						},
						{
							"y": 15.537500000000001,
							"x": 0.6975,
							"count": 1
						},
						{
							"y": 15.537500000000001,
							"x": 0.8525,
							"count": 2
						},
						{
							"y": 15.537500000000001,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 16.58125,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 16.58125,
							"x": 0.31,
							"count": 2
						},
						{
							"y": 16.58125,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 16.58125,
							"x": 0.46499999999999997,
							"count": 2
						},
						{
							"y": 16.58125,
							"x": 0.5425,
							"count": 2
						},
						{
							"y": 16.58125,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 16.58125,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 16.58125,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 17.625,
							"x": 0,
							"count": 1
						},
						{
							"y": 17.625,
							"x": 0.31,
							"count": 5
						},
						{
							"y": 17.625,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 17.625,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 17.625,
							"x": 0.62,
							"count": 3
						},
						{
							"y": 17.625,
							"x": 0.6975,
							"count": 2
						},
						{
							"y": 17.625,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 18.66875,
							"x": 0,
							"count": 1
						},
						{
							"y": 18.66875,
							"x": 0.23249999999999998,
							"count": 2
						},
						{
							"y": 18.66875,
							"x": 0.31,
							"count": 1
						},
						{
							"y": 18.66875,
							"x": 0.3875,
							"count": 6
						},
						{
							"y": 18.66875,
							"x": 0.46499999999999997,
							"count": 3
						},
						{
							"y": 18.66875,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 18.66875,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 18.66875,
							"x": 0.6975,
							"count": 4
						},
						{
							"y": 18.66875,
							"x": 0.775,
							"count": 3
						},
						{
							"y": 18.66875,
							"x": 0.8525,
							"count": 2
						},
						{
							"y": 18.66875,
							"x": 0.9299999999999999,
							"count": 2
						},
						{
							"y": 18.66875,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 19.7125,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 19.7125,
							"x": 0.23249999999999998,
							"count": 3
						},
						{
							"y": 19.7125,
							"x": 0.31,
							"count": 2
						},
						{
							"y": 19.7125,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 19.7125,
							"x": 0.46499999999999997,
							"count": 3
						},
						{
							"y": 19.7125,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 19.7125,
							"x": 0.62,
							"count": 3
						},
						{
							"y": 19.7125,
							"x": 0.6975,
							"count": 2
						},
						{
							"y": 19.7125,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 19.7125,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 0.31,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 20.75625,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 0.5425,
							"count": 2
						},
						{
							"y": 20.75625,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 0.6975,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 20.75625,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 21.8,
							"x": 0.31,
							"count": 2
						},
						{
							"y": 21.8,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 21.8,
							"x": 0.62,
							"count": 2
						},
						{
							"y": 21.8,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 21.8,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 21.8,
							"x": 1.0075,
							"count": 2
						},
						{
							"y": 22.84375,
							"x": 0.46499999999999997,
							"count": 2
						},
						{
							"y": 22.84375,
							"x": 0.5425,
							"count": 3
						},
						{
							"y": 22.84375,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 22.84375,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 22.84375,
							"x": 1.6275,
							"count": 1
						},
						{
							"y": 23.8875,
							"x": 0.3875,
							"count": 1
						},
						{
							"y": 23.8875,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 23.8875,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 23.8875,
							"x": 0.62,
							"count": 6
						},
						{
							"y": 23.8875,
							"x": 0.6975,
							"count": 3
						},
						{
							"y": 23.8875,
							"x": 0.775,
							"count": 2
						},
						{
							"y": 23.8875,
							"x": 0.9299999999999999,
							"count": 2
						},
						{
							"y": 23.8875,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 23.8875,
							"x": 1.24,
							"count": 1
						},
						{
							"y": 24.931250000000002,
							"x": 0.31,
							"count": 1
						},
						{
							"y": 24.931250000000002,
							"x": 0.46499999999999997,
							"count": 2
						},
						{
							"y": 24.931250000000002,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 24.931250000000002,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 24.931250000000002,
							"x": 0.775,
							"count": 2
						},
						{
							"y": 24.931250000000002,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 24.931250000000002,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 24.931250000000002,
							"x": 1.085,
							"count": 1
						},
						{
							"y": 24.931250000000002,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 24.931250000000002,
							"x": 1.24,
							"count": 1
						},
						{
							"y": 25.975,
							"x": 0.31,
							"count": 2
						},
						{
							"y": 25.975,
							"x": 0.5425,
							"count": 2
						},
						{
							"y": 25.975,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 25.975,
							"x": 0.6975,
							"count": 4
						},
						{
							"y": 25.975,
							"x": 0.775,
							"count": 3
						},
						{
							"y": 25.975,
							"x": 0.8525,
							"count": 2
						},
						{
							"y": 25.975,
							"x": 1.085,
							"count": 1
						},
						{
							"y": 25.975,
							"x": 1.24,
							"count": 1
						},
						{
							"y": 27.01875,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 27.01875,
							"x": 0.3875,
							"count": 1
						},
						{
							"y": 27.01875,
							"x": 0.46499999999999997,
							"count": 2
						},
						{
							"y": 27.01875,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 27.01875,
							"x": 0.6975,
							"count": 3
						},
						{
							"y": 27.01875,
							"x": 0.775,
							"count": 2
						},
						{
							"y": 27.01875,
							"x": 0.8525,
							"count": 2
						},
						{
							"y": 27.01875,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 27.01875,
							"x": 1.085,
							"count": 1
						},
						{
							"y": 27.01875,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 27.01875,
							"x": 1.3175,
							"count": 1
						},
						{
							"y": 28.0625,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 28.0625,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 28.0625,
							"x": 0.6975,
							"count": 2
						},
						{
							"y": 28.0625,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 28.0625,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 28.0625,
							"x": 0.9299999999999999,
							"count": 3
						},
						{
							"y": 28.0625,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 28.0625,
							"x": 1.085,
							"count": 2
						},
						{
							"y": 28.0625,
							"x": 1.705,
							"count": 1
						},
						{
							"y": 29.10625,
							"x": 0.31,
							"count": 2
						},
						{
							"y": 29.10625,
							"x": 0.46499999999999997,
							"count": 2
						},
						{
							"y": 29.10625,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 29.10625,
							"x": 0.6975,
							"count": 1
						},
						{
							"y": 29.10625,
							"x": 0.8525,
							"count": 3
						},
						{
							"y": 29.10625,
							"x": 1.0075,
							"count": 3
						},
						{
							"y": 29.10625,
							"x": 1.1625,
							"count": 2
						},
						{
							"y": 29.10625,
							"x": 1.6275,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 0.6975,
							"count": 2
						},
						{
							"y": 30.15,
							"x": 0.775,
							"count": 3
						},
						{
							"y": 30.15,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 1.3175,
							"count": 2
						},
						{
							"y": 30.15,
							"x": 1.55,
							"count": 1
						},
						{
							"y": 30.15,
							"x": 1.8599999999999999,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 0.31,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 0.3875,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 0.46499999999999997,
							"count": 2
						},
						{
							"y": 31.19375,
							"x": 0.5425,
							"count": 2
						},
						{
							"y": 31.19375,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 0.6975,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 0.9299999999999999,
							"count": 2
						},
						{
							"y": 31.19375,
							"x": 1.0075,
							"count": 2
						},
						{
							"y": 31.19375,
							"x": 1.085,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 1.1625,
							"count": 2
						},
						{
							"y": 31.19375,
							"x": 1.24,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 1.395,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 1.4725,
							"count": 3
						},
						{
							"y": 31.19375,
							"x": 1.7825,
							"count": 1
						},
						{
							"y": 31.19375,
							"x": 2.2475,
							"count": 1
						},
						{
							"y": 32.2375,
							"x": 0.46499999999999997,
							"count": 2
						},
						{
							"y": 32.2375,
							"x": 0.5425,
							"count": 2
						},
						{
							"y": 32.2375,
							"x": 0.6975,
							"count": 1
						},
						{
							"y": 32.2375,
							"x": 0.8525,
							"count": 2
						},
						{
							"y": 32.2375,
							"x": 0.9299999999999999,
							"count": 3
						},
						{
							"y": 32.2375,
							"x": 1.085,
							"count": 1
						},
						{
							"y": 32.2375,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 32.2375,
							"x": 1.3175,
							"count": 1
						},
						{
							"y": 32.2375,
							"x": 1.395,
							"count": 2
						},
						{
							"y": 32.2375,
							"x": 1.55,
							"count": 1
						},
						{
							"y": 33.28125,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 33.28125,
							"x": 0.6975,
							"count": 1
						},
						{
							"y": 33.28125,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 33.28125,
							"x": 0.9299999999999999,
							"count": 3
						},
						{
							"y": 33.28125,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 33.28125,
							"x": 1.24,
							"count": 1
						},
						{
							"y": 33.28125,
							"x": 1.4725,
							"count": 1
						},
						{
							"y": 33.28125,
							"x": 1.6275,
							"count": 1
						},
						{
							"y": 33.28125,
							"x": 1.705,
							"count": 1
						},
						{
							"y": 33.28125,
							"x": 1.7825,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 0.9299999999999999,
							"count": 3
						},
						{
							"y": 34.324999999999996,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 1.24,
							"count": 2
						},
						{
							"y": 34.324999999999996,
							"x": 1.3175,
							"count": 3
						},
						{
							"y": 34.324999999999996,
							"x": 1.4725,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 1.55,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 1.6275,
							"count": 1
						},
						{
							"y": 34.324999999999996,
							"x": 2.4025,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 0.3875,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 0.6975,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 1.085,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 1.395,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 1.4725,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 1.55,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 1.6275,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 1.7825,
							"count": 1
						},
						{
							"y": 35.36875,
							"x": 1.8599999999999999,
							"count": 1
						},
						{
							"y": 36.4125,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 36.4125,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 36.4125,
							"x": 1.705,
							"count": 1
						},
						{
							"y": 37.45625,
							"x": 1.085,
							"count": 1
						},
						{
							"y": 37.45625,
							"x": 1.24,
							"count": 2
						},
						{
							"y": 37.45625,
							"x": 1.55,
							"count": 2
						},
						{
							"y": 37.45625,
							"x": 1.8599999999999999,
							"count": 1
						}
					],
					"maxCount": 8
				},
				"percentage of team assists": {
					"bins": [
						{
							"x": 0,
							"y": 0,
							"count": 6
						},
						{
							"x": 0,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 0,
							"y": 3.075,
							"count": 2
						},
						{
							"x": 0,
							"y": 4.612500000000001,
							"count": 3
						},
						{
							"x": 0,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 0,
							"y": 9.225000000000001,
							"count": 2
						},
						{
							"x": 0,
							"y": 10.762500000000001,
							"count": 4
						},
						{
							"x": 0,
							"y": 12.3,
							"count": 3
						},
						{
							"x": 0,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 0,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 0.0775,
							"y": 0,
							"count": 2
						},
						{
							"x": 0.0775,
							"y": 1.5375,
							"count": 3
						},
						{
							"x": 0.0775,
							"y": 3.075,
							"count": 2
						},
						{
							"x": 0.0775,
							"y": 4.612500000000001,
							"count": 4
						},
						{
							"x": 0.0775,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 0.0775,
							"y": 7.6875,
							"count": 4
						},
						{
							"x": 0.0775,
							"y": 9.225000000000001,
							"count": 3
						},
						{
							"x": 0.0775,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 0.0775,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0.0775,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 0.0775,
							"y": 18.450000000000003,
							"count": 2
						},
						{
							"x": 0.0775,
							"y": 30.75,
							"count": 1
						},
						{
							"x": 0.155,
							"y": 0,
							"count": 2
						},
						{
							"x": 0.155,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 0.155,
							"y": 3.075,
							"count": 6
						},
						{
							"x": 0.155,
							"y": 4.612500000000001,
							"count": 6
						},
						{
							"x": 0.155,
							"y": 6.15,
							"count": 7
						},
						{
							"x": 0.155,
							"y": 7.6875,
							"count": 3
						},
						{
							"x": 0.155,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 0.155,
							"y": 12.3,
							"count": 3
						},
						{
							"x": 0.155,
							"y": 19.9875,
							"count": 1
						},
						{
							"x": 0.155,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 0.155,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 0.155,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 0.23249999999999998,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.23249999999999998,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 0.23249999999999998,
							"y": 3.075,
							"count": 6
						},
						{
							"x": 0.23249999999999998,
							"y": 4.612500000000001,
							"count": 4
						},
						{
							"x": 0.23249999999999998,
							"y": 6.15,
							"count": 3
						},
						{
							"x": 0.23249999999999998,
							"y": 7.6875,
							"count": 4
						},
						{
							"x": 0.23249999999999998,
							"y": 9.225000000000001,
							"count": 3
						},
						{
							"x": 0.23249999999999998,
							"y": 10.762500000000001,
							"count": 3
						},
						{
							"x": 0.23249999999999998,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0.23249999999999998,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 0.31,
							"y": 0,
							"count": 2
						},
						{
							"x": 0.31,
							"y": 3.075,
							"count": 7
						},
						{
							"x": 0.31,
							"y": 4.612500000000001,
							"count": 8
						},
						{
							"x": 0.31,
							"y": 6.15,
							"count": 7
						},
						{
							"x": 0.31,
							"y": 7.6875,
							"count": 5
						},
						{
							"x": 0.31,
							"y": 9.225000000000001,
							"count": 3
						},
						{
							"x": 0.31,
							"y": 10.762500000000001,
							"count": 4
						},
						{
							"x": 0.31,
							"y": 12.3,
							"count": 2
						},
						{
							"x": 0.31,
							"y": 13.8375,
							"count": 3
						},
						{
							"x": 0.31,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 0.31,
							"y": 19.9875,
							"count": 1
						},
						{
							"x": 0.31,
							"y": 21.525000000000002,
							"count": 3
						},
						{
							"x": 0.31,
							"y": 23.0625,
							"count": 2
						},
						{
							"x": 0.31,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 0.31,
							"y": 32.2875,
							"count": 2
						},
						{
							"x": 0.3875,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.3875,
							"y": 1.5375,
							"count": 3
						},
						{
							"x": 0.3875,
							"y": 3.075,
							"count": 6
						},
						{
							"x": 0.3875,
							"y": 4.612500000000001,
							"count": 4
						},
						{
							"x": 0.3875,
							"y": 6.15,
							"count": 5
						},
						{
							"x": 0.3875,
							"y": 7.6875,
							"count": 5
						},
						{
							"x": 0.3875,
							"y": 9.225000000000001,
							"count": 2
						},
						{
							"x": 0.3875,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 0.3875,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0.3875,
							"y": 18.450000000000003,
							"count": 3
						},
						{
							"x": 0.3875,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 0.46499999999999997,
							"y": 0,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 0.46499999999999997,
							"y": 3.075,
							"count": 3
						},
						{
							"x": 0.46499999999999997,
							"y": 4.612500000000001,
							"count": 9
						},
						{
							"x": 0.46499999999999997,
							"y": 6.15,
							"count": 6
						},
						{
							"x": 0.46499999999999997,
							"y": 7.6875,
							"count": 4
						},
						{
							"x": 0.46499999999999997,
							"y": 9.225000000000001,
							"count": 3
						},
						{
							"x": 0.46499999999999997,
							"y": 10.762500000000001,
							"count": 3
						},
						{
							"x": 0.46499999999999997,
							"y": 12.3,
							"count": 4
						},
						{
							"x": 0.46499999999999997,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0.46499999999999997,
							"y": 15.375,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 16.9125,
							"count": 3
						},
						{
							"x": 0.46499999999999997,
							"y": 19.9875,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 21.525000000000002,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 0.46499999999999997,
							"y": 26.137500000000003,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 30.75,
							"count": 1
						},
						{
							"x": 0.46499999999999997,
							"y": 39.975,
							"count": 1
						},
						{
							"x": 0.46499999999999997,
							"y": 41.5125,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 4.612500000000001,
							"count": 2
						},
						{
							"x": 0.5425,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 0.5425,
							"y": 7.6875,
							"count": 6
						},
						{
							"x": 0.5425,
							"y": 9.225000000000001,
							"count": 3
						},
						{
							"x": 0.5425,
							"y": 10.762500000000001,
							"count": 4
						},
						{
							"x": 0.5425,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 15.375,
							"count": 3
						},
						{
							"x": 0.5425,
							"y": 16.9125,
							"count": 4
						},
						{
							"x": 0.5425,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 0.62,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 0.62,
							"y": 3.075,
							"count": 2
						},
						{
							"x": 0.62,
							"y": 4.612500000000001,
							"count": 7
						},
						{
							"x": 0.62,
							"y": 6.15,
							"count": 4
						},
						{
							"x": 0.62,
							"y": 7.6875,
							"count": 3
						},
						{
							"x": 0.62,
							"y": 10.762500000000001,
							"count": 3
						},
						{
							"x": 0.62,
							"y": 12.3,
							"count": 2
						},
						{
							"x": 0.62,
							"y": 13.8375,
							"count": 3
						},
						{
							"x": 0.62,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 0.62,
							"y": 18.450000000000003,
							"count": 2
						},
						{
							"x": 0.62,
							"y": 21.525000000000002,
							"count": 2
						},
						{
							"x": 0.62,
							"y": 24.6,
							"count": 2
						},
						{
							"x": 0.62,
							"y": 27.675,
							"count": 1
						},
						{
							"x": 0.62,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 0.6975,
							"y": 4.612500000000001,
							"count": 2
						},
						{
							"x": 0.6975,
							"y": 6.15,
							"count": 4
						},
						{
							"x": 0.6975,
							"y": 7.6875,
							"count": 5
						},
						{
							"x": 0.6975,
							"y": 9.225000000000001,
							"count": 3
						},
						{
							"x": 0.6975,
							"y": 10.762500000000001,
							"count": 5
						},
						{
							"x": 0.6975,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 0.6975,
							"y": 15.375,
							"count": 2
						},
						{
							"x": 0.6975,
							"y": 21.525000000000002,
							"count": 3
						},
						{
							"x": 0.6975,
							"y": 23.0625,
							"count": 1
						},
						{
							"x": 0.6975,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 0.6975,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 0.6975,
							"y": 30.75,
							"count": 1
						},
						{
							"x": 0.6975,
							"y": 32.2875,
							"count": 1
						},
						{
							"x": 0.6975,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 0.775,
							"y": 3.075,
							"count": 2
						},
						{
							"x": 0.775,
							"y": 4.612500000000001,
							"count": 2
						},
						{
							"x": 0.775,
							"y": 7.6875,
							"count": 5
						},
						{
							"x": 0.775,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 0.775,
							"y": 10.762500000000001,
							"count": 3
						},
						{
							"x": 0.775,
							"y": 12.3,
							"count": 3
						},
						{
							"x": 0.775,
							"y": 15.375,
							"count": 2
						},
						{
							"x": 0.775,
							"y": 16.9125,
							"count": 2
						},
						{
							"x": 0.775,
							"y": 19.9875,
							"count": 1
						},
						{
							"x": 0.775,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 0.775,
							"y": 24.6,
							"count": 2
						},
						{
							"x": 0.775,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 6.15,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 7.6875,
							"count": 4
						},
						{
							"x": 0.8525,
							"y": 9.225000000000001,
							"count": 2
						},
						{
							"x": 0.8525,
							"y": 10.762500000000001,
							"count": 2
						},
						{
							"x": 0.8525,
							"y": 12.3,
							"count": 2
						},
						{
							"x": 0.8525,
							"y": 13.8375,
							"count": 3
						},
						{
							"x": 0.8525,
							"y": 16.9125,
							"count": 2
						},
						{
							"x": 0.8525,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 19.9875,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 30.75,
							"count": 2
						},
						{
							"x": 0.8525,
							"y": 44.587500000000006,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 3.075,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 4.612500000000001,
							"count": 2
						},
						{
							"x": 0.9299999999999999,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 9.225000000000001,
							"count": 4
						},
						{
							"x": 0.9299999999999999,
							"y": 10.762500000000001,
							"count": 3
						},
						{
							"x": 0.9299999999999999,
							"y": 12.3,
							"count": 2
						},
						{
							"x": 0.9299999999999999,
							"y": 13.8375,
							"count": 2
						},
						{
							"x": 0.9299999999999999,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 16.9125,
							"count": 3
						},
						{
							"x": 0.9299999999999999,
							"y": 19.9875,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 27.675,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 6.15,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 7.6875,
							"count": 5
						},
						{
							"x": 1.0075,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 12.3,
							"count": 2
						},
						{
							"x": 1.0075,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 23.0625,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 27.675,
							"count": 1
						},
						{
							"x": 1.085,
							"y": 6.15,
							"count": 1
						},
						{
							"x": 1.085,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 1.085,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 1.085,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 1.085,
							"y": 18.450000000000003,
							"count": 2
						},
						{
							"x": 1.085,
							"y": 21.525000000000002,
							"count": 2
						},
						{
							"x": 1.085,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 1.1625,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 15.375,
							"count": 3
						},
						{
							"x": 1.1625,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 19.9875,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 27.675,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 29.212500000000002,
							"count": 2
						},
						{
							"x": 1.1625,
							"y": 32.2875,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 1.24,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 1.24,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 1.24,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 1.24,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 1.24,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 1.24,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 1.24,
							"y": 26.137500000000003,
							"count": 2
						},
						{
							"x": 1.24,
							"y": 32.2875,
							"count": 1
						},
						{
							"x": 1.24,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 1.3175,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 1.3175,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 1.3175,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 1.3175,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 1.3175,
							"y": 27.675,
							"count": 1
						},
						{
							"x": 1.3175,
							"y": 47.6625,
							"count": 1
						},
						{
							"x": 1.395,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 1.395,
							"y": 23.0625,
							"count": 1
						},
						{
							"x": 1.395,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 1.395,
							"y": 32.2875,
							"count": 1
						},
						{
							"x": 1.4725,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 1.4725,
							"y": 16.9125,
							"count": 2
						},
						{
							"x": 1.4725,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 1.4725,
							"y": 30.75,
							"count": 1
						},
						{
							"x": 1.4725,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 1.55,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 1.55,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 1.55,
							"y": 26.137500000000003,
							"count": 2
						},
						{
							"x": 1.55,
							"y": 30.75,
							"count": 1
						},
						{
							"x": 1.55,
							"y": 36.900000000000006,
							"count": 1
						},
						{
							"x": 1.6275,
							"y": 10.762500000000001,
							"count": 2
						},
						{
							"x": 1.6275,
							"y": 23.0625,
							"count": 1
						},
						{
							"x": 1.6275,
							"y": 38.4375,
							"count": 1
						},
						{
							"x": 1.6275,
							"y": 39.975,
							"count": 1
						},
						{
							"x": 1.705,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 1.705,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 1.705,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 1.7825,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 1.7825,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 1.7825,
							"y": 39.975,
							"count": 1
						},
						{
							"x": 1.8599999999999999,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 1.8599999999999999,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 1.8599999999999999,
							"y": 39.975,
							"count": 1
						},
						{
							"x": 1.9375,
							"y": 0,
							"count": 1
						},
						{
							"x": 2.2475,
							"y": 36.900000000000006,
							"count": 1
						},
						{
							"x": 2.4025,
							"y": 47.6625,
							"count": 1
						}
					],
					"x": {
						"extent": [
							0,
							2.48
						],
						"delta": 0.0775
					},
					"y": {
						"extent": [
							0,
							49.2
						],
						"delta": 1.5375
					},
					"maxCount": 9
				},
				"percentage of team minutes": {
					"bins": [
						{
							"x": 0,
							"y": 7.2,
							"count": 1
						},
						{
							"x": 0,
							"y": 9.459375,
							"count": 6
						},
						{
							"x": 0,
							"y": 11.71875,
							"count": 7
						},
						{
							"x": 0,
							"y": 13.978124999999999,
							"count": 3
						},
						{
							"x": 0,
							"y": 18.496875,
							"count": 3
						},
						{
							"x": 0,
							"y": 20.756249999999998,
							"count": 2
						},
						{
							"x": 0,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0,
							"y": 25.275,
							"count": 2
						},
						{
							"x": 0,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 0.0775,
							"y": 9.459375,
							"count": 2
						},
						{
							"x": 0.0775,
							"y": 11.71875,
							"count": 2
						},
						{
							"x": 0.0775,
							"y": 13.978124999999999,
							"count": 8
						},
						{
							"x": 0.0775,
							"y": 16.2375,
							"count": 3
						},
						{
							"x": 0.0775,
							"y": 18.496875,
							"count": 4
						},
						{
							"x": 0.0775,
							"y": 20.756249999999998,
							"count": 2
						},
						{
							"x": 0.0775,
							"y": 23.015625,
							"count": 3
						},
						{
							"x": 0.0775,
							"y": 25.275,
							"count": 1
						},
						{
							"x": 0.0775,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 0.155,
							"y": 9.459375,
							"count": 1
						},
						{
							"x": 0.155,
							"y": 11.71875,
							"count": 5
						},
						{
							"x": 0.155,
							"y": 13.978124999999999,
							"count": 7
						},
						{
							"x": 0.155,
							"y": 16.2375,
							"count": 8
						},
						{
							"x": 0.155,
							"y": 18.496875,
							"count": 5
						},
						{
							"x": 0.155,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.155,
							"y": 25.275,
							"count": 3
						},
						{
							"x": 0.155,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 0.155,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 0.155,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 0.23249999999999998,
							"y": 9.459375,
							"count": 1
						},
						{
							"x": 0.23249999999999998,
							"y": 11.71875,
							"count": 3
						},
						{
							"x": 0.23249999999999998,
							"y": 16.2375,
							"count": 3
						},
						{
							"x": 0.23249999999999998,
							"y": 18.496875,
							"count": 3
						},
						{
							"x": 0.23249999999999998,
							"y": 20.756249999999998,
							"count": 3
						},
						{
							"x": 0.23249999999999998,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.23249999999999998,
							"y": 25.275,
							"count": 1
						},
						{
							"x": 0.23249999999999998,
							"y": 27.534374999999997,
							"count": 2
						},
						{
							"x": 0.23249999999999998,
							"y": 29.79375,
							"count": 2
						},
						{
							"x": 0.23249999999999998,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 0.23249999999999998,
							"y": 34.3125,
							"count": 1
						},
						{
							"x": 0.23249999999999998,
							"y": 38.83125,
							"count": 3
						},
						{
							"x": 0.23249999999999998,
							"y": 41.090625,
							"count": 2
						},
						{
							"x": 0.23249999999999998,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 0.31,
							"y": 11.71875,
							"count": 1
						},
						{
							"x": 0.31,
							"y": 13.978124999999999,
							"count": 4
						},
						{
							"x": 0.31,
							"y": 16.2375,
							"count": 2
						},
						{
							"x": 0.31,
							"y": 18.496875,
							"count": 3
						},
						{
							"x": 0.31,
							"y": 20.756249999999998,
							"count": 4
						},
						{
							"x": 0.31,
							"y": 23.015625,
							"count": 2
						},
						{
							"x": 0.31,
							"y": 25.275,
							"count": 5
						},
						{
							"x": 0.31,
							"y": 27.534374999999997,
							"count": 3
						},
						{
							"x": 0.31,
							"y": 29.79375,
							"count": 4
						},
						{
							"x": 0.31,
							"y": 32.053125,
							"count": 3
						},
						{
							"x": 0.31,
							"y": 34.3125,
							"count": 4
						},
						{
							"x": 0.31,
							"y": 36.571875,
							"count": 5
						},
						{
							"x": 0.31,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 0.31,
							"y": 41.090625,
							"count": 1
						},
						{
							"x": 0.31,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 0.31,
							"y": 45.609375,
							"count": 2
						},
						{
							"x": 0.31,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 0.31,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 0.31,
							"y": 54.646875,
							"count": 1
						},
						{
							"x": 0.31,
							"y": 59.165625,
							"count": 2
						},
						{
							"x": 0.31,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 0.3875,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 0.3875,
							"y": 20.756249999999998,
							"count": 2
						},
						{
							"x": 0.3875,
							"y": 25.275,
							"count": 2
						},
						{
							"x": 0.3875,
							"y": 27.534374999999997,
							"count": 3
						},
						{
							"x": 0.3875,
							"y": 29.79375,
							"count": 4
						},
						{
							"x": 0.3875,
							"y": 32.053125,
							"count": 2
						},
						{
							"x": 0.3875,
							"y": 34.3125,
							"count": 3
						},
						{
							"x": 0.3875,
							"y": 36.571875,
							"count": 2
						},
						{
							"x": 0.3875,
							"y": 38.83125,
							"count": 6
						},
						{
							"x": 0.3875,
							"y": 41.090625,
							"count": 2
						},
						{
							"x": 0.3875,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 0.3875,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 0.3875,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 0.3875,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 0.3875,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 0.46499999999999997,
							"y": 7.2,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 9.459375,
							"count": 1
						},
						{
							"x": 0.46499999999999997,
							"y": 16.2375,
							"count": 3
						},
						{
							"x": 0.46499999999999997,
							"y": 18.496875,
							"count": 3
						},
						{
							"x": 0.46499999999999997,
							"y": 20.756249999999998,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.46499999999999997,
							"y": 25.275,
							"count": 4
						},
						{
							"x": 0.46499999999999997,
							"y": 27.534374999999997,
							"count": 3
						},
						{
							"x": 0.46499999999999997,
							"y": 29.79375,
							"count": 3
						},
						{
							"x": 0.46499999999999997,
							"y": 32.053125,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 34.3125,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 36.571875,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 38.83125,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 41.090625,
							"count": 3
						},
						{
							"x": 0.46499999999999997,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 0.46499999999999997,
							"y": 45.609375,
							"count": 3
						},
						{
							"x": 0.46499999999999997,
							"y": 47.86875,
							"count": 1
						},
						{
							"x": 0.46499999999999997,
							"y": 52.3875,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 54.646875,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 56.90625,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 59.165625,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 0.46499999999999997,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 0.46499999999999997,
							"y": 65.94375,
							"count": 2
						},
						{
							"x": 0.46499999999999997,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 13.978124999999999,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 16.2375,
							"count": 2
						},
						{
							"x": 0.5425,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 23.015625,
							"count": 4
						},
						{
							"x": 0.5425,
							"y": 29.79375,
							"count": 2
						},
						{
							"x": 0.5425,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 34.3125,
							"count": 2
						},
						{
							"x": 0.5425,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 41.090625,
							"count": 2
						},
						{
							"x": 0.5425,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 47.86875,
							"count": 2
						},
						{
							"x": 0.5425,
							"y": 50.128125000000004,
							"count": 2
						},
						{
							"x": 0.5425,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 54.646875,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 0.5425,
							"y": 63.684375,
							"count": 2
						},
						{
							"x": 0.5425,
							"y": 65.94375,
							"count": 2
						},
						{
							"x": 0.62,
							"y": 13.978124999999999,
							"count": 1
						},
						{
							"x": 0.62,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 0.62,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.62,
							"y": 25.275,
							"count": 1
						},
						{
							"x": 0.62,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 0.62,
							"y": 29.79375,
							"count": 3
						},
						{
							"x": 0.62,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 0.62,
							"y": 34.3125,
							"count": 1
						},
						{
							"x": 0.62,
							"y": 36.571875,
							"count": 3
						},
						{
							"x": 0.62,
							"y": 38.83125,
							"count": 2
						},
						{
							"x": 0.62,
							"y": 41.090625,
							"count": 3
						},
						{
							"x": 0.62,
							"y": 45.609375,
							"count": 2
						},
						{
							"x": 0.62,
							"y": 47.86875,
							"count": 4
						},
						{
							"x": 0.62,
							"y": 50.128125000000004,
							"count": 3
						},
						{
							"x": 0.62,
							"y": 54.646875,
							"count": 1
						},
						{
							"x": 0.62,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 0.62,
							"y": 61.425,
							"count": 2
						},
						{
							"x": 0.62,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 0.62,
							"y": 70.46249999999999,
							"count": 2
						},
						{
							"x": 0.6975,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 0.6975,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 0.6975,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 0.6975,
							"y": 36.571875,
							"count": 4
						},
						{
							"x": 0.6975,
							"y": 38.83125,
							"count": 2
						},
						{
							"x": 0.6975,
							"y": 41.090625,
							"count": 2
						},
						{
							"x": 0.6975,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 0.6975,
							"y": 47.86875,
							"count": 3
						},
						{
							"x": 0.6975,
							"y": 52.3875,
							"count": 2
						},
						{
							"x": 0.6975,
							"y": 54.646875,
							"count": 3
						},
						{
							"x": 0.6975,
							"y": 56.90625,
							"count": 4
						},
						{
							"x": 0.6975,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 0.6975,
							"y": 63.684375,
							"count": 3
						},
						{
							"x": 0.6975,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 0.6975,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 0.6975,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 0.775,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 0.775,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.775,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 0.775,
							"y": 34.3125,
							"count": 1
						},
						{
							"x": 0.775,
							"y": 36.571875,
							"count": 2
						},
						{
							"x": 0.775,
							"y": 38.83125,
							"count": 2
						},
						{
							"x": 0.775,
							"y": 41.090625,
							"count": 1
						},
						{
							"x": 0.775,
							"y": 50.128125000000004,
							"count": 4
						},
						{
							"x": 0.775,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 0.775,
							"y": 54.646875,
							"count": 2
						},
						{
							"x": 0.775,
							"y": 56.90625,
							"count": 3
						},
						{
							"x": 0.775,
							"y": 61.425,
							"count": 3
						},
						{
							"x": 0.775,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 0.775,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 0.775,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 32.053125,
							"count": 2
						},
						{
							"x": 0.8525,
							"y": 34.3125,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 36.571875,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 54.646875,
							"count": 3
						},
						{
							"x": 0.8525,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 59.165625,
							"count": 3
						},
						{
							"x": 0.8525,
							"y": 61.425,
							"count": 2
						},
						{
							"x": 0.8525,
							"y": 65.94375,
							"count": 2
						},
						{
							"x": 0.8525,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 0.8525,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 36.571875,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 41.090625,
							"count": 2
						},
						{
							"x": 0.9299999999999999,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 47.86875,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 50.128125000000004,
							"count": 2
						},
						{
							"x": 0.9299999999999999,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 59.165625,
							"count": 2
						},
						{
							"x": 0.9299999999999999,
							"y": 63.684375,
							"count": 2
						},
						{
							"x": 0.9299999999999999,
							"y": 65.94375,
							"count": 2
						},
						{
							"x": 0.9299999999999999,
							"y": 68.203125,
							"count": 5
						},
						{
							"x": 0.9299999999999999,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 0.9299999999999999,
							"y": 72.721875,
							"count": 2
						},
						{
							"x": 1.0075,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 43.35,
							"count": 2
						},
						{
							"x": 1.0075,
							"y": 45.609375,
							"count": 2
						},
						{
							"x": 1.0075,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 54.646875,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 59.165625,
							"count": 2
						},
						{
							"x": 1.0075,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 63.684375,
							"count": 3
						},
						{
							"x": 1.0075,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 1.0075,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 1.085,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 1.085,
							"y": 54.646875,
							"count": 1
						},
						{
							"x": 1.085,
							"y": 56.90625,
							"count": 3
						},
						{
							"x": 1.085,
							"y": 65.94375,
							"count": 2
						},
						{
							"x": 1.085,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 1.085,
							"y": 77.240625,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 47.86875,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 59.165625,
							"count": 2
						},
						{
							"x": 1.1625,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 63.684375,
							"count": 2
						},
						{
							"x": 1.1625,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 1.1625,
							"y": 74.98125,
							"count": 1
						},
						{
							"x": 1.24,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 1.24,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 1.24,
							"y": 52.3875,
							"count": 2
						},
						{
							"x": 1.24,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 1.24,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 1.24,
							"y": 70.46249999999999,
							"count": 2
						},
						{
							"x": 1.24,
							"y": 77.240625,
							"count": 2
						},
						{
							"x": 1.3175,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 1.3175,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 1.3175,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 1.3175,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 1.3175,
							"y": 70.46249999999999,
							"count": 2
						},
						{
							"x": 1.3175,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 1.395,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 1.395,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 1.395,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 1.395,
							"y": 74.98125,
							"count": 1
						},
						{
							"x": 1.4725,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 1.4725,
							"y": 65.94375,
							"count": 2
						},
						{
							"x": 1.4725,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 1.4725,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 1.4725,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 1.55,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 1.55,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 1.55,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 1.55,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 1.55,
							"y": 77.240625,
							"count": 2
						},
						{
							"x": 1.6275,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 1.6275,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 1.6275,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 1.6275,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 1.6275,
							"y": 74.98125,
							"count": 1
						},
						{
							"x": 1.705,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 1.705,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 1.705,
							"y": 74.98125,
							"count": 1
						},
						{
							"x": 1.7825,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 1.7825,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 1.7825,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 1.8599999999999999,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 1.8599999999999999,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 1.8599999999999999,
							"y": 77.240625,
							"count": 1
						},
						{
							"x": 1.9375,
							"y": 7.2,
							"count": 1
						},
						{
							"x": 2.2475,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 2.4025,
							"y": 70.46249999999999,
							"count": 1
						}
					],
					"x": {
						"extent": [
							0,
							2.48
						],
						"delta": 0.0775
					},
					"y": {
						"extent": [
							7.2,
							79.5
						],
						"delta": 2.259375
					},
					"maxCount": 8
				},
				"free throw percent": {
					"y": {
						"extent": [
							0,
							1
						],
						"delta": 0.03125
					},
					"x": {
						"extent": [
							0,
							2.48
						],
						"delta": 0.0775
					},
					"bins": [
						{
							"y": 0,
							"x": 0,
							"count": 9
						},
						{
							"y": 0,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 0,
							"x": 0.23249999999999998,
							"count": 3
						},
						{
							"y": 0,
							"x": 0.3875,
							"count": 1
						},
						{
							"y": 0,
							"x": 0.46499999999999997,
							"count": 3
						},
						{
							"y": 0,
							"x": 1.9375,
							"count": 1
						},
						{
							"y": 0.15625,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.1875,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 0.25,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 0.25,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 0.3125,
							"x": 0.0775,
							"count": 1
						},
						{
							"y": 0.3125,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 0.3125,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 0.34375,
							"x": 0.6975,
							"count": 1
						},
						{
							"y": 0.375,
							"x": 0.0775,
							"count": 2
						},
						{
							"y": 0.375,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 0.40625,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 0.40625,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 0.40625,
							"x": 1.24,
							"count": 2
						},
						{
							"y": 0.4375,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 0.4375,
							"x": 1.24,
							"count": 1
						},
						{
							"y": 0.46875,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 0.46875,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 0.46875,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 0,
							"count": 4
						},
						{
							"y": 0.5,
							"x": 0.0775,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 0.155,
							"count": 3
						},
						{
							"y": 0.5,
							"x": 0.23249999999999998,
							"count": 3
						},
						{
							"y": 0.5,
							"x": 0.31,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 0.3875,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 0.46499999999999997,
							"count": 3
						},
						{
							"y": 0.5,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 0.62,
							"count": 2
						},
						{
							"y": 0.5,
							"x": 0.8525,
							"count": 2
						},
						{
							"y": 0.53125,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 0.0775,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 0.155,
							"count": 2
						},
						{
							"y": 0.53125,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 0.53125,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 1.3175,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 0.0775,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 0.23249999999999998,
							"count": 4
						},
						{
							"y": 0.5625,
							"x": 0.31,
							"count": 4
						},
						{
							"y": 0.5625,
							"x": 0.3875,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 0.46499999999999997,
							"count": 3
						},
						{
							"y": 0.5625,
							"x": 0.6975,
							"count": 3
						},
						{
							"y": 0.5625,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 0.0775,
							"count": 2
						},
						{
							"y": 0.59375,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 0.31,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 0.5425,
							"count": 2
						},
						{
							"y": 0.59375,
							"x": 0.62,
							"count": 2
						},
						{
							"y": 0.59375,
							"x": 0.6975,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 0.0775,
							"count": 3
						},
						{
							"y": 0.625,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 0.31,
							"count": 4
						},
						{
							"y": 0.625,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 0.46499999999999997,
							"count": 3
						},
						{
							"y": 0.625,
							"x": 0.5425,
							"count": 3
						},
						{
							"y": 0.625,
							"x": 0.62,
							"count": 3
						},
						{
							"y": 0.625,
							"x": 0.6975,
							"count": 4
						},
						{
							"y": 0.625,
							"x": 0.8525,
							"count": 3
						},
						{
							"y": 0.625,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 1.3175,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 1.4725,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 1.6275,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 0.0775,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 0.155,
							"count": 3
						},
						{
							"y": 0.65625,
							"x": 0.31,
							"count": 6
						},
						{
							"y": 0.65625,
							"x": 0.3875,
							"count": 4
						},
						{
							"y": 0.65625,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 0.5425,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 0.62,
							"count": 4
						},
						{
							"y": 0.65625,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 1.0075,
							"count": 4
						},
						{
							"y": 0.65625,
							"x": 1.085,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 0,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 0.0775,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 0.155,
							"count": 3
						},
						{
							"y": 0.6875,
							"x": 0.31,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 0.3875,
							"count": 4
						},
						{
							"y": 0.6875,
							"x": 0.46499999999999997,
							"count": 5
						},
						{
							"y": 0.6875,
							"x": 0.5425,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 0.62,
							"count": 6
						},
						{
							"y": 0.6875,
							"x": 0.775,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 1.085,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 1.7825,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 0.31,
							"count": 7
						},
						{
							"y": 0.71875,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 0.46499999999999997,
							"count": 5
						},
						{
							"y": 0.71875,
							"x": 0.5425,
							"count": 4
						},
						{
							"y": 0.71875,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 0.6975,
							"count": 3
						},
						{
							"y": 0.71875,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 0.8525,
							"count": 3
						},
						{
							"y": 0.71875,
							"x": 0.9299999999999999,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 1.1625,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 1.24,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 1.395,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 1.4725,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 1.6275,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 1.705,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 0,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 0.0775,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 0.155,
							"count": 3
						},
						{
							"y": 0.75,
							"x": 0.23249999999999998,
							"count": 7
						},
						{
							"y": 0.75,
							"x": 0.31,
							"count": 8
						},
						{
							"y": 0.75,
							"x": 0.3875,
							"count": 5
						},
						{
							"y": 0.75,
							"x": 0.46499999999999997,
							"count": 4
						},
						{
							"y": 0.75,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 0.62,
							"count": 3
						},
						{
							"y": 0.75,
							"x": 0.6975,
							"count": 4
						},
						{
							"y": 0.75,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 0.8525,
							"count": 3
						},
						{
							"y": 0.75,
							"x": 0.9299999999999999,
							"count": 4
						},
						{
							"y": 0.75,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 1.085,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 1.24,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 1.3175,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 1.4725,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 1.55,
							"count": 4
						},
						{
							"y": 0.75,
							"x": 1.6275,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 1.8599999999999999,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 0.0775,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 0.155,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 0.31,
							"count": 6
						},
						{
							"y": 0.78125,
							"x": 0.46499999999999997,
							"count": 9
						},
						{
							"y": 0.78125,
							"x": 0.5425,
							"count": 4
						},
						{
							"y": 0.78125,
							"x": 0.62,
							"count": 4
						},
						{
							"y": 0.78125,
							"x": 0.6975,
							"count": 5
						},
						{
							"y": 0.78125,
							"x": 0.775,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 0.8525,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 0.9299999999999999,
							"count": 7
						},
						{
							"y": 0.78125,
							"x": 1.0075,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 1.085,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 1.1625,
							"count": 3
						},
						{
							"y": 0.78125,
							"x": 1.3175,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 1.395,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 1.55,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 1.6275,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 1.705,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 1.7825,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 2.2475,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 0.0775,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 0.155,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 0.31,
							"count": 4
						},
						{
							"y": 0.8125,
							"x": 0.3875,
							"count": 6
						},
						{
							"y": 0.8125,
							"x": 0.46499999999999997,
							"count": 8
						},
						{
							"y": 0.8125,
							"x": 0.5425,
							"count": 5
						},
						{
							"y": 0.8125,
							"x": 0.62,
							"count": 4
						},
						{
							"y": 0.8125,
							"x": 0.6975,
							"count": 6
						},
						{
							"y": 0.8125,
							"x": 0.775,
							"count": 4
						},
						{
							"y": 0.8125,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 0.9299999999999999,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 1.0075,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 1.085,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 1.1625,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 1.3175,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 1.395,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 1.4725,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 1.8599999999999999,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 0.155,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 0.46499999999999997,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 0.62,
							"count": 3
						},
						{
							"y": 0.84375,
							"x": 0.6975,
							"count": 3
						},
						{
							"y": 0.84375,
							"x": 0.775,
							"count": 6
						},
						{
							"y": 0.84375,
							"x": 0.8525,
							"count": 3
						},
						{
							"y": 0.84375,
							"x": 1.0075,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 1.085,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 1.24,
							"count": 3
						},
						{
							"y": 0.84375,
							"x": 1.395,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 1.4725,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 1.55,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 1.8599999999999999,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 2.4025,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 0,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 0.0775,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 0.31,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 0.3875,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 0.5425,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 0.6975,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 0.775,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 0.8525,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 0.9299999999999999,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 1.6275,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 0.0775,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 0.31,
							"count": 2
						},
						{
							"y": 0.90625,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 0.31,
							"count": 3
						},
						{
							"y": 0.9375,
							"x": 0.3875,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 0,
							"count": 4
						},
						{
							"y": 0.96875,
							"x": 0.0775,
							"count": 3
						},
						{
							"y": 0.96875,
							"x": 0.155,
							"count": 5
						},
						{
							"y": 0.96875,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 0.31,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 0.62,
							"count": 1
						}
					],
					"maxCount": 9
				},
				"true shooting percentage": {
					"y": {
						"extent": [
							0,
							0.8200000000000001
						],
						"delta": 0.025625000000000002
					},
					"x": {
						"extent": [
							0,
							2.48
						],
						"delta": 0.0775
					},
					"bins": [
						{
							"y": 0,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 0,
							"x": 0.46499999999999997,
							"count": 2
						},
						{
							"y": 0.179375,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.20500000000000002,
							"x": 0.23249999999999998,
							"count": 2
						},
						{
							"y": 0.23062500000000002,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.23062500000000002,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 0.25625000000000003,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.25625000000000003,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 0.28187500000000004,
							"x": 0,
							"count": 3
						},
						{
							"y": 0.3075,
							"x": 0,
							"count": 3
						},
						{
							"y": 0.3075,
							"x": 0.0775,
							"count": 1
						},
						{
							"y": 0.3075,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 0.333125,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 0.333125,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 0.35875,
							"x": 0,
							"count": 2
						},
						{
							"y": 0.35875,
							"x": 0.0775,
							"count": 2
						},
						{
							"y": 0.35875,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 0.35875,
							"x": 0.3875,
							"count": 1
						},
						{
							"y": 0.35875,
							"x": 0.775,
							"count": 1
						},
						{
							"y": 0.384375,
							"x": 0.0775,
							"count": 2
						},
						{
							"y": 0.384375,
							"x": 0.155,
							"count": 2
						},
						{
							"y": 0.384375,
							"x": 0.31,
							"count": 1
						},
						{
							"y": 0.384375,
							"x": 0.3875,
							"count": 1
						},
						{
							"y": 0.384375,
							"x": 0.5425,
							"count": 1
						},
						{
							"y": 0.384375,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 0.41000000000000003,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.41000000000000003,
							"x": 0.0775,
							"count": 1
						},
						{
							"y": 0.41000000000000003,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 0.41000000000000003,
							"x": 0.31,
							"count": 1
						},
						{
							"y": 0.41000000000000003,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 0.41000000000000003,
							"x": 0.46499999999999997,
							"count": 3
						},
						{
							"y": 0.41000000000000003,
							"x": 0.5425,
							"count": 3
						},
						{
							"y": 0.43562500000000004,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.43562500000000004,
							"x": 0.0775,
							"count": 3
						},
						{
							"y": 0.43562500000000004,
							"x": 0.155,
							"count": 5
						},
						{
							"y": 0.43562500000000004,
							"x": 0.23249999999999998,
							"count": 5
						},
						{
							"y": 0.43562500000000004,
							"x": 0.31,
							"count": 5
						},
						{
							"y": 0.43562500000000004,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 0.43562500000000004,
							"x": 0.46499999999999997,
							"count": 7
						},
						{
							"y": 0.43562500000000004,
							"x": 0.5425,
							"count": 2
						},
						{
							"y": 0.43562500000000004,
							"x": 0.62,
							"count": 3
						},
						{
							"y": 0.43562500000000004,
							"x": 0.6975,
							"count": 2
						},
						{
							"y": 0.43562500000000004,
							"x": 1.3175,
							"count": 1
						},
						{
							"y": 0.46125000000000005,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.46125000000000005,
							"x": 0.0775,
							"count": 4
						},
						{
							"y": 0.46125000000000005,
							"x": 0.155,
							"count": 2
						},
						{
							"y": 0.46125000000000005,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 0.46125000000000005,
							"x": 0.31,
							"count": 6
						},
						{
							"y": 0.46125000000000005,
							"x": 0.3875,
							"count": 6
						},
						{
							"y": 0.46125000000000005,
							"x": 0.46499999999999997,
							"count": 2
						},
						{
							"y": 0.46125000000000005,
							"x": 0.5425,
							"count": 3
						},
						{
							"y": 0.46125000000000005,
							"x": 0.62,
							"count": 5
						},
						{
							"y": 0.46125000000000005,
							"x": 0.6975,
							"count": 1
						},
						{
							"y": 0.46125000000000005,
							"x": 0.775,
							"count": 3
						},
						{
							"y": 0.46125000000000005,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 0.46125000000000005,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 0.46125000000000005,
							"x": 1.1625,
							"count": 1
						},
						{
							"y": 0.46125000000000005,
							"x": 1.24,
							"count": 2
						},
						{
							"y": 0.46125000000000005,
							"x": 1.3175,
							"count": 1
						},
						{
							"y": 0.46125000000000005,
							"x": 1.55,
							"count": 1
						},
						{
							"y": 0.46125000000000005,
							"x": 1.7825,
							"count": 1
						},
						{
							"y": 0.48687500000000006,
							"x": 0,
							"count": 2
						},
						{
							"y": 0.48687500000000006,
							"x": 0.0775,
							"count": 3
						},
						{
							"y": 0.48687500000000006,
							"x": 0.155,
							"count": 8
						},
						{
							"y": 0.48687500000000006,
							"x": 0.23249999999999998,
							"count": 3
						},
						{
							"y": 0.48687500000000006,
							"x": 0.31,
							"count": 19
						},
						{
							"y": 0.48687500000000006,
							"x": 0.3875,
							"count": 4
						},
						{
							"y": 0.48687500000000006,
							"x": 0.46499999999999997,
							"count": 5
						},
						{
							"y": 0.48687500000000006,
							"x": 0.5425,
							"count": 3
						},
						{
							"y": 0.48687500000000006,
							"x": 0.62,
							"count": 5
						},
						{
							"y": 0.48687500000000006,
							"x": 0.6975,
							"count": 4
						},
						{
							"y": 0.48687500000000006,
							"x": 0.775,
							"count": 4
						},
						{
							"y": 0.48687500000000006,
							"x": 0.8525,
							"count": 3
						},
						{
							"y": 0.48687500000000006,
							"x": 0.9299999999999999,
							"count": 6
						},
						{
							"y": 0.48687500000000006,
							"x": 1.0075,
							"count": 3
						},
						{
							"y": 0.48687500000000006,
							"x": 1.085,
							"count": 1
						},
						{
							"y": 0.48687500000000006,
							"x": 1.1625,
							"count": 4
						},
						{
							"y": 0.48687500000000006,
							"x": 1.24,
							"count": 1
						},
						{
							"y": 0.48687500000000006,
							"x": 1.6275,
							"count": 1
						},
						{
							"y": 0.48687500000000006,
							"x": 1.9375,
							"count": 1
						},
						{
							"y": 0.48687500000000006,
							"x": 2.2475,
							"count": 1
						},
						{
							"y": 0.5125000000000001,
							"x": 0,
							"count": 4
						},
						{
							"y": 0.5125000000000001,
							"x": 0.0775,
							"count": 3
						},
						{
							"y": 0.5125000000000001,
							"x": 0.155,
							"count": 2
						},
						{
							"y": 0.5125000000000001,
							"x": 0.23249999999999998,
							"count": 5
						},
						{
							"y": 0.5125000000000001,
							"x": 0.31,
							"count": 6
						},
						{
							"y": 0.5125000000000001,
							"x": 0.3875,
							"count": 5
						},
						{
							"y": 0.5125000000000001,
							"x": 0.46499999999999997,
							"count": 11
						},
						{
							"y": 0.5125000000000001,
							"x": 0.5425,
							"count": 4
						},
						{
							"y": 0.5125000000000001,
							"x": 0.62,
							"count": 10
						},
						{
							"y": 0.5125000000000001,
							"x": 0.6975,
							"count": 9
						},
						{
							"y": 0.5125000000000001,
							"x": 0.775,
							"count": 2
						},
						{
							"y": 0.5125000000000001,
							"x": 0.8525,
							"count": 6
						},
						{
							"y": 0.5125000000000001,
							"x": 0.9299999999999999,
							"count": 6
						},
						{
							"y": 0.5125000000000001,
							"x": 1.0075,
							"count": 6
						},
						{
							"y": 0.5125000000000001,
							"x": 1.085,
							"count": 3
						},
						{
							"y": 0.5125000000000001,
							"x": 1.1625,
							"count": 3
						},
						{
							"y": 0.5125000000000001,
							"x": 1.24,
							"count": 2
						},
						{
							"y": 0.5125000000000001,
							"x": 1.395,
							"count": 1
						},
						{
							"y": 0.5125000000000001,
							"x": 1.4725,
							"count": 1
						},
						{
							"y": 0.5125000000000001,
							"x": 1.55,
							"count": 1
						},
						{
							"y": 0.5125000000000001,
							"x": 1.6275,
							"count": 1
						},
						{
							"y": 0.5125000000000001,
							"x": 1.705,
							"count": 1
						},
						{
							"y": 0.5125000000000001,
							"x": 1.7825,
							"count": 1
						},
						{
							"y": 0.5125000000000001,
							"x": 1.8599999999999999,
							"count": 1
						},
						{
							"y": 0.5381250000000001,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.5381250000000001,
							"x": 0.155,
							"count": 5
						},
						{
							"y": 0.5381250000000001,
							"x": 0.23249999999999998,
							"count": 3
						},
						{
							"y": 0.5381250000000001,
							"x": 0.31,
							"count": 4
						},
						{
							"y": 0.5381250000000001,
							"x": 0.3875,
							"count": 5
						},
						{
							"y": 0.5381250000000001,
							"x": 0.46499999999999997,
							"count": 9
						},
						{
							"y": 0.5381250000000001,
							"x": 0.5425,
							"count": 8
						},
						{
							"y": 0.5381250000000001,
							"x": 0.62,
							"count": 3
						},
						{
							"y": 0.5381250000000001,
							"x": 0.6975,
							"count": 6
						},
						{
							"y": 0.5381250000000001,
							"x": 0.775,
							"count": 6
						},
						{
							"y": 0.5381250000000001,
							"x": 0.8525,
							"count": 7
						},
						{
							"y": 0.5381250000000001,
							"x": 0.9299999999999999,
							"count": 5
						},
						{
							"y": 0.5381250000000001,
							"x": 1.0075,
							"count": 3
						},
						{
							"y": 0.5381250000000001,
							"x": 1.085,
							"count": 2
						},
						{
							"y": 0.5381250000000001,
							"x": 1.1625,
							"count": 3
						},
						{
							"y": 0.5381250000000001,
							"x": 1.24,
							"count": 2
						},
						{
							"y": 0.5381250000000001,
							"x": 1.3175,
							"count": 3
						},
						{
							"y": 0.5381250000000001,
							"x": 1.4725,
							"count": 2
						},
						{
							"y": 0.5381250000000001,
							"x": 1.55,
							"count": 1
						},
						{
							"y": 0.5381250000000001,
							"x": 1.705,
							"count": 1
						},
						{
							"y": 0.5381250000000001,
							"x": 1.7825,
							"count": 1
						},
						{
							"y": 0.5381250000000001,
							"x": 1.8599999999999999,
							"count": 2
						},
						{
							"y": 0.5637500000000001,
							"x": 0.0775,
							"count": 1
						},
						{
							"y": 0.5637500000000001,
							"x": 0.23249999999999998,
							"count": 5
						},
						{
							"y": 0.5637500000000001,
							"x": 0.31,
							"count": 5
						},
						{
							"y": 0.5637500000000001,
							"x": 0.3875,
							"count": 3
						},
						{
							"y": 0.5637500000000001,
							"x": 0.46499999999999997,
							"count": 8
						},
						{
							"y": 0.5637500000000001,
							"x": 0.5425,
							"count": 6
						},
						{
							"y": 0.5637500000000001,
							"x": 0.62,
							"count": 5
						},
						{
							"y": 0.5637500000000001,
							"x": 0.6975,
							"count": 4
						},
						{
							"y": 0.5637500000000001,
							"x": 0.775,
							"count": 6
						},
						{
							"y": 0.5637500000000001,
							"x": 0.8525,
							"count": 4
						},
						{
							"y": 0.5637500000000001,
							"x": 0.9299999999999999,
							"count": 4
						},
						{
							"y": 0.5637500000000001,
							"x": 1.085,
							"count": 2
						},
						{
							"y": 0.5637500000000001,
							"x": 1.1625,
							"count": 2
						},
						{
							"y": 0.5637500000000001,
							"x": 1.24,
							"count": 1
						},
						{
							"y": 0.5637500000000001,
							"x": 1.3175,
							"count": 1
						},
						{
							"y": 0.5637500000000001,
							"x": 1.395,
							"count": 2
						},
						{
							"y": 0.5637500000000001,
							"x": 1.4725,
							"count": 3
						},
						{
							"y": 0.5637500000000001,
							"x": 1.55,
							"count": 1
						},
						{
							"y": 0.5637500000000001,
							"x": 1.6275,
							"count": 1
						},
						{
							"y": 0.5637500000000001,
							"x": 2.4025,
							"count": 1
						},
						{
							"y": 0.5893750000000001,
							"x": 0,
							"count": 2
						},
						{
							"y": 0.5893750000000001,
							"x": 0.0775,
							"count": 2
						},
						{
							"y": 0.5893750000000001,
							"x": 0.155,
							"count": 2
						},
						{
							"y": 0.5893750000000001,
							"x": 0.23249999999999998,
							"count": 1
						},
						{
							"y": 0.5893750000000001,
							"x": 0.31,
							"count": 3
						},
						{
							"y": 0.5893750000000001,
							"x": 0.3875,
							"count": 2
						},
						{
							"y": 0.5893750000000001,
							"x": 0.46499999999999997,
							"count": 2
						},
						{
							"y": 0.5893750000000001,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 0.5893750000000001,
							"x": 0.6975,
							"count": 4
						},
						{
							"y": 0.5893750000000001,
							"x": 0.775,
							"count": 3
						},
						{
							"y": 0.5893750000000001,
							"x": 0.8525,
							"count": 1
						},
						{
							"y": 0.5893750000000001,
							"x": 1.0075,
							"count": 2
						},
						{
							"y": 0.5893750000000001,
							"x": 1.085,
							"count": 1
						},
						{
							"y": 0.5893750000000001,
							"x": 1.24,
							"count": 1
						},
						{
							"y": 0.5893750000000001,
							"x": 1.3175,
							"count": 1
						},
						{
							"y": 0.5893750000000001,
							"x": 1.395,
							"count": 1
						},
						{
							"y": 0.5893750000000001,
							"x": 1.6275,
							"count": 2
						},
						{
							"y": 0.5893750000000001,
							"x": 1.705,
							"count": 1
						},
						{
							"y": 0.615,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.615,
							"x": 0.0775,
							"count": 1
						},
						{
							"y": 0.615,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 0.615,
							"x": 0.31,
							"count": 1
						},
						{
							"y": 0.615,
							"x": 0.46499999999999997,
							"count": 1
						},
						{
							"y": 0.615,
							"x": 0.62,
							"count": 1
						},
						{
							"y": 0.615,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 0.615,
							"x": 1.24,
							"count": 1
						},
						{
							"y": 0.615,
							"x": 1.55,
							"count": 1
						},
						{
							"y": 0.640625,
							"x": 0.0775,
							"count": 2
						},
						{
							"y": 0.640625,
							"x": 0.9299999999999999,
							"count": 1
						},
						{
							"y": 0.640625,
							"x": 1.0075,
							"count": 1
						},
						{
							"y": 0.640625,
							"x": 1.55,
							"count": 1
						},
						{
							"y": 0.66625,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.66625,
							"x": 0.3875,
							"count": 1
						},
						{
							"y": 0.66625,
							"x": 0.6975,
							"count": 1
						},
						{
							"y": 0.691875,
							"x": 0,
							"count": 1
						},
						{
							"y": 0.7175,
							"x": 0.0775,
							"count": 1
						},
						{
							"y": 0.743125,
							"x": 0.155,
							"count": 1
						},
						{
							"y": 0.794375,
							"x": 0.155,
							"count": 1
						}
					],
					"maxCount": 19
				}
			},
			"minutes": {
				"free throw percent": {
					"y": {
						"extent": [
							0,
							1
						],
						"delta": 0.03125
					},
					"x": {
						"extent": [
							5.1000000000000005,
							38.5
						],
						"delta": 1.04375
					},
					"bins": [
						{
							"y": 0,
							"x": 5.1000000000000005,
							"count": 6
						},
						{
							"y": 0,
							"x": 6.143750000000001,
							"count": 5
						},
						{
							"y": 0,
							"x": 8.23125,
							"count": 2
						},
						{
							"y": 0,
							"x": 12.40625,
							"count": 1
						},
						{
							"y": 0,
							"x": 13.45,
							"count": 2
						},
						{
							"y": 0,
							"x": 14.493749999999999,
							"count": 1
						},
						{
							"y": 0,
							"x": 18.66875,
							"count": 1
						},
						{
							"y": 0.15625,
							"x": 7.1875,
							"count": 1
						},
						{
							"y": 0.1875,
							"x": 7.1875,
							"count": 1
						},
						{
							"y": 0.25,
							"x": 9.275,
							"count": 1
						},
						{
							"y": 0.25,
							"x": 13.45,
							"count": 1
						},
						{
							"y": 0.3125,
							"x": 5.1000000000000005,
							"count": 1
						},
						{
							"y": 0.3125,
							"x": 6.143750000000001,
							"count": 1
						},
						{
							"y": 0.3125,
							"x": 12.40625,
							"count": 1
						},
						{
							"y": 0.34375,
							"x": 25.975,
							"count": 1
						},
						{
							"y": 0.375,
							"x": 7.1875,
							"count": 1
						},
						{
							"y": 0.375,
							"x": 8.23125,
							"count": 1
						},
						{
							"y": 0.375,
							"x": 15.537500000000001,
							"count": 1
						},
						{
							"y": 0.40625,
							"x": 13.45,
							"count": 1
						},
						{
							"y": 0.40625,
							"x": 18.66875,
							"count": 1
						},
						{
							"y": 0.40625,
							"x": 31.19375,
							"count": 1
						},
						{
							"y": 0.40625,
							"x": 34.324999999999996,
							"count": 1
						},
						{
							"y": 0.4375,
							"x": 6.143750000000001,
							"count": 1
						},
						{
							"y": 0.4375,
							"x": 23.8875,
							"count": 1
						},
						{
							"y": 0.46875,
							"x": 9.275,
							"count": 1
						},
						{
							"y": 0.46875,
							"x": 13.45,
							"count": 1
						},
						{
							"y": 0.46875,
							"x": 24.931250000000002,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 5.1000000000000005,
							"count": 2
						},
						{
							"y": 0.5,
							"x": 6.143750000000001,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 7.1875,
							"count": 2
						},
						{
							"y": 0.5,
							"x": 8.23125,
							"count": 4
						},
						{
							"y": 0.5,
							"x": 9.275,
							"count": 2
						},
						{
							"y": 0.5,
							"x": 11.3625,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 13.45,
							"count": 3
						},
						{
							"y": 0.5,
							"x": 14.493749999999999,
							"count": 1
						},
						{
							"y": 0.5,
							"x": 18.66875,
							"count": 2
						},
						{
							"y": 0.5,
							"x": 25.975,
							"count": 2
						},
						{
							"y": 0.5,
							"x": 28.0625,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 6.143750000000001,
							"count": 2
						},
						{
							"y": 0.53125,
							"x": 9.275,
							"count": 2
						},
						{
							"y": 0.53125,
							"x": 12.40625,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 13.45,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 18.66875,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 23.8875,
							"count": 2
						},
						{
							"y": 0.53125,
							"x": 33.28125,
							"count": 1
						},
						{
							"y": 0.53125,
							"x": 34.324999999999996,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 6.143750000000001,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 7.1875,
							"count": 3
						},
						{
							"y": 0.5625,
							"x": 8.23125,
							"count": 2
						},
						{
							"y": 0.5625,
							"x": 11.3625,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 13.45,
							"count": 3
						},
						{
							"y": 0.5625,
							"x": 14.493749999999999,
							"count": 3
						},
						{
							"y": 0.5625,
							"x": 18.66875,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 19.7125,
							"count": 2
						},
						{
							"y": 0.5625,
							"x": 23.8875,
							"count": 2
						},
						{
							"y": 0.5625,
							"x": 24.931250000000002,
							"count": 1
						},
						{
							"y": 0.5625,
							"x": 29.10625,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 7.1875,
							"count": 2
						},
						{
							"y": 0.59375,
							"x": 10.318750000000001,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 11.3625,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 14.493749999999999,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 15.537500000000001,
							"count": 2
						},
						{
							"y": 0.59375,
							"x": 17.625,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 19.7125,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 20.75625,
							"count": 1
						},
						{
							"y": 0.59375,
							"x": 23.8875,
							"count": 2
						},
						{
							"y": 0.59375,
							"x": 27.01875,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 7.1875,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 8.23125,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 9.275,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 10.318750000000001,
							"count": 3
						},
						{
							"y": 0.625,
							"x": 11.3625,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 12.40625,
							"count": 3
						},
						{
							"y": 0.625,
							"x": 13.45,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 14.493749999999999,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 16.58125,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 17.625,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 18.66875,
							"count": 3
						},
						{
							"y": 0.625,
							"x": 19.7125,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 20.75625,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 22.84375,
							"count": 2
						},
						{
							"y": 0.625,
							"x": 25.975,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 27.01875,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 28.0625,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 29.10625,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 31.19375,
							"count": 1
						},
						{
							"y": 0.625,
							"x": 32.2375,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 5.1000000000000005,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 7.1875,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 8.23125,
							"count": 3
						},
						{
							"y": 0.65625,
							"x": 9.275,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 11.3625,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 12.40625,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 13.45,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 14.493749999999999,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 15.537500000000001,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 16.58125,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 17.625,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 18.66875,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 19.7125,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 20.75625,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 23.8875,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 24.931250000000002,
							"count": 2
						},
						{
							"y": 0.65625,
							"x": 27.01875,
							"count": 1
						},
						{
							"y": 0.65625,
							"x": 29.10625,
							"count": 3
						},
						{
							"y": 0.65625,
							"x": 32.2375,
							"count": 3
						},
						{
							"y": 0.6875,
							"x": 6.143750000000001,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 7.1875,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 8.23125,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 9.275,
							"count": 3
						},
						{
							"y": 0.6875,
							"x": 10.318750000000001,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 11.3625,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 12.40625,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 13.45,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 14.493749999999999,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 15.537500000000001,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 17.625,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 18.66875,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 20.75625,
							"count": 3
						},
						{
							"y": 0.6875,
							"x": 21.8,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 23.8875,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 27.01875,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 31.19375,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 33.28125,
							"count": 1
						},
						{
							"y": 0.6875,
							"x": 34.324999999999996,
							"count": 2
						},
						{
							"y": 0.6875,
							"x": 35.36875,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 7.1875,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 8.23125,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 9.275,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 10.318750000000001,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 11.3625,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 16.58125,
							"count": 3
						},
						{
							"y": 0.71875,
							"x": 18.66875,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 19.7125,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 20.75625,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 21.8,
							"count": 3
						},
						{
							"y": 0.71875,
							"x": 22.84375,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 23.8875,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 25.975,
							"count": 3
						},
						{
							"y": 0.71875,
							"x": 27.01875,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 28.0625,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 29.10625,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 30.15,
							"count": 3
						},
						{
							"y": 0.71875,
							"x": 31.19375,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 32.2375,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 33.28125,
							"count": 2
						},
						{
							"y": 0.71875,
							"x": 34.324999999999996,
							"count": 1
						},
						{
							"y": 0.71875,
							"x": 36.4125,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 5.1000000000000005,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 6.143750000000001,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 7.1875,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 8.23125,
							"count": 3
						},
						{
							"y": 0.75,
							"x": 9.275,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 10.318750000000001,
							"count": 3
						},
						{
							"y": 0.75,
							"x": 11.3625,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 13.45,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 14.493749999999999,
							"count": 4
						},
						{
							"y": 0.75,
							"x": 15.537500000000001,
							"count": 3
						},
						{
							"y": 0.75,
							"x": 16.58125,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 17.625,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 18.66875,
							"count": 4
						},
						{
							"y": 0.75,
							"x": 19.7125,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 20.75625,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 21.8,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 23.8875,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 24.931250000000002,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 25.975,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 27.01875,
							"count": 4
						},
						{
							"y": 0.75,
							"x": 28.0625,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 29.10625,
							"count": 1
						},
						{
							"y": 0.75,
							"x": 30.15,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 31.19375,
							"count": 3
						},
						{
							"y": 0.75,
							"x": 32.2375,
							"count": 3
						},
						{
							"y": 0.75,
							"x": 33.28125,
							"count": 2
						},
						{
							"y": 0.75,
							"x": 34.324999999999996,
							"count": 3
						},
						{
							"y": 0.75,
							"x": 37.45625,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 6.143750000000001,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 7.1875,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 9.275,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 11.3625,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 12.40625,
							"count": 3
						},
						{
							"y": 0.78125,
							"x": 13.45,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 14.493749999999999,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 15.537500000000001,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 16.58125,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 17.625,
							"count": 4
						},
						{
							"y": 0.78125,
							"x": 18.66875,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 19.7125,
							"count": 6
						},
						{
							"y": 0.78125,
							"x": 22.84375,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 23.8875,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 24.931250000000002,
							"count": 1
						},
						{
							"y": 0.78125,
							"x": 25.975,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 28.0625,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 29.10625,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 30.15,
							"count": 3
						},
						{
							"y": 0.78125,
							"x": 31.19375,
							"count": 6
						},
						{
							"y": 0.78125,
							"x": 32.2375,
							"count": 3
						},
						{
							"y": 0.78125,
							"x": 33.28125,
							"count": 2
						},
						{
							"y": 0.78125,
							"x": 34.324999999999996,
							"count": 3
						},
						{
							"y": 0.78125,
							"x": 35.36875,
							"count": 3
						},
						{
							"y": 0.78125,
							"x": 36.4125,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 5.1000000000000005,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 8.23125,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 9.275,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 10.318750000000001,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 11.3625,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 12.40625,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 13.45,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 14.493749999999999,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 15.537500000000001,
							"count": 4
						},
						{
							"y": 0.8125,
							"x": 16.58125,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 17.625,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 18.66875,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 19.7125,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 21.8,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 22.84375,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 23.8875,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 24.931250000000002,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 25.975,
							"count": 4
						},
						{
							"y": 0.8125,
							"x": 27.01875,
							"count": 4
						},
						{
							"y": 0.8125,
							"x": 28.0625,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 29.10625,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 30.15,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 31.19375,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 32.2375,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 33.28125,
							"count": 3
						},
						{
							"y": 0.8125,
							"x": 34.324999999999996,
							"count": 2
						},
						{
							"y": 0.8125,
							"x": 35.36875,
							"count": 5
						},
						{
							"y": 0.8125,
							"x": 36.4125,
							"count": 1
						},
						{
							"y": 0.8125,
							"x": 37.45625,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 6.143750000000001,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 7.1875,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 10.318750000000001,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 15.537500000000001,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 16.58125,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 17.625,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 18.66875,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 19.7125,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 20.75625,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 21.8,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 23.8875,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 24.931250000000002,
							"count": 3
						},
						{
							"y": 0.84375,
							"x": 27.01875,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 28.0625,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 29.10625,
							"count": 3
						},
						{
							"y": 0.84375,
							"x": 30.15,
							"count": 3
						},
						{
							"y": 0.84375,
							"x": 31.19375,
							"count": 3
						},
						{
							"y": 0.84375,
							"x": 32.2375,
							"count": 1
						},
						{
							"y": 0.84375,
							"x": 34.324999999999996,
							"count": 3
						},
						{
							"y": 0.84375,
							"x": 35.36875,
							"count": 2
						},
						{
							"y": 0.84375,
							"x": 37.45625,
							"count": 3
						},
						{
							"y": 0.875,
							"x": 5.1000000000000005,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 6.143750000000001,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 8.23125,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 9.275,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 10.318750000000001,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 14.493749999999999,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 17.625,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 18.66875,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 25.975,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 28.0625,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 29.10625,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 30.15,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 31.19375,
							"count": 2
						},
						{
							"y": 0.875,
							"x": 32.2375,
							"count": 1
						},
						{
							"y": 0.875,
							"x": 35.36875,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 6.143750000000001,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 8.23125,
							"count": 2
						},
						{
							"y": 0.90625,
							"x": 18.66875,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 19.7125,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 27.01875,
							"count": 1
						},
						{
							"y": 0.90625,
							"x": 33.28125,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 10.318750000000001,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 11.3625,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 21.8,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 22.84375,
							"count": 2
						},
						{
							"y": 0.9375,
							"x": 24.931250000000002,
							"count": 1
						},
						{
							"y": 0.9375,
							"x": 35.36875,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 5.1000000000000005,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 6.143750000000001,
							"count": 3
						},
						{
							"y": 0.96875,
							"x": 7.1875,
							"count": 2
						},
						{
							"y": 0.96875,
							"x": 8.23125,
							"count": 2
						},
						{
							"y": 0.96875,
							"x": 9.275,
							"count": 4
						},
						{
							"y": 0.96875,
							"x": 10.318750000000001,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 11.3625,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 15.537500000000001,
							"count": 1
						},
						{
							"y": 0.96875,
							"x": 23.8875,
							"count": 1
						}
					],
					"maxCount": 6
				},
				"steals per game": {
					"bins": [
						{
							"x": 5.1000000000000005,
							"y": 0,
							"count": 5
						},
						{
							"x": 5.1000000000000005,
							"y": 0.0775,
							"count": 2
						},
						{
							"x": 5.1000000000000005,
							"y": 0.155,
							"count": 2
						},
						{
							"x": 5.1000000000000005,
							"y": 0.23249999999999998,
							"count": 2
						},
						{
							"x": 5.1000000000000005,
							"y": 0.46499999999999997,
							"count": 3
						},
						{
							"x": 6.143750000000001,
							"y": 0,
							"count": 8
						},
						{
							"x": 6.143750000000001,
							"y": 0.0775,
							"count": 4
						},
						{
							"x": 6.143750000000001,
							"y": 0.155,
							"count": 6
						},
						{
							"x": 6.143750000000001,
							"y": 0.23249999999999998,
							"count": 2
						},
						{
							"x": 6.143750000000001,
							"y": 0.31,
							"count": 2
						},
						{
							"x": 7.1875,
							"y": 0,
							"count": 1
						},
						{
							"x": 7.1875,
							"y": 0.0775,
							"count": 6
						},
						{
							"x": 7.1875,
							"y": 0.155,
							"count": 7
						},
						{
							"x": 7.1875,
							"y": 0.23249999999999998,
							"count": 2
						},
						{
							"x": 7.1875,
							"y": 0.31,
							"count": 2
						},
						{
							"x": 7.1875,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 7.1875,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 8.23125,
							"y": 0,
							"count": 4
						},
						{
							"x": 8.23125,
							"y": 0.0775,
							"count": 4
						},
						{
							"x": 8.23125,
							"y": 0.155,
							"count": 8
						},
						{
							"x": 8.23125,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 8.23125,
							"y": 0.31,
							"count": 4
						},
						{
							"x": 8.23125,
							"y": 0.3875,
							"count": 1
						},
						{
							"x": 8.23125,
							"y": 0.46499999999999997,
							"count": 2
						},
						{
							"x": 8.23125,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 8.23125,
							"y": 1.9375,
							"count": 1
						},
						{
							"x": 9.275,
							"y": 0,
							"count": 1
						},
						{
							"x": 9.275,
							"y": 0.0775,
							"count": 3
						},
						{
							"x": 9.275,
							"y": 0.155,
							"count": 3
						},
						{
							"x": 9.275,
							"y": 0.23249999999999998,
							"count": 3
						},
						{
							"x": 9.275,
							"y": 0.31,
							"count": 3
						},
						{
							"x": 9.275,
							"y": 0.46499999999999997,
							"count": 4
						},
						{
							"x": 9.275,
							"y": 0.5425,
							"count": 3
						},
						{
							"x": 10.318750000000001,
							"y": 0,
							"count": 1
						},
						{
							"x": 10.318750000000001,
							"y": 0.0775,
							"count": 2
						},
						{
							"x": 10.318750000000001,
							"y": 0.23249999999999998,
							"count": 3
						},
						{
							"x": 10.318750000000001,
							"y": 0.31,
							"count": 3
						},
						{
							"x": 10.318750000000001,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 10.318750000000001,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 10.318750000000001,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 10.318750000000001,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 10.318750000000001,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 11.3625,
							"y": 0.0775,
							"count": 4
						},
						{
							"x": 11.3625,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 11.3625,
							"y": 0.31,
							"count": 4
						},
						{
							"x": 11.3625,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 11.3625,
							"y": 0.5425,
							"count": 2
						},
						{
							"x": 11.3625,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 11.3625,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 12.40625,
							"y": 0,
							"count": 1
						},
						{
							"x": 12.40625,
							"y": 0.155,
							"count": 3
						},
						{
							"x": 12.40625,
							"y": 0.31,
							"count": 3
						},
						{
							"x": 12.40625,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 12.40625,
							"y": 0.46499999999999997,
							"count": 3
						},
						{
							"x": 12.40625,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 12.40625,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 12.40625,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 0,
							"count": 2
						},
						{
							"x": 13.45,
							"y": 0.0775,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 0.23249999999999998,
							"count": 4
						},
						{
							"x": 13.45,
							"y": 0.31,
							"count": 2
						},
						{
							"x": 13.45,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 13.45,
							"y": 0.46499999999999997,
							"count": 4
						},
						{
							"x": 13.45,
							"y": 0.6975,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 1.24,
							"count": 1
						},
						{
							"x": 14.493749999999999,
							"y": 0,
							"count": 1
						},
						{
							"x": 14.493749999999999,
							"y": 0.23249999999999998,
							"count": 2
						},
						{
							"x": 14.493749999999999,
							"y": 0.31,
							"count": 4
						},
						{
							"x": 14.493749999999999,
							"y": 0.3875,
							"count": 5
						},
						{
							"x": 14.493749999999999,
							"y": 0.46499999999999997,
							"count": 3
						},
						{
							"x": 14.493749999999999,
							"y": 0.5425,
							"count": 2
						},
						{
							"x": 14.493749999999999,
							"y": 0.62,
							"count": 2
						},
						{
							"x": 14.493749999999999,
							"y": 0.6975,
							"count": 1
						},
						{
							"x": 14.493749999999999,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 15.537500000000001,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 15.537500000000001,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 15.537500000000001,
							"y": 0.31,
							"count": 5
						},
						{
							"x": 15.537500000000001,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 15.537500000000001,
							"y": 0.46499999999999997,
							"count": 2
						},
						{
							"x": 15.537500000000001,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 15.537500000000001,
							"y": 0.62,
							"count": 3
						},
						{
							"x": 15.537500000000001,
							"y": 0.6975,
							"count": 1
						},
						{
							"x": 15.537500000000001,
							"y": 0.8525,
							"count": 2
						},
						{
							"x": 15.537500000000001,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 16.58125,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 16.58125,
							"y": 0.31,
							"count": 2
						},
						{
							"x": 16.58125,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 16.58125,
							"y": 0.46499999999999997,
							"count": 2
						},
						{
							"x": 16.58125,
							"y": 0.5425,
							"count": 2
						},
						{
							"x": 16.58125,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 16.58125,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 16.58125,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 17.625,
							"y": 0,
							"count": 1
						},
						{
							"x": 17.625,
							"y": 0.31,
							"count": 5
						},
						{
							"x": 17.625,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 17.625,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 17.625,
							"y": 0.62,
							"count": 3
						},
						{
							"x": 17.625,
							"y": 0.6975,
							"count": 2
						},
						{
							"x": 17.625,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 18.66875,
							"y": 0,
							"count": 1
						},
						{
							"x": 18.66875,
							"y": 0.23249999999999998,
							"count": 2
						},
						{
							"x": 18.66875,
							"y": 0.31,
							"count": 1
						},
						{
							"x": 18.66875,
							"y": 0.3875,
							"count": 6
						},
						{
							"x": 18.66875,
							"y": 0.46499999999999997,
							"count": 3
						},
						{
							"x": 18.66875,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 18.66875,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 18.66875,
							"y": 0.6975,
							"count": 4
						},
						{
							"x": 18.66875,
							"y": 0.775,
							"count": 3
						},
						{
							"x": 18.66875,
							"y": 0.8525,
							"count": 2
						},
						{
							"x": 18.66875,
							"y": 0.9299999999999999,
							"count": 2
						},
						{
							"x": 18.66875,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 19.7125,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 19.7125,
							"y": 0.23249999999999998,
							"count": 3
						},
						{
							"x": 19.7125,
							"y": 0.31,
							"count": 2
						},
						{
							"x": 19.7125,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 19.7125,
							"y": 0.46499999999999997,
							"count": 3
						},
						{
							"x": 19.7125,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 19.7125,
							"y": 0.62,
							"count": 3
						},
						{
							"x": 19.7125,
							"y": 0.6975,
							"count": 2
						},
						{
							"x": 19.7125,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 19.7125,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 0.31,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 20.75625,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 0.5425,
							"count": 2
						},
						{
							"x": 20.75625,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 0.6975,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 21.8,
							"y": 0.31,
							"count": 2
						},
						{
							"x": 21.8,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 21.8,
							"y": 0.62,
							"count": 2
						},
						{
							"x": 21.8,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 21.8,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 21.8,
							"y": 1.0075,
							"count": 2
						},
						{
							"x": 22.84375,
							"y": 0.46499999999999997,
							"count": 2
						},
						{
							"x": 22.84375,
							"y": 0.5425,
							"count": 3
						},
						{
							"x": 22.84375,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 22.84375,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 22.84375,
							"y": 1.6275,
							"count": 1
						},
						{
							"x": 23.8875,
							"y": 0.3875,
							"count": 1
						},
						{
							"x": 23.8875,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 23.8875,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 23.8875,
							"y": 0.62,
							"count": 6
						},
						{
							"x": 23.8875,
							"y": 0.6975,
							"count": 3
						},
						{
							"x": 23.8875,
							"y": 0.775,
							"count": 2
						},
						{
							"x": 23.8875,
							"y": 0.9299999999999999,
							"count": 2
						},
						{
							"x": 23.8875,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 23.8875,
							"y": 1.24,
							"count": 1
						},
						{
							"x": 24.931250000000002,
							"y": 0.31,
							"count": 1
						},
						{
							"x": 24.931250000000002,
							"y": 0.46499999999999997,
							"count": 2
						},
						{
							"x": 24.931250000000002,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 24.931250000000002,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 24.931250000000002,
							"y": 0.775,
							"count": 2
						},
						{
							"x": 24.931250000000002,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 24.931250000000002,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 24.931250000000002,
							"y": 1.085,
							"count": 1
						},
						{
							"x": 24.931250000000002,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 24.931250000000002,
							"y": 1.24,
							"count": 1
						},
						{
							"x": 25.975,
							"y": 0.31,
							"count": 2
						},
						{
							"x": 25.975,
							"y": 0.5425,
							"count": 2
						},
						{
							"x": 25.975,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 25.975,
							"y": 0.6975,
							"count": 4
						},
						{
							"x": 25.975,
							"y": 0.775,
							"count": 3
						},
						{
							"x": 25.975,
							"y": 0.8525,
							"count": 2
						},
						{
							"x": 25.975,
							"y": 1.085,
							"count": 1
						},
						{
							"x": 25.975,
							"y": 1.24,
							"count": 1
						},
						{
							"x": 27.01875,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 27.01875,
							"y": 0.3875,
							"count": 1
						},
						{
							"x": 27.01875,
							"y": 0.46499999999999997,
							"count": 2
						},
						{
							"x": 27.01875,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 27.01875,
							"y": 0.6975,
							"count": 3
						},
						{
							"x": 27.01875,
							"y": 0.775,
							"count": 2
						},
						{
							"x": 27.01875,
							"y": 0.8525,
							"count": 2
						},
						{
							"x": 27.01875,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 27.01875,
							"y": 1.085,
							"count": 1
						},
						{
							"x": 27.01875,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 27.01875,
							"y": 1.3175,
							"count": 1
						},
						{
							"x": 28.0625,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 28.0625,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 28.0625,
							"y": 0.6975,
							"count": 2
						},
						{
							"x": 28.0625,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 28.0625,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 28.0625,
							"y": 0.9299999999999999,
							"count": 3
						},
						{
							"x": 28.0625,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 28.0625,
							"y": 1.085,
							"count": 2
						},
						{
							"x": 28.0625,
							"y": 1.705,
							"count": 1
						},
						{
							"x": 29.10625,
							"y": 0.31,
							"count": 2
						},
						{
							"x": 29.10625,
							"y": 0.46499999999999997,
							"count": 2
						},
						{
							"x": 29.10625,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 29.10625,
							"y": 0.6975,
							"count": 1
						},
						{
							"x": 29.10625,
							"y": 0.8525,
							"count": 3
						},
						{
							"x": 29.10625,
							"y": 1.0075,
							"count": 3
						},
						{
							"x": 29.10625,
							"y": 1.1625,
							"count": 2
						},
						{
							"x": 29.10625,
							"y": 1.6275,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 0.6975,
							"count": 2
						},
						{
							"x": 30.15,
							"y": 0.775,
							"count": 3
						},
						{
							"x": 30.15,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 1.3175,
							"count": 2
						},
						{
							"x": 30.15,
							"y": 1.55,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 1.8599999999999999,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 0.31,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 0.3875,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 0.46499999999999997,
							"count": 2
						},
						{
							"x": 31.19375,
							"y": 0.5425,
							"count": 2
						},
						{
							"x": 31.19375,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 0.6975,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 0.9299999999999999,
							"count": 2
						},
						{
							"x": 31.19375,
							"y": 1.0075,
							"count": 2
						},
						{
							"x": 31.19375,
							"y": 1.085,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 1.1625,
							"count": 2
						},
						{
							"x": 31.19375,
							"y": 1.24,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 1.395,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 1.4725,
							"count": 3
						},
						{
							"x": 31.19375,
							"y": 1.7825,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 2.2475,
							"count": 1
						},
						{
							"x": 32.2375,
							"y": 0.46499999999999997,
							"count": 2
						},
						{
							"x": 32.2375,
							"y": 0.5425,
							"count": 2
						},
						{
							"x": 32.2375,
							"y": 0.6975,
							"count": 1
						},
						{
							"x": 32.2375,
							"y": 0.8525,
							"count": 2
						},
						{
							"x": 32.2375,
							"y": 0.9299999999999999,
							"count": 3
						},
						{
							"x": 32.2375,
							"y": 1.085,
							"count": 1
						},
						{
							"x": 32.2375,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 32.2375,
							"y": 1.3175,
							"count": 1
						},
						{
							"x": 32.2375,
							"y": 1.395,
							"count": 2
						},
						{
							"x": 32.2375,
							"y": 1.55,
							"count": 1
						},
						{
							"x": 33.28125,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 33.28125,
							"y": 0.6975,
							"count": 1
						},
						{
							"x": 33.28125,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 33.28125,
							"y": 0.9299999999999999,
							"count": 3
						},
						{
							"x": 33.28125,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 33.28125,
							"y": 1.24,
							"count": 1
						},
						{
							"x": 33.28125,
							"y": 1.4725,
							"count": 1
						},
						{
							"x": 33.28125,
							"y": 1.6275,
							"count": 1
						},
						{
							"x": 33.28125,
							"y": 1.705,
							"count": 1
						},
						{
							"x": 33.28125,
							"y": 1.7825,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 0.9299999999999999,
							"count": 3
						},
						{
							"x": 34.324999999999996,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 1.24,
							"count": 2
						},
						{
							"x": 34.324999999999996,
							"y": 1.3175,
							"count": 3
						},
						{
							"x": 34.324999999999996,
							"y": 1.4725,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 1.55,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 1.6275,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 2.4025,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 0.3875,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 0.6975,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 1.085,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 1.395,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 1.4725,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 1.55,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 1.6275,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 1.7825,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 1.8599999999999999,
							"count": 1
						},
						{
							"x": 36.4125,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 36.4125,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 36.4125,
							"y": 1.705,
							"count": 1
						},
						{
							"x": 37.45625,
							"y": 1.085,
							"count": 1
						},
						{
							"x": 37.45625,
							"y": 1.24,
							"count": 2
						},
						{
							"x": 37.45625,
							"y": 1.55,
							"count": 2
						},
						{
							"x": 37.45625,
							"y": 1.8599999999999999,
							"count": 1
						}
					],
					"x": {
						"extent": [
							5.1000000000000005,
							38.5
						],
						"delta": 1.04375
					},
					"y": {
						"extent": [
							0,
							2.48
						],
						"delta": 0.0775
					},
					"maxCount": 8
				},
				"percentage of team minutes": {
					"bins": [
						{
							"x": 5.1000000000000005,
							"y": 7.2,
							"count": 3
						},
						{
							"x": 5.1000000000000005,
							"y": 9.459375,
							"count": 9
						},
						{
							"x": 5.1000000000000005,
							"y": 11.71875,
							"count": 2
						},
						{
							"x": 6.143750000000001,
							"y": 9.459375,
							"count": 2
						},
						{
							"x": 6.143750000000001,
							"y": 11.71875,
							"count": 14
						},
						{
							"x": 6.143750000000001,
							"y": 13.978124999999999,
							"count": 6
						},
						{
							"x": 7.1875,
							"y": 11.71875,
							"count": 1
						},
						{
							"x": 7.1875,
							"y": 13.978124999999999,
							"count": 14
						},
						{
							"x": 7.1875,
							"y": 16.2375,
							"count": 5
						},
						{
							"x": 8.23125,
							"y": 7.2,
							"count": 1
						},
						{
							"x": 8.23125,
							"y": 11.71875,
							"count": 1
						},
						{
							"x": 8.23125,
							"y": 13.978124999999999,
							"count": 4
						},
						{
							"x": 8.23125,
							"y": 16.2375,
							"count": 14
						},
						{
							"x": 8.23125,
							"y": 18.496875,
							"count": 6
						},
						{
							"x": 9.275,
							"y": 16.2375,
							"count": 2
						},
						{
							"x": 9.275,
							"y": 18.496875,
							"count": 16
						},
						{
							"x": 9.275,
							"y": 20.756249999999998,
							"count": 2
						},
						{
							"x": 10.318750000000001,
							"y": 20.756249999999998,
							"count": 14
						},
						{
							"x": 10.318750000000001,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 11.3625,
							"y": 23.015625,
							"count": 11
						},
						{
							"x": 11.3625,
							"y": 25.275,
							"count": 3
						},
						{
							"x": 12.40625,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 12.40625,
							"y": 23.015625,
							"count": 2
						},
						{
							"x": 12.40625,
							"y": 25.275,
							"count": 11
						},
						{
							"x": 12.40625,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 25.275,
							"count": 4
						},
						{
							"x": 13.45,
							"y": 27.534374999999997,
							"count": 13
						},
						{
							"x": 14.493749999999999,
							"y": 25.275,
							"count": 1
						},
						{
							"x": 14.493749999999999,
							"y": 27.534374999999997,
							"count": 3
						},
						{
							"x": 14.493749999999999,
							"y": 29.79375,
							"count": 17
						},
						{
							"x": 15.537500000000001,
							"y": 29.79375,
							"count": 4
						},
						{
							"x": 15.537500000000001,
							"y": 32.053125,
							"count": 14
						},
						{
							"x": 15.537500000000001,
							"y": 34.3125,
							"count": 1
						},
						{
							"x": 16.58125,
							"y": 34.3125,
							"count": 12
						},
						{
							"x": 17.625,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 17.625,
							"y": 34.3125,
							"count": 2
						},
						{
							"x": 17.625,
							"y": 36.571875,
							"count": 12
						},
						{
							"x": 18.66875,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 18.66875,
							"y": 36.571875,
							"count": 8
						},
						{
							"x": 18.66875,
							"y": 38.83125,
							"count": 18
						},
						{
							"x": 19.7125,
							"y": 38.83125,
							"count": 5
						},
						{
							"x": 19.7125,
							"y": 41.090625,
							"count": 14
						},
						{
							"x": 20.75625,
							"y": 41.090625,
							"count": 4
						},
						{
							"x": 20.75625,
							"y": 43.35,
							"count": 7
						},
						{
							"x": 21.8,
							"y": 43.35,
							"count": 2
						},
						{
							"x": 21.8,
							"y": 45.609375,
							"count": 7
						},
						{
							"x": 22.84375,
							"y": 45.609375,
							"count": 6
						},
						{
							"x": 22.84375,
							"y": 47.86875,
							"count": 2
						},
						{
							"x": 23.8875,
							"y": 47.86875,
							"count": 10
						},
						{
							"x": 23.8875,
							"y": 50.128125000000004,
							"count": 8
						},
						{
							"x": 24.931250000000002,
							"y": 50.128125000000004,
							"count": 6
						},
						{
							"x": 24.931250000000002,
							"y": 52.3875,
							"count": 6
						},
						{
							"x": 25.975,
							"y": 52.3875,
							"count": 6
						},
						{
							"x": 25.975,
							"y": 54.646875,
							"count": 10
						},
						{
							"x": 27.01875,
							"y": 54.646875,
							"count": 5
						},
						{
							"x": 27.01875,
							"y": 56.90625,
							"count": 11
						},
						{
							"x": 28.0625,
							"y": 56.90625,
							"count": 8
						},
						{
							"x": 28.0625,
							"y": 59.165625,
							"count": 5
						},
						{
							"x": 29.10625,
							"y": 59.165625,
							"count": 11
						},
						{
							"x": 29.10625,
							"y": 61.425,
							"count": 4
						},
						{
							"x": 30.15,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 61.425,
							"count": 10
						},
						{
							"x": 30.15,
							"y": 63.684375,
							"count": 4
						},
						{
							"x": 31.19375,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 63.684375,
							"count": 15
						},
						{
							"x": 31.19375,
							"y": 65.94375,
							"count": 7
						},
						{
							"x": 32.2375,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 32.2375,
							"y": 65.94375,
							"count": 12
						},
						{
							"x": 32.2375,
							"y": 68.203125,
							"count": 3
						},
						{
							"x": 33.28125,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 33.28125,
							"y": 68.203125,
							"count": 8
						},
						{
							"x": 33.28125,
							"y": 70.46249999999999,
							"count": 3
						},
						{
							"x": 34.324999999999996,
							"y": 68.203125,
							"count": 2
						},
						{
							"x": 34.324999999999996,
							"y": 70.46249999999999,
							"count": 12
						},
						{
							"x": 34.324999999999996,
							"y": 72.721875,
							"count": 2
						},
						{
							"x": 35.36875,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 72.721875,
							"count": 10
						},
						{
							"x": 35.36875,
							"y": 74.98125,
							"count": 2
						},
						{
							"x": 36.4125,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 36.4125,
							"y": 74.98125,
							"count": 2
						},
						{
							"x": 37.45625,
							"y": 77.240625,
							"count": 6
						}
					],
					"x": {
						"extent": [
							5.1000000000000005,
							38.5
						],
						"delta": 1.04375
					},
					"y": {
						"extent": [
							7.2,
							79.5
						],
						"delta": 2.259375
					},
					"maxCount": 18
				},
				"percentage of team assists": {
					"bins": [
						{
							"x": 5.1000000000000005,
							"y": 0,
							"count": 3
						},
						{
							"x": 5.1000000000000005,
							"y": 4.612500000000001,
							"count": 2
						},
						{
							"x": 5.1000000000000005,
							"y": 10.762500000000001,
							"count": 3
						},
						{
							"x": 5.1000000000000005,
							"y": 12.3,
							"count": 3
						},
						{
							"x": 5.1000000000000005,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 5.1000000000000005,
							"y": 18.450000000000003,
							"count": 2
						},
						{
							"x": 6.143750000000001,
							"y": 0,
							"count": 2
						},
						{
							"x": 6.143750000000001,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 6.143750000000001,
							"y": 3.075,
							"count": 1
						},
						{
							"x": 6.143750000000001,
							"y": 4.612500000000001,
							"count": 3
						},
						{
							"x": 6.143750000000001,
							"y": 6.15,
							"count": 4
						},
						{
							"x": 6.143750000000001,
							"y": 7.6875,
							"count": 3
						},
						{
							"x": 6.143750000000001,
							"y": 10.762500000000001,
							"count": 2
						},
						{
							"x": 6.143750000000001,
							"y": 12.3,
							"count": 2
						},
						{
							"x": 6.143750000000001,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 6.143750000000001,
							"y": 21.525000000000002,
							"count": 2
						},
						{
							"x": 6.143750000000001,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 7.1875,
							"y": 0,
							"count": 2
						},
						{
							"x": 7.1875,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 7.1875,
							"y": 3.075,
							"count": 5
						},
						{
							"x": 7.1875,
							"y": 4.612500000000001,
							"count": 2
						},
						{
							"x": 7.1875,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 7.1875,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 7.1875,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 7.1875,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 7.1875,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 7.1875,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 7.1875,
							"y": 19.9875,
							"count": 1
						},
						{
							"x": 7.1875,
							"y": 41.5125,
							"count": 1
						},
						{
							"x": 8.23125,
							"y": 0,
							"count": 4
						},
						{
							"x": 8.23125,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 8.23125,
							"y": 3.075,
							"count": 3
						},
						{
							"x": 8.23125,
							"y": 4.612500000000001,
							"count": 2
						},
						{
							"x": 8.23125,
							"y": 6.15,
							"count": 3
						},
						{
							"x": 8.23125,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 8.23125,
							"y": 9.225000000000001,
							"count": 4
						},
						{
							"x": 8.23125,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 8.23125,
							"y": 15.375,
							"count": 2
						},
						{
							"x": 8.23125,
							"y": 19.9875,
							"count": 1
						},
						{
							"x": 8.23125,
							"y": 26.137500000000003,
							"count": 3
						},
						{
							"x": 8.23125,
							"y": 30.75,
							"count": 1
						},
						{
							"x": 9.275,
							"y": 0,
							"count": 1
						},
						{
							"x": 9.275,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 9.275,
							"y": 3.075,
							"count": 4
						},
						{
							"x": 9.275,
							"y": 4.612500000000001,
							"count": 3
						},
						{
							"x": 9.275,
							"y": 6.15,
							"count": 3
						},
						{
							"x": 9.275,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 9.275,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 9.275,
							"y": 10.762500000000001,
							"count": 3
						},
						{
							"x": 9.275,
							"y": 19.9875,
							"count": 1
						},
						{
							"x": 9.275,
							"y": 23.0625,
							"count": 1
						},
						{
							"x": 10.318750000000001,
							"y": 3.075,
							"count": 2
						},
						{
							"x": 10.318750000000001,
							"y": 4.612500000000001,
							"count": 3
						},
						{
							"x": 10.318750000000001,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 10.318750000000001,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 10.318750000000001,
							"y": 9.225000000000001,
							"count": 2
						},
						{
							"x": 10.318750000000001,
							"y": 13.8375,
							"count": 2
						},
						{
							"x": 10.318750000000001,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 10.318750000000001,
							"y": 23.0625,
							"count": 1
						},
						{
							"x": 11.3625,
							"y": 4.612500000000001,
							"count": 4
						},
						{
							"x": 11.3625,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 11.3625,
							"y": 7.6875,
							"count": 3
						},
						{
							"x": 11.3625,
							"y": 9.225000000000001,
							"count": 2
						},
						{
							"x": 11.3625,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 11.3625,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 11.3625,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 12.40625,
							"y": 0,
							"count": 1
						},
						{
							"x": 12.40625,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 12.40625,
							"y": 3.075,
							"count": 3
						},
						{
							"x": 12.40625,
							"y": 4.612500000000001,
							"count": 2
						},
						{
							"x": 12.40625,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 12.40625,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 12.40625,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 12.40625,
							"y": 13.8375,
							"count": 2
						},
						{
							"x": 12.40625,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 12.40625,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 0,
							"count": 3
						},
						{
							"x": 13.45,
							"y": 1.5375,
							"count": 2
						},
						{
							"x": 13.45,
							"y": 3.075,
							"count": 3
						},
						{
							"x": 13.45,
							"y": 4.612500000000001,
							"count": 4
						},
						{
							"x": 13.45,
							"y": 6.15,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 13.45,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 14.493749999999999,
							"y": 0,
							"count": 1
						},
						{
							"x": 14.493749999999999,
							"y": 1.5375,
							"count": 2
						},
						{
							"x": 14.493749999999999,
							"y": 3.075,
							"count": 4
						},
						{
							"x": 14.493749999999999,
							"y": 4.612500000000001,
							"count": 4
						},
						{
							"x": 14.493749999999999,
							"y": 6.15,
							"count": 1
						},
						{
							"x": 14.493749999999999,
							"y": 7.6875,
							"count": 3
						},
						{
							"x": 14.493749999999999,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 14.493749999999999,
							"y": 16.9125,
							"count": 2
						},
						{
							"x": 14.493749999999999,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 14.493749999999999,
							"y": 30.75,
							"count": 1
						},
						{
							"x": 14.493749999999999,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 15.537500000000001,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 15.537500000000001,
							"y": 3.075,
							"count": 1
						},
						{
							"x": 15.537500000000001,
							"y": 6.15,
							"count": 3
						},
						{
							"x": 15.537500000000001,
							"y": 7.6875,
							"count": 5
						},
						{
							"x": 15.537500000000001,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 15.537500000000001,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 15.537500000000001,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 15.537500000000001,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 15.537500000000001,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 15.537500000000001,
							"y": 18.450000000000003,
							"count": 2
						},
						{
							"x": 15.537500000000001,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 15.537500000000001,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 16.58125,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 16.58125,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 16.58125,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 16.58125,
							"y": 9.225000000000001,
							"count": 3
						},
						{
							"x": 16.58125,
							"y": 10.762500000000001,
							"count": 3
						},
						{
							"x": 16.58125,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 17.625,
							"y": 4.612500000000001,
							"count": 2
						},
						{
							"x": 17.625,
							"y": 6.15,
							"count": 3
						},
						{
							"x": 17.625,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 17.625,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 17.625,
							"y": 10.762500000000001,
							"count": 3
						},
						{
							"x": 17.625,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 17.625,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 17.625,
							"y": 32.2875,
							"count": 2
						},
						{
							"x": 18.66875,
							"y": 0,
							"count": 1
						},
						{
							"x": 18.66875,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 18.66875,
							"y": 4.612500000000001,
							"count": 3
						},
						{
							"x": 18.66875,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 18.66875,
							"y": 7.6875,
							"count": 5
						},
						{
							"x": 18.66875,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 18.66875,
							"y": 10.762500000000001,
							"count": 4
						},
						{
							"x": 18.66875,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 18.66875,
							"y": 13.8375,
							"count": 2
						},
						{
							"x": 18.66875,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 18.66875,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 18.66875,
							"y": 19.9875,
							"count": 2
						},
						{
							"x": 18.66875,
							"y": 24.6,
							"count": 2
						},
						{
							"x": 18.66875,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 19.7125,
							"y": 3.075,
							"count": 3
						},
						{
							"x": 19.7125,
							"y": 4.612500000000001,
							"count": 4
						},
						{
							"x": 19.7125,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 19.7125,
							"y": 9.225000000000001,
							"count": 2
						},
						{
							"x": 19.7125,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 19.7125,
							"y": 12.3,
							"count": 3
						},
						{
							"x": 19.7125,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 19.7125,
							"y": 27.675,
							"count": 1
						},
						{
							"x": 19.7125,
							"y": 30.75,
							"count": 1
						},
						{
							"x": 19.7125,
							"y": 39.975,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 6.15,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 10.762500000000001,
							"count": 3
						},
						{
							"x": 20.75625,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 20.75625,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 21.8,
							"y": 3.075,
							"count": 1
						},
						{
							"x": 21.8,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 21.8,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 21.8,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 21.8,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 21.8,
							"y": 27.675,
							"count": 1
						},
						{
							"x": 21.8,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 22.84375,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 22.84375,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 22.84375,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 22.84375,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 22.84375,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 22.84375,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 22.84375,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 23.8875,
							"y": 3.075,
							"count": 2
						},
						{
							"x": 23.8875,
							"y": 4.612500000000001,
							"count": 4
						},
						{
							"x": 23.8875,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 23.8875,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 23.8875,
							"y": 10.762500000000001,
							"count": 2
						},
						{
							"x": 23.8875,
							"y": 13.8375,
							"count": 2
						},
						{
							"x": 23.8875,
							"y": 15.375,
							"count": 3
						},
						{
							"x": 23.8875,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 23.8875,
							"y": 23.0625,
							"count": 1
						},
						{
							"x": 24.931250000000002,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 24.931250000000002,
							"y": 7.6875,
							"count": 5
						},
						{
							"x": 24.931250000000002,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 24.931250000000002,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 24.931250000000002,
							"y": 19.9875,
							"count": 2
						},
						{
							"x": 24.931250000000002,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 24.931250000000002,
							"y": 32.2875,
							"count": 1
						},
						{
							"x": 25.975,
							"y": 4.612500000000001,
							"count": 3
						},
						{
							"x": 25.975,
							"y": 6.15,
							"count": 3
						},
						{
							"x": 25.975,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 25.975,
							"y": 9.225000000000001,
							"count": 3
						},
						{
							"x": 25.975,
							"y": 10.762500000000001,
							"count": 4
						},
						{
							"x": 25.975,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 27.01875,
							"y": 3.075,
							"count": 1
						},
						{
							"x": 27.01875,
							"y": 6.15,
							"count": 4
						},
						{
							"x": 27.01875,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 27.01875,
							"y": 9.225000000000001,
							"count": 2
						},
						{
							"x": 27.01875,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 27.01875,
							"y": 12.3,
							"count": 2
						},
						{
							"x": 27.01875,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 27.01875,
							"y": 16.9125,
							"count": 2
						},
						{
							"x": 27.01875,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 27.01875,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 28.0625,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 28.0625,
							"y": 6.15,
							"count": 1
						},
						{
							"x": 28.0625,
							"y": 7.6875,
							"count": 3
						},
						{
							"x": 28.0625,
							"y": 9.225000000000001,
							"count": 2
						},
						{
							"x": 28.0625,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 28.0625,
							"y": 21.525000000000002,
							"count": 2
						},
						{
							"x": 28.0625,
							"y": 23.0625,
							"count": 1
						},
						{
							"x": 28.0625,
							"y": 27.675,
							"count": 1
						},
						{
							"x": 28.0625,
							"y": 44.587500000000006,
							"count": 1
						},
						{
							"x": 29.10625,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 29.10625,
							"y": 6.15,
							"count": 3
						},
						{
							"x": 29.10625,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 29.10625,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 29.10625,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 29.10625,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 29.10625,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 29.10625,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 29.10625,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 29.10625,
							"y": 23.0625,
							"count": 1
						},
						{
							"x": 29.10625,
							"y": 30.75,
							"count": 1
						},
						{
							"x": 29.10625,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 7.6875,
							"count": 3
						},
						{
							"x": 30.15,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 21.525000000000002,
							"count": 2
						},
						{
							"x": 30.15,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 27.675,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 30.75,
							"count": 1
						},
						{
							"x": 30.15,
							"y": 39.975,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 3.075,
							"count": 2
						},
						{
							"x": 31.19375,
							"y": 4.612500000000001,
							"count": 2
						},
						{
							"x": 31.19375,
							"y": 6.15,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 31.19375,
							"y": 9.225000000000001,
							"count": 2
						},
						{
							"x": 31.19375,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 16.9125,
							"count": 4
						},
						{
							"x": 31.19375,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 32.2875,
							"count": 1
						},
						{
							"x": 31.19375,
							"y": 33.825,
							"count": 2
						},
						{
							"x": 31.19375,
							"y": 36.900000000000006,
							"count": 1
						},
						{
							"x": 32.2375,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 32.2375,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 32.2375,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 32.2375,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 32.2375,
							"y": 13.8375,
							"count": 4
						},
						{
							"x": 32.2375,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 32.2375,
							"y": 24.6,
							"count": 2
						},
						{
							"x": 32.2375,
							"y": 26.137500000000003,
							"count": 2
						},
						{
							"x": 32.2375,
							"y": 32.2875,
							"count": 1
						},
						{
							"x": 32.2375,
							"y": 47.6625,
							"count": 1
						},
						{
							"x": 33.28125,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 33.28125,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 33.28125,
							"y": 10.762500000000001,
							"count": 2
						},
						{
							"x": 33.28125,
							"y": 12.3,
							"count": 2
						},
						{
							"x": 33.28125,
							"y": 15.375,
							"count": 2
						},
						{
							"x": 33.28125,
							"y": 29.212500000000002,
							"count": 2
						},
						{
							"x": 33.28125,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 33.28125,
							"y": 38.4375,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 3.075,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 10.762500000000001,
							"count": 2
						},
						{
							"x": 34.324999999999996,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 16.9125,
							"count": 2
						},
						{
							"x": 34.324999999999996,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 27.675,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 30.75,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 32.2875,
							"count": 1
						},
						{
							"x": 34.324999999999996,
							"y": 47.6625,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 3.075,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 19.9875,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 23.0625,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 36.900000000000006,
							"count": 1
						},
						{
							"x": 35.36875,
							"y": 39.975,
							"count": 2
						},
						{
							"x": 36.4125,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 36.4125,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 36.4125,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 37.45625,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 37.45625,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 37.45625,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 37.45625,
							"y": 26.137500000000003,
							"count": 2
						},
						{
							"x": 37.45625,
							"y": 30.75,
							"count": 1
						}
					],
					"x": {
						"extent": [
							5.1000000000000005,
							38.5
						],
						"delta": 1.04375
					},
					"y": {
						"extent": [
							0,
							49.2
						],
						"delta": 1.5375
					},
					"maxCount": 5
				}
			},
			"free throw percent": {
				"minutes": {
					"bins": [
						{
							"x": 0,
							"y": 5.1000000000000005,
							"count": 6
						},
						{
							"x": 0,
							"y": 6.143750000000001,
							"count": 5
						},
						{
							"x": 0,
							"y": 8.23125,
							"count": 2
						},
						{
							"x": 0,
							"y": 12.40625,
							"count": 1
						},
						{
							"x": 0,
							"y": 13.45,
							"count": 2
						},
						{
							"x": 0,
							"y": 14.493749999999999,
							"count": 1
						},
						{
							"x": 0,
							"y": 18.66875,
							"count": 1
						},
						{
							"x": 0.15625,
							"y": 7.1875,
							"count": 1
						},
						{
							"x": 0.1875,
							"y": 7.1875,
							"count": 1
						},
						{
							"x": 0.25,
							"y": 9.275,
							"count": 1
						},
						{
							"x": 0.25,
							"y": 13.45,
							"count": 1
						},
						{
							"x": 0.3125,
							"y": 5.1000000000000005,
							"count": 1
						},
						{
							"x": 0.3125,
							"y": 6.143750000000001,
							"count": 1
						},
						{
							"x": 0.3125,
							"y": 12.40625,
							"count": 1
						},
						{
							"x": 0.34375,
							"y": 25.975,
							"count": 1
						},
						{
							"x": 0.375,
							"y": 7.1875,
							"count": 1
						},
						{
							"x": 0.375,
							"y": 8.23125,
							"count": 1
						},
						{
							"x": 0.375,
							"y": 15.537500000000001,
							"count": 1
						},
						{
							"x": 0.40625,
							"y": 13.45,
							"count": 1
						},
						{
							"x": 0.40625,
							"y": 18.66875,
							"count": 1
						},
						{
							"x": 0.40625,
							"y": 31.19375,
							"count": 1
						},
						{
							"x": 0.40625,
							"y": 34.324999999999996,
							"count": 1
						},
						{
							"x": 0.4375,
							"y": 6.143750000000001,
							"count": 1
						},
						{
							"x": 0.4375,
							"y": 23.8875,
							"count": 1
						},
						{
							"x": 0.46875,
							"y": 9.275,
							"count": 1
						},
						{
							"x": 0.46875,
							"y": 13.45,
							"count": 1
						},
						{
							"x": 0.46875,
							"y": 24.931250000000002,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 5.1000000000000005,
							"count": 2
						},
						{
							"x": 0.5,
							"y": 6.143750000000001,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 7.1875,
							"count": 2
						},
						{
							"x": 0.5,
							"y": 8.23125,
							"count": 4
						},
						{
							"x": 0.5,
							"y": 9.275,
							"count": 2
						},
						{
							"x": 0.5,
							"y": 11.3625,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 13.45,
							"count": 3
						},
						{
							"x": 0.5,
							"y": 14.493749999999999,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 18.66875,
							"count": 2
						},
						{
							"x": 0.5,
							"y": 25.975,
							"count": 2
						},
						{
							"x": 0.5,
							"y": 28.0625,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 6.143750000000001,
							"count": 2
						},
						{
							"x": 0.53125,
							"y": 9.275,
							"count": 2
						},
						{
							"x": 0.53125,
							"y": 12.40625,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 13.45,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 18.66875,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 23.8875,
							"count": 2
						},
						{
							"x": 0.53125,
							"y": 33.28125,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 34.324999999999996,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 6.143750000000001,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 7.1875,
							"count": 3
						},
						{
							"x": 0.5625,
							"y": 8.23125,
							"count": 2
						},
						{
							"x": 0.5625,
							"y": 11.3625,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 13.45,
							"count": 3
						},
						{
							"x": 0.5625,
							"y": 14.493749999999999,
							"count": 3
						},
						{
							"x": 0.5625,
							"y": 18.66875,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 19.7125,
							"count": 2
						},
						{
							"x": 0.5625,
							"y": 23.8875,
							"count": 2
						},
						{
							"x": 0.5625,
							"y": 24.931250000000002,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 29.10625,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 7.1875,
							"count": 2
						},
						{
							"x": 0.59375,
							"y": 10.318750000000001,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 11.3625,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 14.493749999999999,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 15.537500000000001,
							"count": 2
						},
						{
							"x": 0.59375,
							"y": 17.625,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 19.7125,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 20.75625,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 23.8875,
							"count": 2
						},
						{
							"x": 0.59375,
							"y": 27.01875,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 7.1875,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 8.23125,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 9.275,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 10.318750000000001,
							"count": 3
						},
						{
							"x": 0.625,
							"y": 11.3625,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 12.40625,
							"count": 3
						},
						{
							"x": 0.625,
							"y": 13.45,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 14.493749999999999,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 16.58125,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 17.625,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 18.66875,
							"count": 3
						},
						{
							"x": 0.625,
							"y": 19.7125,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 20.75625,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 22.84375,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 25.975,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 27.01875,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 28.0625,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 29.10625,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 31.19375,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 32.2375,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 5.1000000000000005,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 7.1875,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 8.23125,
							"count": 3
						},
						{
							"x": 0.65625,
							"y": 9.275,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 11.3625,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 12.40625,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 13.45,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 14.493749999999999,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 15.537500000000001,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 16.58125,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 17.625,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 18.66875,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 19.7125,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 20.75625,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 23.8875,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 24.931250000000002,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 27.01875,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 29.10625,
							"count": 3
						},
						{
							"x": 0.65625,
							"y": 32.2375,
							"count": 3
						},
						{
							"x": 0.6875,
							"y": 6.143750000000001,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 7.1875,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 8.23125,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 9.275,
							"count": 3
						},
						{
							"x": 0.6875,
							"y": 10.318750000000001,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 11.3625,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 12.40625,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 13.45,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 14.493749999999999,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 15.537500000000001,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 17.625,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 18.66875,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 20.75625,
							"count": 3
						},
						{
							"x": 0.6875,
							"y": 21.8,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 23.8875,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 27.01875,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 31.19375,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 33.28125,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 34.324999999999996,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 35.36875,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 7.1875,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 8.23125,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 9.275,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 10.318750000000001,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 11.3625,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 16.58125,
							"count": 3
						},
						{
							"x": 0.71875,
							"y": 18.66875,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 19.7125,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 20.75625,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 21.8,
							"count": 3
						},
						{
							"x": 0.71875,
							"y": 22.84375,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 23.8875,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 25.975,
							"count": 3
						},
						{
							"x": 0.71875,
							"y": 27.01875,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 28.0625,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 29.10625,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 30.15,
							"count": 3
						},
						{
							"x": 0.71875,
							"y": 31.19375,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 32.2375,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 33.28125,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 34.324999999999996,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 36.4125,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 5.1000000000000005,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 6.143750000000001,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 7.1875,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 8.23125,
							"count": 3
						},
						{
							"x": 0.75,
							"y": 9.275,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 10.318750000000001,
							"count": 3
						},
						{
							"x": 0.75,
							"y": 11.3625,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 13.45,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 14.493749999999999,
							"count": 4
						},
						{
							"x": 0.75,
							"y": 15.537500000000001,
							"count": 3
						},
						{
							"x": 0.75,
							"y": 16.58125,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 17.625,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 18.66875,
							"count": 4
						},
						{
							"x": 0.75,
							"y": 19.7125,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 20.75625,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 21.8,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 23.8875,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 24.931250000000002,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 25.975,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 27.01875,
							"count": 4
						},
						{
							"x": 0.75,
							"y": 28.0625,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 29.10625,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 30.15,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 31.19375,
							"count": 3
						},
						{
							"x": 0.75,
							"y": 32.2375,
							"count": 3
						},
						{
							"x": 0.75,
							"y": 33.28125,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 34.324999999999996,
							"count": 3
						},
						{
							"x": 0.75,
							"y": 37.45625,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 6.143750000000001,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 7.1875,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 9.275,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 11.3625,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 12.40625,
							"count": 3
						},
						{
							"x": 0.78125,
							"y": 13.45,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 14.493749999999999,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 15.537500000000001,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 16.58125,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 17.625,
							"count": 4
						},
						{
							"x": 0.78125,
							"y": 18.66875,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 19.7125,
							"count": 6
						},
						{
							"x": 0.78125,
							"y": 22.84375,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 23.8875,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 24.931250000000002,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 25.975,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 28.0625,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 29.10625,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 30.15,
							"count": 3
						},
						{
							"x": 0.78125,
							"y": 31.19375,
							"count": 6
						},
						{
							"x": 0.78125,
							"y": 32.2375,
							"count": 3
						},
						{
							"x": 0.78125,
							"y": 33.28125,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 34.324999999999996,
							"count": 3
						},
						{
							"x": 0.78125,
							"y": 35.36875,
							"count": 3
						},
						{
							"x": 0.78125,
							"y": 36.4125,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 5.1000000000000005,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 8.23125,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 9.275,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 10.318750000000001,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 11.3625,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 12.40625,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 13.45,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 14.493749999999999,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 15.537500000000001,
							"count": 4
						},
						{
							"x": 0.8125,
							"y": 16.58125,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 17.625,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 18.66875,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 19.7125,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 21.8,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 22.84375,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 23.8875,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 24.931250000000002,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 25.975,
							"count": 4
						},
						{
							"x": 0.8125,
							"y": 27.01875,
							"count": 4
						},
						{
							"x": 0.8125,
							"y": 28.0625,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 29.10625,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 30.15,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 31.19375,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 32.2375,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 33.28125,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 34.324999999999996,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 35.36875,
							"count": 5
						},
						{
							"x": 0.8125,
							"y": 36.4125,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 37.45625,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 6.143750000000001,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 7.1875,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 10.318750000000001,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 15.537500000000001,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 16.58125,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 17.625,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 18.66875,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 19.7125,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 20.75625,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 21.8,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 23.8875,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 24.931250000000002,
							"count": 3
						},
						{
							"x": 0.84375,
							"y": 27.01875,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 28.0625,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 29.10625,
							"count": 3
						},
						{
							"x": 0.84375,
							"y": 30.15,
							"count": 3
						},
						{
							"x": 0.84375,
							"y": 31.19375,
							"count": 3
						},
						{
							"x": 0.84375,
							"y": 32.2375,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 34.324999999999996,
							"count": 3
						},
						{
							"x": 0.84375,
							"y": 35.36875,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 37.45625,
							"count": 3
						},
						{
							"x": 0.875,
							"y": 5.1000000000000005,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 6.143750000000001,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 8.23125,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 9.275,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 10.318750000000001,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 14.493749999999999,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 17.625,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 18.66875,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 25.975,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 28.0625,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 29.10625,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 30.15,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 31.19375,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 32.2375,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 35.36875,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 6.143750000000001,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 8.23125,
							"count": 2
						},
						{
							"x": 0.90625,
							"y": 18.66875,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 19.7125,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 27.01875,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 33.28125,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 10.318750000000001,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 11.3625,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 21.8,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 22.84375,
							"count": 2
						},
						{
							"x": 0.9375,
							"y": 24.931250000000002,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 35.36875,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 5.1000000000000005,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 6.143750000000001,
							"count": 3
						},
						{
							"x": 0.96875,
							"y": 7.1875,
							"count": 2
						},
						{
							"x": 0.96875,
							"y": 8.23125,
							"count": 2
						},
						{
							"x": 0.96875,
							"y": 9.275,
							"count": 4
						},
						{
							"x": 0.96875,
							"y": 10.318750000000001,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 11.3625,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 15.537500000000001,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 23.8875,
							"count": 1
						}
					],
					"x": {
						"extent": [
							0,
							1
						],
						"delta": 0.03125
					},
					"y": {
						"extent": [
							5.1000000000000005,
							38.5
						],
						"delta": 1.04375
					},
					"maxCount": 6
				},
				"percentage of team minutes": {
					"bins": [
						{
							"x": 0,
							"y": 7.2,
							"count": 4
						},
						{
							"x": 0,
							"y": 9.459375,
							"count": 4
						},
						{
							"x": 0,
							"y": 11.71875,
							"count": 4
						},
						{
							"x": 0,
							"y": 18.496875,
							"count": 2
						},
						{
							"x": 0,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 0,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0,
							"y": 25.275,
							"count": 2
						},
						{
							"x": 0.15625,
							"y": 13.978124999999999,
							"count": 1
						},
						{
							"x": 0.1875,
							"y": 16.2375,
							"count": 1
						},
						{
							"x": 0.25,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 0.25,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 0.3125,
							"y": 11.71875,
							"count": 1
						},
						{
							"x": 0.3125,
							"y": 13.978124999999999,
							"count": 1
						},
						{
							"x": 0.3125,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.34375,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 0.375,
							"y": 13.978124999999999,
							"count": 1
						},
						{
							"x": 0.375,
							"y": 16.2375,
							"count": 1
						},
						{
							"x": 0.375,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 0.40625,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 0.40625,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 0.40625,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 0.40625,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 0.4375,
							"y": 11.71875,
							"count": 1
						},
						{
							"x": 0.4375,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 0.46875,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 0.46875,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 0.46875,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 9.459375,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 11.71875,
							"count": 4
						},
						{
							"x": 0.5,
							"y": 13.978124999999999,
							"count": 4
						},
						{
							"x": 0.5,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 25.275,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 27.534374999999997,
							"count": 2
						},
						{
							"x": 0.5,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 36.571875,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 54.646875,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 11.71875,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 13.978124999999999,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 18.496875,
							"count": 2
						},
						{
							"x": 0.53125,
							"y": 25.275,
							"count": 2
						},
						{
							"x": 0.53125,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 47.86875,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 13.978124999999999,
							"count": 2
						},
						{
							"x": 0.5625,
							"y": 16.2375,
							"count": 4
						},
						{
							"x": 0.5625,
							"y": 25.275,
							"count": 2
						},
						{
							"x": 0.5625,
							"y": 27.534374999999997,
							"count": 2
						},
						{
							"x": 0.5625,
							"y": 29.79375,
							"count": 3
						},
						{
							"x": 0.5625,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 41.090625,
							"count": 2
						},
						{
							"x": 0.5625,
							"y": 47.86875,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 13.978124999999999,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 16.2375,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 32.053125,
							"count": 2
						},
						{
							"x": 0.59375,
							"y": 36.571875,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 41.090625,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 47.86875,
							"count": 2
						},
						{
							"x": 0.59375,
							"y": 54.646875,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 13.978124999999999,
							"count": 3
						},
						{
							"x": 0.625,
							"y": 16.2375,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 20.756249999999998,
							"count": 3
						},
						{
							"x": 0.625,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 25.275,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 27.534374999999997,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 29.79375,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 34.3125,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 36.571875,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 38.83125,
							"count": 3
						},
						{
							"x": 0.625,
							"y": 43.35,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 47.86875,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 54.646875,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 56.90625,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 65.94375,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 9.459375,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 13.978124999999999,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 16.2375,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 25.275,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 29.79375,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 34.3125,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 36.571875,
							"count": 3
						},
						{
							"x": 0.65625,
							"y": 41.090625,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 50.128125000000004,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 54.646875,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 59.165625,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 65.94375,
							"count": 3
						},
						{
							"x": 0.6875,
							"y": 11.71875,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 13.978124999999999,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 16.2375,
							"count": 3
						},
						{
							"x": 0.6875,
							"y": 18.496875,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 23.015625,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 25.275,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 29.79375,
							"count": 4
						},
						{
							"x": 0.6875,
							"y": 32.053125,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 38.83125,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 41.090625,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 70.46249999999999,
							"count": 3
						},
						{
							"x": 0.6875,
							"y": 72.721875,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 16.2375,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 18.496875,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 20.756249999999998,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 34.3125,
							"count": 3
						},
						{
							"x": 0.71875,
							"y": 36.571875,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 41.090625,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 45.609375,
							"count": 3
						},
						{
							"x": 0.71875,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 54.646875,
							"count": 3
						},
						{
							"x": 0.71875,
							"y": 56.90625,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 59.165625,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 61.425,
							"count": 3
						},
						{
							"x": 0.71875,
							"y": 63.684375,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 65.94375,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 70.46249999999999,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 74.98125,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 9.459375,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 11.71875,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 13.978124999999999,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 16.2375,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 18.496875,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 20.756249999999998,
							"count": 3
						},
						{
							"x": 0.75,
							"y": 23.015625,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 27.534374999999997,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 29.79375,
							"count": 4
						},
						{
							"x": 0.75,
							"y": 32.053125,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 34.3125,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 36.571875,
							"count": 3
						},
						{
							"x": 0.75,
							"y": 38.83125,
							"count": 5
						},
						{
							"x": 0.75,
							"y": 43.35,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 50.128125000000004,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 52.3875,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 54.646875,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 56.90625,
							"count": 5
						},
						{
							"x": 0.75,
							"y": 59.165625,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 61.425,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 63.684375,
							"count": 3
						},
						{
							"x": 0.75,
							"y": 65.94375,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 68.203125,
							"count": 4
						},
						{
							"x": 0.75,
							"y": 70.46249999999999,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 77.240625,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 13.978124999999999,
							"count": 3
						},
						{
							"x": 0.78125,
							"y": 18.496875,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 25.275,
							"count": 3
						},
						{
							"x": 0.78125,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 32.053125,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 34.3125,
							"count": 3
						},
						{
							"x": 0.78125,
							"y": 36.571875,
							"count": 4
						},
						{
							"x": 0.78125,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 41.090625,
							"count": 6
						},
						{
							"x": 0.78125,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 47.86875,
							"count": 3
						},
						{
							"x": 0.78125,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 54.646875,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 59.165625,
							"count": 3
						},
						{
							"x": 0.78125,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 63.684375,
							"count": 7
						},
						{
							"x": 0.78125,
							"y": 65.94375,
							"count": 5
						},
						{
							"x": 0.78125,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 70.46249999999999,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 72.721875,
							"count": 4
						},
						{
							"x": 0.78125,
							"y": 74.98125,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 9.459375,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 18.496875,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 23.015625,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 25.275,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 27.534374999999997,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 29.79375,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 32.053125,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 34.3125,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 36.571875,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 38.83125,
							"count": 4
						},
						{
							"x": 0.8125,
							"y": 41.090625,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 45.609375,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 47.86875,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 52.3875,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 54.646875,
							"count": 4
						},
						{
							"x": 0.8125,
							"y": 56.90625,
							"count": 4
						},
						{
							"x": 0.8125,
							"y": 59.165625,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 61.425,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 63.684375,
							"count": 4
						},
						{
							"x": 0.8125,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 68.203125,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 70.46249999999999,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 72.721875,
							"count": 5
						},
						{
							"x": 0.8125,
							"y": 74.98125,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 77.240625,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 13.978124999999999,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 32.053125,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 34.3125,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 36.571875,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 38.83125,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 41.090625,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 43.35,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 45.609375,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 47.86875,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 50.128125000000004,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 52.3875,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 56.90625,
							"count": 3
						},
						{
							"x": 0.84375,
							"y": 59.165625,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 61.425,
							"count": 3
						},
						{
							"x": 0.84375,
							"y": 63.684375,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 65.94375,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 70.46249999999999,
							"count": 3
						},
						{
							"x": 0.84375,
							"y": 72.721875,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 77.240625,
							"count": 3
						},
						{
							"x": 0.875,
							"y": 9.459375,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 11.71875,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 18.496875,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 27.534374999999997,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 34.3125,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 36.571875,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 52.3875,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 59.165625,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 61.425,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 63.684375,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 65.94375,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 74.98125,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 11.71875,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 16.2375,
							"count": 2
						},
						{
							"x": 0.90625,
							"y": 38.83125,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 41.090625,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 56.90625,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 68.203125,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 45.609375,
							"count": 3
						},
						{
							"x": 0.9375,
							"y": 50.128125000000004,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 70.46249999999999,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 9.459375,
							"count": 2
						},
						{
							"x": 0.96875,
							"y": 11.71875,
							"count": 2
						},
						{
							"x": 0.96875,
							"y": 13.978124999999999,
							"count": 2
						},
						{
							"x": 0.96875,
							"y": 16.2375,
							"count": 3
						},
						{
							"x": 0.96875,
							"y": 18.496875,
							"count": 3
						},
						{
							"x": 0.96875,
							"y": 20.756249999999998,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 23.015625,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 29.79375,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 47.86875,
							"count": 1
						}
					],
					"x": {
						"extent": [
							0,
							1
						],
						"delta": 0.03125
					},
					"y": {
						"extent": [
							7.2,
							79.5
						],
						"delta": 2.259375
					},
					"maxCount": 7
				},
				"steals per game": {
					"bins": [
						{
							"x": 0,
							"y": 0,
							"count": 9
						},
						{
							"x": 0,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 0,
							"y": 0.23249999999999998,
							"count": 3
						},
						{
							"x": 0,
							"y": 0.3875,
							"count": 1
						},
						{
							"x": 0,
							"y": 0.46499999999999997,
							"count": 3
						},
						{
							"x": 0,
							"y": 1.9375,
							"count": 1
						},
						{
							"x": 0.15625,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.1875,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 0.25,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 0.25,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 0.3125,
							"y": 0.0775,
							"count": 1
						},
						{
							"x": 0.3125,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 0.3125,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 0.34375,
							"y": 0.6975,
							"count": 1
						},
						{
							"x": 0.375,
							"y": 0.0775,
							"count": 2
						},
						{
							"x": 0.375,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 0.40625,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 0.40625,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 0.40625,
							"y": 1.24,
							"count": 2
						},
						{
							"x": 0.4375,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 0.4375,
							"y": 1.24,
							"count": 1
						},
						{
							"x": 0.46875,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 0.46875,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 0.46875,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 0,
							"count": 4
						},
						{
							"x": 0.5,
							"y": 0.0775,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 0.155,
							"count": 3
						},
						{
							"x": 0.5,
							"y": 0.23249999999999998,
							"count": 3
						},
						{
							"x": 0.5,
							"y": 0.31,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 0.3875,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 0.46499999999999997,
							"count": 3
						},
						{
							"x": 0.5,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 0.62,
							"count": 2
						},
						{
							"x": 0.5,
							"y": 0.8525,
							"count": 2
						},
						{
							"x": 0.53125,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 0.0775,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 0.155,
							"count": 2
						},
						{
							"x": 0.53125,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 0.53125,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 1.3175,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 0.0775,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 0.23249999999999998,
							"count": 4
						},
						{
							"x": 0.5625,
							"y": 0.31,
							"count": 4
						},
						{
							"x": 0.5625,
							"y": 0.3875,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 0.46499999999999997,
							"count": 3
						},
						{
							"x": 0.5625,
							"y": 0.6975,
							"count": 3
						},
						{
							"x": 0.5625,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 0.0775,
							"count": 2
						},
						{
							"x": 0.59375,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 0.31,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 0.5425,
							"count": 2
						},
						{
							"x": 0.59375,
							"y": 0.62,
							"count": 2
						},
						{
							"x": 0.59375,
							"y": 0.6975,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 0.0775,
							"count": 3
						},
						{
							"x": 0.625,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 0.31,
							"count": 4
						},
						{
							"x": 0.625,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 0.46499999999999997,
							"count": 3
						},
						{
							"x": 0.625,
							"y": 0.5425,
							"count": 3
						},
						{
							"x": 0.625,
							"y": 0.62,
							"count": 3
						},
						{
							"x": 0.625,
							"y": 0.6975,
							"count": 4
						},
						{
							"x": 0.625,
							"y": 0.8525,
							"count": 3
						},
						{
							"x": 0.625,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 1.3175,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 1.4725,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 1.6275,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 0.0775,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 0.155,
							"count": 3
						},
						{
							"x": 0.65625,
							"y": 0.31,
							"count": 6
						},
						{
							"x": 0.65625,
							"y": 0.3875,
							"count": 4
						},
						{
							"x": 0.65625,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 0.5425,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 0.62,
							"count": 4
						},
						{
							"x": 0.65625,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 1.0075,
							"count": 4
						},
						{
							"x": 0.65625,
							"y": 1.085,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 0,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 0.0775,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 0.155,
							"count": 3
						},
						{
							"x": 0.6875,
							"y": 0.31,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 0.3875,
							"count": 4
						},
						{
							"x": 0.6875,
							"y": 0.46499999999999997,
							"count": 5
						},
						{
							"x": 0.6875,
							"y": 0.5425,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 0.62,
							"count": 6
						},
						{
							"x": 0.6875,
							"y": 0.775,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 1.085,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 1.7825,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 0.31,
							"count": 7
						},
						{
							"x": 0.71875,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 0.46499999999999997,
							"count": 5
						},
						{
							"x": 0.71875,
							"y": 0.5425,
							"count": 4
						},
						{
							"x": 0.71875,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 0.6975,
							"count": 3
						},
						{
							"x": 0.71875,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 0.8525,
							"count": 3
						},
						{
							"x": 0.71875,
							"y": 0.9299999999999999,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 1.1625,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 1.24,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 1.395,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 1.4725,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 1.6275,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 1.705,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 0,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 0.0775,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 0.155,
							"count": 3
						},
						{
							"x": 0.75,
							"y": 0.23249999999999998,
							"count": 7
						},
						{
							"x": 0.75,
							"y": 0.31,
							"count": 8
						},
						{
							"x": 0.75,
							"y": 0.3875,
							"count": 5
						},
						{
							"x": 0.75,
							"y": 0.46499999999999997,
							"count": 4
						},
						{
							"x": 0.75,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 0.62,
							"count": 3
						},
						{
							"x": 0.75,
							"y": 0.6975,
							"count": 4
						},
						{
							"x": 0.75,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 0.8525,
							"count": 3
						},
						{
							"x": 0.75,
							"y": 0.9299999999999999,
							"count": 4
						},
						{
							"x": 0.75,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 1.085,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 1.24,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 1.3175,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 1.4725,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 1.55,
							"count": 4
						},
						{
							"x": 0.75,
							"y": 1.6275,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 1.8599999999999999,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 0.0775,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 0.155,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 0.31,
							"count": 6
						},
						{
							"x": 0.78125,
							"y": 0.46499999999999997,
							"count": 9
						},
						{
							"x": 0.78125,
							"y": 0.5425,
							"count": 4
						},
						{
							"x": 0.78125,
							"y": 0.62,
							"count": 4
						},
						{
							"x": 0.78125,
							"y": 0.6975,
							"count": 5
						},
						{
							"x": 0.78125,
							"y": 0.775,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 0.8525,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 0.9299999999999999,
							"count": 7
						},
						{
							"x": 0.78125,
							"y": 1.0075,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 1.085,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 1.1625,
							"count": 3
						},
						{
							"x": 0.78125,
							"y": 1.3175,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 1.395,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 1.55,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 1.6275,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 1.705,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 1.7825,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 2.2475,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 0.0775,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 0.155,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 0.31,
							"count": 4
						},
						{
							"x": 0.8125,
							"y": 0.3875,
							"count": 6
						},
						{
							"x": 0.8125,
							"y": 0.46499999999999997,
							"count": 8
						},
						{
							"x": 0.8125,
							"y": 0.5425,
							"count": 5
						},
						{
							"x": 0.8125,
							"y": 0.62,
							"count": 4
						},
						{
							"x": 0.8125,
							"y": 0.6975,
							"count": 6
						},
						{
							"x": 0.8125,
							"y": 0.775,
							"count": 4
						},
						{
							"x": 0.8125,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 0.9299999999999999,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 1.0075,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 1.085,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 1.1625,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 1.3175,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 1.395,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 1.4725,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 1.8599999999999999,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 0.155,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 0.46499999999999997,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 0.62,
							"count": 3
						},
						{
							"x": 0.84375,
							"y": 0.6975,
							"count": 3
						},
						{
							"x": 0.84375,
							"y": 0.775,
							"count": 6
						},
						{
							"x": 0.84375,
							"y": 0.8525,
							"count": 3
						},
						{
							"x": 0.84375,
							"y": 1.0075,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 1.085,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 1.24,
							"count": 3
						},
						{
							"x": 0.84375,
							"y": 1.395,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 1.4725,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 1.55,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 1.8599999999999999,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 2.4025,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 0,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 0.0775,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 0.31,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 0.3875,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 0.5425,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 0.6975,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 0.775,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 0.8525,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 0.9299999999999999,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 1.6275,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 0.0775,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 0.31,
							"count": 2
						},
						{
							"x": 0.90625,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 0.31,
							"count": 3
						},
						{
							"x": 0.9375,
							"y": 0.3875,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 0,
							"count": 4
						},
						{
							"x": 0.96875,
							"y": 0.0775,
							"count": 3
						},
						{
							"x": 0.96875,
							"y": 0.155,
							"count": 5
						},
						{
							"x": 0.96875,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 0.31,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 0.62,
							"count": 1
						}
					],
					"x": {
						"extent": [
							0,
							1
						],
						"delta": 0.03125
					},
					"y": {
						"extent": [
							0,
							2.48
						],
						"delta": 0.0775
					},
					"maxCount": 9
				},
				"percentage of team assists": {
					"bins": [
						{
							"x": 0,
							"y": 0,
							"count": 7
						},
						{
							"x": 0,
							"y": 3.075,
							"count": 2
						},
						{
							"x": 0,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 0,
							"y": 6.15,
							"count": 1
						},
						{
							"x": 0,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 0,
							"y": 10.762500000000001,
							"count": 3
						},
						{
							"x": 0,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 0,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 0.15625,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.1875,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.25,
							"y": 3.075,
							"count": 1
						},
						{
							"x": 0.25,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 0.3125,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 0.3125,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 0.3125,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 0.34375,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 0.375,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.375,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 0.375,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 0.40625,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 0.40625,
							"y": 3.075,
							"count": 1
						},
						{
							"x": 0.40625,
							"y": 4.612500000000001,
							"count": 2
						},
						{
							"x": 0.4375,
							"y": 6.15,
							"count": 1
						},
						{
							"x": 0.4375,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0.46875,
							"y": 1.5375,
							"count": 2
						},
						{
							"x": 0.46875,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 0,
							"count": 2
						},
						{
							"x": 0.5,
							"y": 3.075,
							"count": 4
						},
						{
							"x": 0.5,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 0.5,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 0.5,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 0.5,
							"y": 10.762500000000001,
							"count": 4
						},
						{
							"x": 0.5,
							"y": 12.3,
							"count": 2
						},
						{
							"x": 0.5,
							"y": 15.375,
							"count": 2
						},
						{
							"x": 0.5,
							"y": 44.587500000000006,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 1.5375,
							"count": 2
						},
						{
							"x": 0.53125,
							"y": 3.075,
							"count": 2
						},
						{
							"x": 0.53125,
							"y": 4.612500000000001,
							"count": 2
						},
						{
							"x": 0.53125,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 0.53125,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 0.53125,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 3.075,
							"count": 3
						},
						{
							"x": 0.5625,
							"y": 4.612500000000001,
							"count": 6
						},
						{
							"x": 0.5625,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 0.5625,
							"y": 7.6875,
							"count": 3
						},
						{
							"x": 0.5625,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 0.5625,
							"y": 21.525000000000002,
							"count": 2
						},
						{
							"x": 0.5625,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 3.075,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 4.612500000000001,
							"count": 3
						},
						{
							"x": 0.59375,
							"y": 6.15,
							"count": 3
						},
						{
							"x": 0.59375,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 0.59375,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 19.9875,
							"count": 1
						},
						{
							"x": 0.59375,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 1.5375,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 3.075,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 4.612500000000001,
							"count": 6
						},
						{
							"x": 0.625,
							"y": 6.15,
							"count": 3
						},
						{
							"x": 0.625,
							"y": 7.6875,
							"count": 6
						},
						{
							"x": 0.625,
							"y": 9.225000000000001,
							"count": 3
						},
						{
							"x": 0.625,
							"y": 10.762500000000001,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 16.9125,
							"count": 2
						},
						{
							"x": 0.625,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 19.9875,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 30.75,
							"count": 1
						},
						{
							"x": 0.625,
							"y": 47.6625,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 3.075,
							"count": 3
						},
						{
							"x": 0.65625,
							"y": 4.612500000000001,
							"count": 5
						},
						{
							"x": 0.65625,
							"y": 6.15,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 7.6875,
							"count": 5
						},
						{
							"x": 0.65625,
							"y": 9.225000000000001,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 10.762500000000001,
							"count": 4
						},
						{
							"x": 0.65625,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 13.8375,
							"count": 2
						},
						{
							"x": 0.65625,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 0.65625,
							"y": 30.75,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 3.075,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 4.612500000000001,
							"count": 4
						},
						{
							"x": 0.6875,
							"y": 6.15,
							"count": 5
						},
						{
							"x": 0.6875,
							"y": 7.6875,
							"count": 3
						},
						{
							"x": 0.6875,
							"y": 9.225000000000001,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 10.762500000000001,
							"count": 3
						},
						{
							"x": 0.6875,
							"y": 12.3,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 13.8375,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 16.9125,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 18.450000000000003,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 24.6,
							"count": 2
						},
						{
							"x": 0.6875,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 0.6875,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 3.075,
							"count": 4
						},
						{
							"x": 0.71875,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 6.15,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 7.6875,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 9.225000000000001,
							"count": 8
						},
						{
							"x": 0.71875,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 12.3,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 15.375,
							"count": 3
						},
						{
							"x": 0.71875,
							"y": 16.9125,
							"count": 3
						},
						{
							"x": 0.71875,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 19.9875,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 23.0625,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 24.6,
							"count": 2
						},
						{
							"x": 0.71875,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 27.675,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 0.71875,
							"y": 41.5125,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 3.075,
							"count": 4
						},
						{
							"x": 0.75,
							"y": 4.612500000000001,
							"count": 6
						},
						{
							"x": 0.75,
							"y": 6.15,
							"count": 8
						},
						{
							"x": 0.75,
							"y": 7.6875,
							"count": 11
						},
						{
							"x": 0.75,
							"y": 9.225000000000001,
							"count": 6
						},
						{
							"x": 0.75,
							"y": 10.762500000000001,
							"count": 10
						},
						{
							"x": 0.75,
							"y": 13.8375,
							"count": 3
						},
						{
							"x": 0.75,
							"y": 16.9125,
							"count": 3
						},
						{
							"x": 0.75,
							"y": 18.450000000000003,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 21.525000000000002,
							"count": 2
						},
						{
							"x": 0.75,
							"y": 26.137500000000003,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 27.675,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 30.75,
							"count": 1
						},
						{
							"x": 0.75,
							"y": 33.825,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 1.5375,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 3.075,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 4.612500000000001,
							"count": 4
						},
						{
							"x": 0.78125,
							"y": 6.15,
							"count": 4
						},
						{
							"x": 0.78125,
							"y": 7.6875,
							"count": 11
						},
						{
							"x": 0.78125,
							"y": 9.225000000000001,
							"count": 3
						},
						{
							"x": 0.78125,
							"y": 10.762500000000001,
							"count": 3
						},
						{
							"x": 0.78125,
							"y": 12.3,
							"count": 5
						},
						{
							"x": 0.78125,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 15.375,
							"count": 4
						},
						{
							"x": 0.78125,
							"y": 16.9125,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 19.9875,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 21.525000000000002,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 23.0625,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 26.137500000000003,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 30.75,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 32.2875,
							"count": 4
						},
						{
							"x": 0.78125,
							"y": 36.900000000000006,
							"count": 2
						},
						{
							"x": 0.78125,
							"y": 38.4375,
							"count": 1
						},
						{
							"x": 0.78125,
							"y": 39.975,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 3.075,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 4.612500000000001,
							"count": 6
						},
						{
							"x": 0.8125,
							"y": 6.15,
							"count": 8
						},
						{
							"x": 0.8125,
							"y": 7.6875,
							"count": 4
						},
						{
							"x": 0.8125,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 10.762500000000001,
							"count": 5
						},
						{
							"x": 0.8125,
							"y": 12.3,
							"count": 5
						},
						{
							"x": 0.8125,
							"y": 13.8375,
							"count": 4
						},
						{
							"x": 0.8125,
							"y": 15.375,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 16.9125,
							"count": 5
						},
						{
							"x": 0.8125,
							"y": 18.450000000000003,
							"count": 4
						},
						{
							"x": 0.8125,
							"y": 19.9875,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 21.525000000000002,
							"count": 4
						},
						{
							"x": 0.8125,
							"y": 23.0625,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 0.8125,
							"y": 29.212500000000002,
							"count": 3
						},
						{
							"x": 0.8125,
							"y": 33.825,
							"count": 2
						},
						{
							"x": 0.8125,
							"y": 39.975,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 6.15,
							"count": 4
						},
						{
							"x": 0.84375,
							"y": 7.6875,
							"count": 6
						},
						{
							"x": 0.84375,
							"y": 10.762500000000001,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 12.3,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 15.375,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 16.9125,
							"count": 4
						},
						{
							"x": 0.84375,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 23.0625,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 26.137500000000003,
							"count": 3
						},
						{
							"x": 0.84375,
							"y": 27.675,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 29.212500000000002,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 30.75,
							"count": 2
						},
						{
							"x": 0.84375,
							"y": 32.2875,
							"count": 1
						},
						{
							"x": 0.84375,
							"y": 33.825,
							"count": 3
						},
						{
							"x": 0.84375,
							"y": 47.6625,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 6.15,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 9.225000000000001,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 10.762500000000001,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 15.375,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 23.0625,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 27.675,
							"count": 1
						},
						{
							"x": 0.875,
							"y": 29.212500000000002,
							"count": 2
						},
						{
							"x": 0.875,
							"y": 39.975,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 6.15,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 12.3,
							"count": 3
						},
						{
							"x": 0.90625,
							"y": 24.6,
							"count": 1
						},
						{
							"x": 0.90625,
							"y": 39.975,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 3.075,
							"count": 2
						},
						{
							"x": 0.9375,
							"y": 4.612500000000001,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 0.9375,
							"y": 32.2875,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 0,
							"count": 2
						},
						{
							"x": 0.96875,
							"y": 3.075,
							"count": 2
						},
						{
							"x": 0.96875,
							"y": 4.612500000000001,
							"count": 2
						},
						{
							"x": 0.96875,
							"y": 6.15,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 7.6875,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 9.225000000000001,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 10.762500000000001,
							"count": 2
						},
						{
							"x": 0.96875,
							"y": 12.3,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 13.8375,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 18.450000000000003,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 21.525000000000002,
							"count": 1
						},
						{
							"x": 0.96875,
							"y": 26.137500000000003,
							"count": 1
						}
					],
					"x": {
						"extent": [
							0,
							1
						],
						"delta": 0.03125
					},
					"y": {
						"extent": [
							0,
							49.2
						],
						"delta": 1.5375
					},
					"maxCount": 11
				}
			},
			"true shooting percentage": {
				"steals per game": {
					"bins": [
						{
							"x": 0,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 0,
							"y": 0.46499999999999997,
							"count": 2
						},
						{
							"x": 0.179375,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.20500000000000002,
							"y": 0.23249999999999998,
							"count": 2
						},
						{
							"x": 0.23062500000000002,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.23062500000000002,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 0.25625000000000003,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.25625000000000003,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 0.28187500000000004,
							"y": 0,
							"count": 3
						},
						{
							"x": 0.3075,
							"y": 0,
							"count": 3
						},
						{
							"x": 0.3075,
							"y": 0.0775,
							"count": 1
						},
						{
							"x": 0.3075,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 0.333125,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 0.333125,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 0.35875,
							"y": 0,
							"count": 2
						},
						{
							"x": 0.35875,
							"y": 0.0775,
							"count": 2
						},
						{
							"x": 0.35875,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 0.35875,
							"y": 0.3875,
							"count": 1
						},
						{
							"x": 0.35875,
							"y": 0.775,
							"count": 1
						},
						{
							"x": 0.384375,
							"y": 0.0775,
							"count": 2
						},
						{
							"x": 0.384375,
							"y": 0.155,
							"count": 2
						},
						{
							"x": 0.384375,
							"y": 0.31,
							"count": 1
						},
						{
							"x": 0.384375,
							"y": 0.3875,
							"count": 1
						},
						{
							"x": 0.384375,
							"y": 0.5425,
							"count": 1
						},
						{
							"x": 0.384375,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 0.41000000000000003,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.41000000000000003,
							"y": 0.0775,
							"count": 1
						},
						{
							"x": 0.41000000000000003,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 0.41000000000000003,
							"y": 0.31,
							"count": 1
						},
						{
							"x": 0.41000000000000003,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 0.41000000000000003,
							"y": 0.46499999999999997,
							"count": 3
						},
						{
							"x": 0.41000000000000003,
							"y": 0.5425,
							"count": 3
						},
						{
							"x": 0.43562500000000004,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.43562500000000004,
							"y": 0.0775,
							"count": 3
						},
						{
							"x": 0.43562500000000004,
							"y": 0.155,
							"count": 5
						},
						{
							"x": 0.43562500000000004,
							"y": 0.23249999999999998,
							"count": 5
						},
						{
							"x": 0.43562500000000004,
							"y": 0.31,
							"count": 5
						},
						{
							"x": 0.43562500000000004,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 0.43562500000000004,
							"y": 0.46499999999999997,
							"count": 7
						},
						{
							"x": 0.43562500000000004,
							"y": 0.5425,
							"count": 2
						},
						{
							"x": 0.43562500000000004,
							"y": 0.62,
							"count": 3
						},
						{
							"x": 0.43562500000000004,
							"y": 0.6975,
							"count": 2
						},
						{
							"x": 0.43562500000000004,
							"y": 1.3175,
							"count": 1
						},
						{
							"x": 0.46125000000000005,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.46125000000000005,
							"y": 0.0775,
							"count": 4
						},
						{
							"x": 0.46125000000000005,
							"y": 0.155,
							"count": 2
						},
						{
							"x": 0.46125000000000005,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 0.46125000000000005,
							"y": 0.31,
							"count": 6
						},
						{
							"x": 0.46125000000000005,
							"y": 0.3875,
							"count": 6
						},
						{
							"x": 0.46125000000000005,
							"y": 0.46499999999999997,
							"count": 2
						},
						{
							"x": 0.46125000000000005,
							"y": 0.5425,
							"count": 3
						},
						{
							"x": 0.46125000000000005,
							"y": 0.62,
							"count": 5
						},
						{
							"x": 0.46125000000000005,
							"y": 0.6975,
							"count": 1
						},
						{
							"x": 0.46125000000000005,
							"y": 0.775,
							"count": 3
						},
						{
							"x": 0.46125000000000005,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 0.46125000000000005,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 0.46125000000000005,
							"y": 1.1625,
							"count": 1
						},
						{
							"x": 0.46125000000000005,
							"y": 1.24,
							"count": 2
						},
						{
							"x": 0.46125000000000005,
							"y": 1.3175,
							"count": 1
						},
						{
							"x": 0.46125000000000005,
							"y": 1.55,
							"count": 1
						},
						{
							"x": 0.46125000000000005,
							"y": 1.7825,
							"count": 1
						},
						{
							"x": 0.48687500000000006,
							"y": 0,
							"count": 2
						},
						{
							"x": 0.48687500000000006,
							"y": 0.0775,
							"count": 3
						},
						{
							"x": 0.48687500000000006,
							"y": 0.155,
							"count": 8
						},
						{
							"x": 0.48687500000000006,
							"y": 0.23249999999999998,
							"count": 3
						},
						{
							"x": 0.48687500000000006,
							"y": 0.31,
							"count": 19
						},
						{
							"x": 0.48687500000000006,
							"y": 0.3875,
							"count": 4
						},
						{
							"x": 0.48687500000000006,
							"y": 0.46499999999999997,
							"count": 5
						},
						{
							"x": 0.48687500000000006,
							"y": 0.5425,
							"count": 3
						},
						{
							"x": 0.48687500000000006,
							"y": 0.62,
							"count": 5
						},
						{
							"x": 0.48687500000000006,
							"y": 0.6975,
							"count": 4
						},
						{
							"x": 0.48687500000000006,
							"y": 0.775,
							"count": 4
						},
						{
							"x": 0.48687500000000006,
							"y": 0.8525,
							"count": 3
						},
						{
							"x": 0.48687500000000006,
							"y": 0.9299999999999999,
							"count": 6
						},
						{
							"x": 0.48687500000000006,
							"y": 1.0075,
							"count": 3
						},
						{
							"x": 0.48687500000000006,
							"y": 1.085,
							"count": 1
						},
						{
							"x": 0.48687500000000006,
							"y": 1.1625,
							"count": 4
						},
						{
							"x": 0.48687500000000006,
							"y": 1.24,
							"count": 1
						},
						{
							"x": 0.48687500000000006,
							"y": 1.6275,
							"count": 1
						},
						{
							"x": 0.48687500000000006,
							"y": 1.9375,
							"count": 1
						},
						{
							"x": 0.48687500000000006,
							"y": 2.2475,
							"count": 1
						},
						{
							"x": 0.5125000000000001,
							"y": 0,
							"count": 4
						},
						{
							"x": 0.5125000000000001,
							"y": 0.0775,
							"count": 3
						},
						{
							"x": 0.5125000000000001,
							"y": 0.155,
							"count": 2
						},
						{
							"x": 0.5125000000000001,
							"y": 0.23249999999999998,
							"count": 5
						},
						{
							"x": 0.5125000000000001,
							"y": 0.31,
							"count": 6
						},
						{
							"x": 0.5125000000000001,
							"y": 0.3875,
							"count": 5
						},
						{
							"x": 0.5125000000000001,
							"y": 0.46499999999999997,
							"count": 11
						},
						{
							"x": 0.5125000000000001,
							"y": 0.5425,
							"count": 4
						},
						{
							"x": 0.5125000000000001,
							"y": 0.62,
							"count": 10
						},
						{
							"x": 0.5125000000000001,
							"y": 0.6975,
							"count": 9
						},
						{
							"x": 0.5125000000000001,
							"y": 0.775,
							"count": 2
						},
						{
							"x": 0.5125000000000001,
							"y": 0.8525,
							"count": 6
						},
						{
							"x": 0.5125000000000001,
							"y": 0.9299999999999999,
							"count": 6
						},
						{
							"x": 0.5125000000000001,
							"y": 1.0075,
							"count": 6
						},
						{
							"x": 0.5125000000000001,
							"y": 1.085,
							"count": 3
						},
						{
							"x": 0.5125000000000001,
							"y": 1.1625,
							"count": 3
						},
						{
							"x": 0.5125000000000001,
							"y": 1.24,
							"count": 2
						},
						{
							"x": 0.5125000000000001,
							"y": 1.395,
							"count": 1
						},
						{
							"x": 0.5125000000000001,
							"y": 1.4725,
							"count": 1
						},
						{
							"x": 0.5125000000000001,
							"y": 1.55,
							"count": 1
						},
						{
							"x": 0.5125000000000001,
							"y": 1.6275,
							"count": 1
						},
						{
							"x": 0.5125000000000001,
							"y": 1.705,
							"count": 1
						},
						{
							"x": 0.5125000000000001,
							"y": 1.7825,
							"count": 1
						},
						{
							"x": 0.5125000000000001,
							"y": 1.8599999999999999,
							"count": 1
						},
						{
							"x": 0.5381250000000001,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.5381250000000001,
							"y": 0.155,
							"count": 5
						},
						{
							"x": 0.5381250000000001,
							"y": 0.23249999999999998,
							"count": 3
						},
						{
							"x": 0.5381250000000001,
							"y": 0.31,
							"count": 4
						},
						{
							"x": 0.5381250000000001,
							"y": 0.3875,
							"count": 5
						},
						{
							"x": 0.5381250000000001,
							"y": 0.46499999999999997,
							"count": 9
						},
						{
							"x": 0.5381250000000001,
							"y": 0.5425,
							"count": 8
						},
						{
							"x": 0.5381250000000001,
							"y": 0.62,
							"count": 3
						},
						{
							"x": 0.5381250000000001,
							"y": 0.6975,
							"count": 6
						},
						{
							"x": 0.5381250000000001,
							"y": 0.775,
							"count": 6
						},
						{
							"x": 0.5381250000000001,
							"y": 0.8525,
							"count": 7
						},
						{
							"x": 0.5381250000000001,
							"y": 0.9299999999999999,
							"count": 5
						},
						{
							"x": 0.5381250000000001,
							"y": 1.0075,
							"count": 3
						},
						{
							"x": 0.5381250000000001,
							"y": 1.085,
							"count": 2
						},
						{
							"x": 0.5381250000000001,
							"y": 1.1625,
							"count": 3
						},
						{
							"x": 0.5381250000000001,
							"y": 1.24,
							"count": 2
						},
						{
							"x": 0.5381250000000001,
							"y": 1.3175,
							"count": 3
						},
						{
							"x": 0.5381250000000001,
							"y": 1.4725,
							"count": 2
						},
						{
							"x": 0.5381250000000001,
							"y": 1.55,
							"count": 1
						},
						{
							"x": 0.5381250000000001,
							"y": 1.705,
							"count": 1
						},
						{
							"x": 0.5381250000000001,
							"y": 1.7825,
							"count": 1
						},
						{
							"x": 0.5381250000000001,
							"y": 1.8599999999999999,
							"count": 2
						},
						{
							"x": 0.5637500000000001,
							"y": 0.0775,
							"count": 1
						},
						{
							"x": 0.5637500000000001,
							"y": 0.23249999999999998,
							"count": 5
						},
						{
							"x": 0.5637500000000001,
							"y": 0.31,
							"count": 5
						},
						{
							"x": 0.5637500000000001,
							"y": 0.3875,
							"count": 3
						},
						{
							"x": 0.5637500000000001,
							"y": 0.46499999999999997,
							"count": 8
						},
						{
							"x": 0.5637500000000001,
							"y": 0.5425,
							"count": 6
						},
						{
							"x": 0.5637500000000001,
							"y": 0.62,
							"count": 5
						},
						{
							"x": 0.5637500000000001,
							"y": 0.6975,
							"count": 4
						},
						{
							"x": 0.5637500000000001,
							"y": 0.775,
							"count": 6
						},
						{
							"x": 0.5637500000000001,
							"y": 0.8525,
							"count": 4
						},
						{
							"x": 0.5637500000000001,
							"y": 0.9299999999999999,
							"count": 4
						},
						{
							"x": 0.5637500000000001,
							"y": 1.085,
							"count": 2
						},
						{
							"x": 0.5637500000000001,
							"y": 1.1625,
							"count": 2
						},
						{
							"x": 0.5637500000000001,
							"y": 1.24,
							"count": 1
						},
						{
							"x": 0.5637500000000001,
							"y": 1.3175,
							"count": 1
						},
						{
							"x": 0.5637500000000001,
							"y": 1.395,
							"count": 2
						},
						{
							"x": 0.5637500000000001,
							"y": 1.4725,
							"count": 3
						},
						{
							"x": 0.5637500000000001,
							"y": 1.55,
							"count": 1
						},
						{
							"x": 0.5637500000000001,
							"y": 1.6275,
							"count": 1
						},
						{
							"x": 0.5637500000000001,
							"y": 2.4025,
							"count": 1
						},
						{
							"x": 0.5893750000000001,
							"y": 0,
							"count": 2
						},
						{
							"x": 0.5893750000000001,
							"y": 0.0775,
							"count": 2
						},
						{
							"x": 0.5893750000000001,
							"y": 0.155,
							"count": 2
						},
						{
							"x": 0.5893750000000001,
							"y": 0.23249999999999998,
							"count": 1
						},
						{
							"x": 0.5893750000000001,
							"y": 0.31,
							"count": 3
						},
						{
							"x": 0.5893750000000001,
							"y": 0.3875,
							"count": 2
						},
						{
							"x": 0.5893750000000001,
							"y": 0.46499999999999997,
							"count": 2
						},
						{
							"x": 0.5893750000000001,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 0.5893750000000001,
							"y": 0.6975,
							"count": 4
						},
						{
							"x": 0.5893750000000001,
							"y": 0.775,
							"count": 3
						},
						{
							"x": 0.5893750000000001,
							"y": 0.8525,
							"count": 1
						},
						{
							"x": 0.5893750000000001,
							"y": 1.0075,
							"count": 2
						},
						{
							"x": 0.5893750000000001,
							"y": 1.085,
							"count": 1
						},
						{
							"x": 0.5893750000000001,
							"y": 1.24,
							"count": 1
						},
						{
							"x": 0.5893750000000001,
							"y": 1.3175,
							"count": 1
						},
						{
							"x": 0.5893750000000001,
							"y": 1.395,
							"count": 1
						},
						{
							"x": 0.5893750000000001,
							"y": 1.6275,
							"count": 2
						},
						{
							"x": 0.5893750000000001,
							"y": 1.705,
							"count": 1
						},
						{
							"x": 0.615,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.615,
							"y": 0.0775,
							"count": 1
						},
						{
							"x": 0.615,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 0.615,
							"y": 0.31,
							"count": 1
						},
						{
							"x": 0.615,
							"y": 0.46499999999999997,
							"count": 1
						},
						{
							"x": 0.615,
							"y": 0.62,
							"count": 1
						},
						{
							"x": 0.615,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 0.615,
							"y": 1.24,
							"count": 1
						},
						{
							"x": 0.615,
							"y": 1.55,
							"count": 1
						},
						{
							"x": 0.640625,
							"y": 0.0775,
							"count": 2
						},
						{
							"x": 0.640625,
							"y": 0.9299999999999999,
							"count": 1
						},
						{
							"x": 0.640625,
							"y": 1.0075,
							"count": 1
						},
						{
							"x": 0.640625,
							"y": 1.55,
							"count": 1
						},
						{
							"x": 0.66625,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.66625,
							"y": 0.3875,
							"count": 1
						},
						{
							"x": 0.66625,
							"y": 0.6975,
							"count": 1
						},
						{
							"x": 0.691875,
							"y": 0,
							"count": 1
						},
						{
							"x": 0.7175,
							"y": 0.0775,
							"count": 1
						},
						{
							"x": 0.743125,
							"y": 0.155,
							"count": 1
						},
						{
							"x": 0.794375,
							"y": 0.155,
							"count": 1
						}
					],
					"x": {
						"extent": [
							0,
							0.8200000000000001
						],
						"delta": 0.025625000000000002
					},
					"y": {
						"extent": [
							0,
							2.48
						],
						"delta": 0.0775
					}
				}
			}
		},
		"histogram2DNumberOfBins": 32,
		"legendShapes": {
			"Circle": "#Circle",
			"Square": "#Square",
			"Triangle": "#Triangle",
			"Diamond": "#Diamond",
			"X": "#X",
			"Pentagon": "#Pentagon",
			"InvertedTriangle": "#InvertedTriangle",
			"Star": "#Star",
			"Plus": "#Plus"
		},
		"legendColors": [
			"rgb(166, 206, 227)",
			"rgb(31, 120, 180)",
			"rgb(178, 223, 138)",
			"rgb(51, 160, 44)",
			"rgb(251, 154, 153)",
			"rgb(227, 26, 28)",
			"rgb(253, 191, 111)",
			"rgb(255, 127, 0)",
			"rgb(202, 178, 214)",
			"rgb(106, 61, 154)",
			"rgb(255, 255, 153)",
			"rgb(177, 89, 40)"
		],
		"legendEntries": [
			"versatility index",
			"true shooting percentage",
			"rebounds pergame",
			"blocks per game",
			"points per game",
			"3 point shots percentage",
			"turnover per pocession",
			"age",
			"free throw attempts",
			"true rebound percentage",
			"2 point shots attempts",
			"3 point shots attempts",
			"percentage of team minutes",
			"games",
			"percentage of team assists",
			"assists per game",
			"steals per game",
			"usage percent",
			"minutes",
			"2 point shots percentage",
			"free throw percent"
		],
		"legendPriorities": [],
		"legendMapping": {
			"versatility index": {
				"color": "rgb(166, 206, 227)",
				"shape": "#Circle"
			},
			"true shooting percentage": {
				"color": "rgb(31, 120, 180)",
				"shape": "#Square"
			},
			"rebounds pergame": {
				"color": "rgb(178, 223, 138)",
				"shape": "#Triangle"
			},
			"blocks per game": {
				"color": "rgb(51, 160, 44)",
				"shape": "#Diamond"
			},
			"points per game": {
				"color": "rgb(251, 154, 153)",
				"shape": "#X"
			},
			"3 point shots percentage": {
				"color": "rgb(227, 26, 28)",
				"shape": "#Pentagon"
			},
			"turnover per pocession": {
				"color": "rgb(253, 191, 111)",
				"shape": "#InvertedTriangle"
			},
			"age": {
				"color": "rgb(255, 127, 0)",
				"shape": "#Star"
			},
			"free throw attempts": {
				"color": "rgb(202, 178, 214)",
				"shape": "#Plus"
			},
			"true rebound percentage": {
				"color": "rgb(106, 61, 154)",
				"shape": "#Circle"
			},
			"2 point shots attempts": {
				"color": "rgb(255, 255, 153)",
				"shape": "#Square"
			},
			"3 point shots attempts": {
				"color": "rgb(177, 89, 40)",
				"shape": "#Triangle"
			},
			"percentage of team minutes": {
				"color": "rgb(166, 206, 227)",
				"shape": "#Diamond"
			},
			"games": {
				"color": "rgb(31, 120, 180)",
				"shape": "#X"
			},
			"percentage of team assists": {
				"color": "rgb(178, 223, 138)",
				"shape": "#Pentagon"
			},
			"assists per game": {
				"color": "rgb(51, 160, 44)",
				"shape": "#InvertedTriangle"
			},
			"steals per game": {
				"color": "rgb(251, 154, 153)",
				"shape": "#Star"
			},
			"usage percent": {
				"color": "rgb(227, 26, 28)",
				"shape": "#Plus"
			},
			"minutes": {
				"color": "rgb(253, 191, 111)",
				"shape": "#Circle"
			},
			"2 point shots percentage": {
				"color": "rgb(255, 127, 0)",
				"shape": "#Square"
			},
			"free throw percent": {
				"color": "rgb(202, 178, 214)",
				"shape": "#Triangle"
			}
		},
		"dirty": true,
		"legendDirty": false
	};

/***/ }
/******/ ]);